/**
 * Generated by @openapi-codegen
 *
 * @version 1.1.4
 */
import * as reactQuery from "react-query";
import { useGithubContext, GithubContext } from "./githubContext";
import { githubFetch } from "./githubFetcher";
import type * as Schemas from "./githubSchemas";
import type * as Responses from "./githubResponses";

export type MetaRootResponse = {
  /*
   * @format uri
   */
  authorizations_url: string;
  /*
   * @format uri
   */
  code_search_url: string;
  /*
   * @format uri
   */
  commit_search_url: string;
  /*
   * @format uri
   */
  current_user_authorizations_html_url: string;
  /*
   * @format uri
   */
  current_user_repositories_url: string;
  /*
   * @format uri
   */
  current_user_url: string;
  /*
   * @format uri
   */
  emails_url: string;
  /*
   * @format uri
   */
  emojis_url: string;
  /*
   * @format uri
   */
  events_url: string;
  /*
   * @format uri
   */
  feeds_url: string;
  /*
   * @format uri
   */
  followers_url: string;
  /*
   * @format uri
   */
  following_url: string;
  /*
   * @format uri
   */
  gists_url: string;
  /*
   * @format uri
   */
  hub_url: string;
  /*
   * @format uri
   */
  issue_search_url: string;
  /*
   * @format uri
   */
  issues_url: string;
  /*
   * @format uri
   */
  keys_url: string;
  /*
   * @format uri
   */
  label_search_url: string;
  /*
   * @format uri
   */
  notifications_url: string;
  /*
   * @format uri
   */
  organization_repositories_url: string;
  /*
   * @format uri
   */
  organization_teams_url: string;
  /*
   * @format uri
   */
  organization_url: string;
  /*
   * @format uri
   */
  public_gists_url: string;
  /*
   * @format uri
   */
  rate_limit_url: string;
  /*
   * @format uri
   */
  repository_search_url: string;
  /*
   * @format uri
   */
  repository_url: string;
  /*
   * @format uri
   */
  starred_gists_url: string;
  /*
   * @format uri
   */
  starred_url: string;
  /*
   * @format uri
   */
  topic_search_url?: string;
  /*
   * @format uri
   */
  user_organizations_url: string;
  /*
   * @format uri
   */
  user_repositories_url: string;
  /*
   * @format uri
   */
  user_search_url: string;
  /*
   * @format uri
   */
  user_url: string;
};

export type MetaRootVariables = GithubContext["fetcherOptions"];

/**
 * Get Hypermedia links to resources accessible in GitHub's REST API
 */
export const fetchMetaRoot = (variables: MetaRootVariables) =>
  githubFetch<MetaRootResponse, undefined, {}, {}, {}>({
    url: "/",
    method: "get",
    ...variables,
  });

/**
 * Get Hypermedia links to resources accessible in GitHub's REST API
 */
export const useMetaRoot = (
  variables: MetaRootVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<MetaRootResponse, undefined, MetaRootResponse>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<MetaRootResponse, undefined, MetaRootResponse>(
    queryKeyFn({ path: "/", operationId: "metaRoot", variables }),
    () => fetchMetaRoot({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsGetAuthenticatedVariables = GithubContext["fetcherOptions"];

/**
 * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsGetAuthenticated = (
  variables: AppsGetAuthenticatedVariables
) =>
  githubFetch<Schemas.Integration, undefined, {}, {}, {}>({
    url: "/app",
    method: "get",
    ...variables,
  });

/**
 * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsGetAuthenticated = (
  variables: AppsGetAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Integration,
      undefined,
      Schemas.Integration
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Integration,
    undefined,
    Schemas.Integration
  >(
    queryKeyFn({
      path: "/app",
      operationId: "appsGetAuthenticated",
      variables,
    }),
    () => fetchAppsGetAuthenticated({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsCreateFromManifestPathParams = {
  code: string;
};

export type AppsCreateFromManifestResponse = {
  /*
   * @example "Iv1.25b5d1e65ffc4022"
   */
  client_id: string;
  /*
   * @example "1d4b2097ac622ba702d19de498f005747a8b21d3"
   */
  client_secret: string;
  /*
   * @example "2017-07-08T20:18:44.000Z"
   * @format date-time
   */
  created_at: string;
  /*
   * @example The description of the app.
   */
  description: string | null;
  /*
   * The list of events for the GitHub app
   *
   * @example label
   * @example deployment
   */
  events: string[];
  /*
   * @example https://example.com
   * @format uri
   */
  external_url: string;
  /*
   * @example https://github.com/apps/super-ci
   * @format uri
   */
  html_url: string;
  /*
   * Unique identifier of the GitHub app
   *
   * @example 37
   */
  id?: number;
  /*
   * The number of installations associated with the GitHub app
   *
   * @example 5
   */
  installations_count?: number;
  /*
   * The name of the GitHub app
   *
   * @example Probot Owners
   */
  name?: string;
  /*
   * @example MDExOkludGVncmF0aW9uMQ==
   */
  node_id?: string;
  /*
   * Simple User
   */
  owner?: Schemas.SimpleUser;
  /*
   * @example "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\n-----END RSA PRIVATE KEY-----\n"
   */
  pem: string;
  /*
   * The set of permissions for the GitHub app
   *
   * @example {"deployments":"write","issues":"read"}
   */
  permissions: {
    checks?: string;
    contents?: string;
    deployments?: string;
    issues?: string;
    metadata?: string;
  } & {
    [key: string]: string;
  };
  /*
   * The slug name of the GitHub app
   *
   * @example probot-owners
   */
  slug?: string;
  /*
   * @example "2017-07-08T20:18:44.000Z"
   * @format date-time
   */
  updated_at: string;
  /*
   * @example "6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"
   */
  webhook_secret: string;
} & {
  [key: string]: any;
};

export type AppsCreateFromManifestVariables = {
  pathParams: AppsCreateFromManifestPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
 */
export const fetchAppsCreateFromManifest = (
  variables: AppsCreateFromManifestVariables
) =>
  githubFetch<
    AppsCreateFromManifestResponse,
    undefined,
    {},
    {},
    AppsCreateFromManifestPathParams
  >({ url: "/app-manifests/{code}/conversions", method: "post", ...variables });

/**
 * Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
 */
export const useAppsCreateFromManifest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      AppsCreateFromManifestResponse,
      Responses.NotFound | Responses.ValidationFailedSimple,
      AppsCreateFromManifestVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    AppsCreateFromManifestResponse,
    Responses.NotFound | Responses.ValidationFailedSimple,
    AppsCreateFromManifestVariables
  >(
    (variables: AppsCreateFromManifestVariables) =>
      fetchAppsCreateFromManifest({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsGetWebhookConfigForAppVariables =
  GithubContext["fetcherOptions"];

/**
 * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsGetWebhookConfigForApp = (
  variables: AppsGetWebhookConfigForAppVariables
) =>
  githubFetch<Schemas.WebhookConfig, undefined, {}, {}, {}>({
    url: "/app/hook/config",
    method: "get",
    ...variables,
  });

/**
 * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsGetWebhookConfigForApp = (
  variables: AppsGetWebhookConfigForAppVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WebhookConfig,
      undefined,
      Schemas.WebhookConfig
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.WebhookConfig,
    undefined,
    Schemas.WebhookConfig
  >(
    queryKeyFn({
      path: "/app/hook/config",
      operationId: "appsGetWebhookConfigForApp",
      variables,
    }),
    () => fetchAppsGetWebhookConfigForApp({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsUpdateWebhookConfigForAppRequestBody = {
  content_type?: Schemas.WebhookConfigContentType;
  insecure_ssl?: Schemas.WebhookConfigInsecureSsl;
  secret?: Schemas.WebhookConfigSecret;
  url?: Schemas.WebhookConfigUrl;
};

export type AppsUpdateWebhookConfigForAppVariables = {
  body?: AppsUpdateWebhookConfigForAppRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsUpdateWebhookConfigForApp = (
  variables: AppsUpdateWebhookConfigForAppVariables
) =>
  githubFetch<
    Schemas.WebhookConfig,
    AppsUpdateWebhookConfigForAppRequestBody,
    {},
    {},
    {}
  >({ url: "/app/hook/config", method: "patch", ...variables });

/**
 * Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsUpdateWebhookConfigForApp = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.WebhookConfig,
      undefined,
      AppsUpdateWebhookConfigForAppVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.WebhookConfig,
    undefined,
    AppsUpdateWebhookConfigForAppVariables
  >(
    (variables: AppsUpdateWebhookConfigForAppVariables) =>
      fetchAppsUpdateWebhookConfigForApp({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsListInstallationsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  outdated?: string;
};

export type AppsListInstallationsResponse = Schemas.Installation[];

export type AppsListInstallationsVariables = {
  queryParams?: AppsListInstallationsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 *
 * The permissions the installation has are included under the `permissions` key.
 */
export const fetchAppsListInstallations = (
  variables: AppsListInstallationsVariables
) =>
  githubFetch<
    AppsListInstallationsResponse,
    undefined,
    {},
    AppsListInstallationsQueryParams,
    {}
  >({ url: "/app/installations", method: "get", ...variables });

/**
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 *
 * The permissions the installation has are included under the `permissions` key.
 */
export const useAppsListInstallations = (
  variables: AppsListInstallationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListInstallationsResponse,
      undefined,
      AppsListInstallationsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    AppsListInstallationsResponse,
    undefined,
    AppsListInstallationsResponse
  >(
    queryKeyFn({
      path: "/app/installations",
      operationId: "appsListInstallations",
      variables,
    }),
    () => fetchAppsListInstallations({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsDeleteInstallationPathParams = {
  /*
   * installation_id parameter
   */
  installationId: number;
};

export type AppsDeleteInstallationVariables = {
  pathParams: AppsDeleteInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/reference/apps/#suspend-an-app-installation)" endpoint.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsDeleteInstallation = (
  variables: AppsDeleteInstallationVariables
) =>
  githubFetch<undefined, undefined, {}, {}, AppsDeleteInstallationPathParams>({
    url: "/app/installations/{installationId}",
    method: "delete",
    ...variables,
  });

/**
 * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/reference/apps/#suspend-an-app-installation)" endpoint.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsDeleteInstallation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotFound,
      AppsDeleteInstallationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotFound,
    AppsDeleteInstallationVariables
  >(
    (variables: AppsDeleteInstallationVariables) =>
      fetchAppsDeleteInstallation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsGetInstallationPathParams = {
  /*
   * installation_id parameter
   */
  installationId: number;
};

export type AppsGetInstallationVariables = {
  pathParams: AppsGetInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables an authenticated GitHub App to find an installation's information using the installation id. The installation's account type (`target_type`) will be either an organization or a user account, depending which account the repository belongs to.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsGetInstallation = (
  variables: AppsGetInstallationVariables
) =>
  githubFetch<
    Schemas.Installation,
    undefined,
    {},
    {},
    AppsGetInstallationPathParams
  >({
    url: "/app/installations/{installationId}",
    method: "get",
    ...variables,
  });

/**
 * Enables an authenticated GitHub App to find an installation's information using the installation id. The installation's account type (`target_type`) will be either an organization or a user account, depending which account the repository belongs to.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsGetInstallation = (
  variables: AppsGetInstallationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Installation,
      Responses.NotFound | Responses.PreviewHeaderMissing,
      Schemas.Installation
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Installation,
    Responses.NotFound | Responses.PreviewHeaderMissing,
    Schemas.Installation
  >(
    queryKeyFn({
      path: "/app/installations/{installation_id}",
      operationId: "appsGetInstallation",
      variables,
    }),
    () => fetchAppsGetInstallation({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsCreateInstallationAccessTokenPathParams = {
  /*
   * installation_id parameter
   */
  installationId: number;
};

export type AppsCreateInstallationAccessTokenRequestBody = {
  permissions?: Schemas.AppPermissions;
  /*
   * List of repository names that the token should have access to
   */
  repositories?: string[];
  /*
   * List of repository IDs that the token should have access to
   *
   * @example 1
   */
  repository_ids?: number[];
};

export type AppsCreateInstallationAccessTokenVariables = {
  body?: AppsCreateInstallationAccessTokenRequestBody;
  pathParams: AppsCreateInstallationAccessTokenPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsCreateInstallationAccessToken = (
  variables: AppsCreateInstallationAccessTokenVariables
) =>
  githubFetch<
    Schemas.InstallationToken,
    AppsCreateInstallationAccessTokenRequestBody,
    {},
    {},
    AppsCreateInstallationAccessTokenPathParams
  >({
    url: "/app/installations/{installationId}/access_tokens",
    method: "post",
    ...variables,
  });

/**
 * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsCreateInstallationAccessToken = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.InstallationToken,
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.PreviewHeaderMissing
      | Responses.ValidationFailed,
      AppsCreateInstallationAccessTokenVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.InstallationToken,
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.PreviewHeaderMissing
    | Responses.ValidationFailed,
    AppsCreateInstallationAccessTokenVariables
  >(
    (variables: AppsCreateInstallationAccessTokenVariables) =>
      fetchAppsCreateInstallationAccessToken({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type AppsUnsuspendInstallationPathParams = {
  /*
   * installation_id parameter
   */
  installationId: number;
};

export type AppsUnsuspendInstallationVariables = {
  pathParams: AppsUnsuspendInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes a GitHub App installation suspension.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsUnsuspendInstallation = (
  variables: AppsUnsuspendInstallationVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    AppsUnsuspendInstallationPathParams
  >({
    url: "/app/installations/{installationId}/suspended",
    method: "delete",
    ...variables,
  });

/**
 * Removes a GitHub App installation suspension.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsUnsuspendInstallation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotFound,
      AppsUnsuspendInstallationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotFound,
    AppsUnsuspendInstallationVariables
  >(
    (variables: AppsUnsuspendInstallationVariables) =>
      fetchAppsUnsuspendInstallation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsSuspendInstallationPathParams = {
  /*
   * installation_id parameter
   */
  installationId: number;
};

export type AppsSuspendInstallationVariables = {
  pathParams: AppsSuspendInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsSuspendInstallation = (
  variables: AppsSuspendInstallationVariables
) =>
  githubFetch<undefined, undefined, {}, {}, AppsSuspendInstallationPathParams>({
    url: "/app/installations/{installationId}/suspended",
    method: "put",
    ...variables,
  });

/**
 * Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsSuspendInstallation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotFound,
      AppsSuspendInstallationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotFound,
    AppsSuspendInstallationVariables
  >(
    (variables: AppsSuspendInstallationVariables) =>
      fetchAppsSuspendInstallation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OauthAuthorizationsListGrantsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * The client ID of your GitHub app.
   */
  client_id?: string;
};

export type OauthAuthorizationsListGrantsResponse = Schemas.ApplicationGrant[];

export type OauthAuthorizationsListGrantsVariables = {
  queryParams?: OauthAuthorizationsListGrantsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `["repo", "user"]`.
 */
export const fetchOauthAuthorizationsListGrants = (
  variables: OauthAuthorizationsListGrantsVariables
) =>
  githubFetch<
    OauthAuthorizationsListGrantsResponse,
    undefined,
    {},
    OauthAuthorizationsListGrantsQueryParams,
    {}
  >({ url: "/applications/grants", method: "get", ...variables });

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `["repo", "user"]`.
 */
export const useOauthAuthorizationsListGrants = (
  variables: OauthAuthorizationsListGrantsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OauthAuthorizationsListGrantsResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      OauthAuthorizationsListGrantsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OauthAuthorizationsListGrantsResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound,
    OauthAuthorizationsListGrantsResponse
  >(
    queryKeyFn({
      path: "/applications/grants",
      operationId: "oauthAuthorizationsListGrants",
      variables,
    }),
    () =>
      fetchOauthAuthorizationsListGrants({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OauthAuthorizationsDeleteGrantPathParams = {
  /*
   * grant_id parameter
   */
  grantId: number;
};

export type OauthAuthorizationsDeleteGrantVariables = {
  pathParams: OauthAuthorizationsDeleteGrantPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
 */
export const fetchOauthAuthorizationsDeleteGrant = (
  variables: OauthAuthorizationsDeleteGrantVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    OauthAuthorizationsDeleteGrantPathParams
  >({ url: "/applications/grants/{grantId}", method: "delete", ...variables });

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
 */
export const useOauthAuthorizationsDeleteGrant = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden,
      OauthAuthorizationsDeleteGrantVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden,
    OauthAuthorizationsDeleteGrantVariables
  >(
    (variables: OauthAuthorizationsDeleteGrantVariables) =>
      fetchOauthAuthorizationsDeleteGrant({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OauthAuthorizationsGetGrantPathParams = {
  /*
   * grant_id parameter
   */
  grantId: number;
};

export type OauthAuthorizationsGetGrantVariables = {
  pathParams: OauthAuthorizationsGetGrantPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const fetchOauthAuthorizationsGetGrant = (
  variables: OauthAuthorizationsGetGrantVariables
) =>
  githubFetch<
    Schemas.ApplicationGrant,
    undefined,
    {},
    {},
    OauthAuthorizationsGetGrantPathParams
  >({ url: "/applications/grants/{grantId}", method: "get", ...variables });

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const useOauthAuthorizationsGetGrant = (
  variables: OauthAuthorizationsGetGrantVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ApplicationGrant,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden,
      Schemas.ApplicationGrant
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ApplicationGrant,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden,
    Schemas.ApplicationGrant
  >(
    queryKeyFn({
      path: "/applications/grants/{grant_id}",
      operationId: "oauthAuthorizationsGetGrant",
      variables,
    }),
    () => fetchOauthAuthorizationsGetGrant({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsDeleteAuthorizationPathParams = {
  /*
   * The client ID of your GitHub app.
   */
  clientId: string;
};

export type AppsDeleteAuthorizationRequestBody = {
  /*
   * The OAuth access token used to authenticate to the GitHub API.
   */
  access_token?: string;
};

export type AppsDeleteAuthorizationVariables = {
  body?: AppsDeleteAuthorizationRequestBody;
  pathParams: AppsDeleteAuthorizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
 * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
 */
export const fetchAppsDeleteAuthorization = (
  variables: AppsDeleteAuthorizationVariables
) =>
  githubFetch<
    undefined,
    AppsDeleteAuthorizationRequestBody,
    {},
    {},
    AppsDeleteAuthorizationPathParams
  >({ url: "/applications/{clientId}/grant", method: "delete", ...variables });

/**
 * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
 * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
 */
export const useAppsDeleteAuthorization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.ValidationFailed,
      AppsDeleteAuthorizationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.ValidationFailed,
    AppsDeleteAuthorizationVariables
  >(
    (variables: AppsDeleteAuthorizationVariables) =>
      fetchAppsDeleteAuthorization({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsRevokeGrantForApplicationPathParams = {
  /*
   * The client ID of your GitHub app.
   */
  clientId: string;
  accessToken: string;
};

export type AppsRevokeGrantForApplicationVariables = {
  pathParams: AppsRevokeGrantForApplicationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
 *
 * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid token as `:access_token` and the grant for the token's owner will be deleted.
 *
 * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the Applications settings page under "Authorized OAuth Apps" on GitHub](https://github.com/settings/applications#authorized).
 */
export const fetchAppsRevokeGrantForApplication = (
  variables: AppsRevokeGrantForApplicationVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    AppsRevokeGrantForApplicationPathParams
  >({
    url: "/applications/{clientId}/grants/{accessToken}",
    method: "delete",
    ...variables,
  });

/**
 * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
 *
 * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid token as `:access_token` and the grant for the token's owner will be deleted.
 *
 * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the Applications settings page under "Authorized OAuth Apps" on GitHub](https://github.com/settings/applications#authorized).
 */
export const useAppsRevokeGrantForApplication = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      AppsRevokeGrantForApplicationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    AppsRevokeGrantForApplicationVariables
  >(
    (variables: AppsRevokeGrantForApplicationVariables) =>
      fetchAppsRevokeGrantForApplication({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsDeleteTokenPathParams = {
  /*
   * The client ID of your GitHub app.
   */
  clientId: string;
};

export type AppsDeleteTokenRequestBody = {
  /*
   * The OAuth access token used to authenticate to the GitHub API.
   */
  access_token: string;
};

export type AppsDeleteTokenVariables = {
  body: AppsDeleteTokenRequestBody;
  pathParams: AppsDeleteTokenPathParams;
} & GithubContext["fetcherOptions"];

/**
 * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
 */
export const fetchAppsDeleteToken = (variables: AppsDeleteTokenVariables) =>
  githubFetch<
    undefined,
    AppsDeleteTokenRequestBody,
    {},
    {},
    AppsDeleteTokenPathParams
  >({ url: "/applications/{clientId}/token", method: "delete", ...variables });

/**
 * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
 */
export const useAppsDeleteToken = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.ValidationFailed,
      AppsDeleteTokenVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.ValidationFailed,
    AppsDeleteTokenVariables
  >(
    (variables: AppsDeleteTokenVariables) =>
      fetchAppsDeleteToken({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsResetTokenPathParams = {
  /*
   * The client ID of your GitHub app.
   */
  clientId: string;
};

export type AppsResetTokenRequestBody = {
  /*
   * The access_token of the OAuth application.
   */
  access_token: string;
};

export type AppsResetTokenVariables = {
  body: AppsResetTokenRequestBody;
  pathParams: AppsResetTokenPathParams;
} & GithubContext["fetcherOptions"];

/**
 * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
 */
export const fetchAppsResetToken = (variables: AppsResetTokenVariables) =>
  githubFetch<
    Schemas.Authorization,
    AppsResetTokenRequestBody,
    {},
    {},
    AppsResetTokenPathParams
  >({ url: "/applications/{clientId}/token", method: "patch", ...variables });

/**
 * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
 */
export const useAppsResetToken = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Authorization,
      Responses.ValidationFailed,
      AppsResetTokenVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Authorization,
    Responses.ValidationFailed,
    AppsResetTokenVariables
  >(
    (variables: AppsResetTokenVariables) =>
      fetchAppsResetToken({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsCheckTokenPathParams = {
  /*
   * The client ID of your GitHub app.
   */
  clientId: string;
};

export type AppsCheckTokenRequestBody = {
  /*
   * The access_token of the OAuth application.
   */
  access_token: string;
};

export type AppsCheckTokenVariables = {
  body: AppsCheckTokenRequestBody;
  pathParams: AppsCheckTokenPathParams;
} & GithubContext["fetcherOptions"];

/**
 * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.
 */
export const fetchAppsCheckToken = (variables: AppsCheckTokenVariables) =>
  githubFetch<
    Schemas.Authorization,
    AppsCheckTokenRequestBody,
    {},
    {},
    AppsCheckTokenPathParams
  >({ url: "/applications/{clientId}/token", method: "post", ...variables });

/**
 * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.
 */
export const useAppsCheckToken = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Authorization,
      Responses.NotFound | Responses.ValidationFailed,
      AppsCheckTokenVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Authorization,
    Responses.NotFound | Responses.ValidationFailed,
    AppsCheckTokenVariables
  >(
    (variables: AppsCheckTokenVariables) =>
      fetchAppsCheckToken({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsScopeTokenPathParams = {
  /*
   * The client ID of your GitHub app.
   */
  clientId: string;
};

export type AppsScopeTokenRequestBody = {
  /*
   * **Required.** The OAuth access token used to authenticate to the GitHub API.
   *
   * @example e72e16c7e42f292c6912e7710c838347ae178b4a
   */
  access_token: string;
  permissions?: Schemas.AppPermissions;
  /*
   * The list of repository names to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified.
   */
  repositories?: string[];
  /*
   * The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified.
   *
   * @example 1
   */
  repository_ids?: number[];
  /*
   * The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified.
   *
   * @example octocat
   */
  target?: string;
  /*
   * The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified.
   *
   * @example 1
   */
  target_id?: number;
};

export type AppsScopeTokenVariables = {
  body: AppsScopeTokenRequestBody;
  pathParams: AppsScopeTokenPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Exchanges a non-repository scoped user-to-server OAuth access token for a repository scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
 */
export const fetchAppsScopeToken = (variables: AppsScopeTokenVariables) =>
  githubFetch<
    Schemas.Authorization,
    AppsScopeTokenRequestBody,
    {},
    {},
    AppsScopeTokenPathParams
  >({
    url: "/applications/{clientId}/token/scoped",
    method: "post",
    ...variables,
  });

/**
 * Exchanges a non-repository scoped user-to-server OAuth access token for a repository scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
 */
export const useAppsScopeToken = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Authorization,
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.ValidationFailed,
      AppsScopeTokenVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Authorization,
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.ValidationFailed,
    AppsScopeTokenVariables
  >(
    (variables: AppsScopeTokenVariables) =>
      fetchAppsScopeToken({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsRevokeAuthorizationForApplicationPathParams = {
  /*
   * The client ID of your GitHub app.
   */
  clientId: string;
  accessToken: string;
};

export type AppsRevokeAuthorizationForApplicationVariables = {
  pathParams: AppsRevokeAuthorizationForApplicationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
 *
 * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
 */
export const fetchAppsRevokeAuthorizationForApplication = (
  variables: AppsRevokeAuthorizationForApplicationVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    AppsRevokeAuthorizationForApplicationPathParams
  >({
    url: "/applications/{clientId}/tokens/{accessToken}",
    method: "delete",
    ...variables,
  });

/**
 * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
 *
 * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
 */
export const useAppsRevokeAuthorizationForApplication = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      AppsRevokeAuthorizationForApplicationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    AppsRevokeAuthorizationForApplicationVariables
  >(
    (variables: AppsRevokeAuthorizationForApplicationVariables) =>
      fetchAppsRevokeAuthorizationForApplication({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type AppsCheckAuthorizationPathParams = {
  /*
   * The client ID of your GitHub app.
   */
  clientId: string;
  accessToken: string;
};

export type AppsCheckAuthorizationResponse = Schemas.Authorization;

export type AppsCheckAuthorizationVariables = {
  pathParams: AppsCheckAuthorizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
 *
 * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
 */
export const fetchAppsCheckAuthorization = (
  variables: AppsCheckAuthorizationVariables
) =>
  githubFetch<
    AppsCheckAuthorizationResponse,
    undefined,
    {},
    {},
    AppsCheckAuthorizationPathParams
  >({
    url: "/applications/{clientId}/tokens/{accessToken}",
    method: "get",
    ...variables,
  });

/**
 * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
 *
 * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
 */
export const useAppsCheckAuthorization = (
  variables: AppsCheckAuthorizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsCheckAuthorizationResponse,
      Responses.NotFound,
      AppsCheckAuthorizationResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    AppsCheckAuthorizationResponse,
    Responses.NotFound,
    AppsCheckAuthorizationResponse
  >(
    queryKeyFn({
      path: "/applications/{client_id}/tokens/{access_token}",
      operationId: "appsCheckAuthorization",
      variables,
    }),
    () => fetchAppsCheckAuthorization({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsResetAuthorizationPathParams = {
  /*
   * The client ID of your GitHub app.
   */
  clientId: string;
  accessToken: string;
};

export type AppsResetAuthorizationVariables = {
  pathParams: AppsResetAuthorizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
 *
 * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
 */
export const fetchAppsResetAuthorization = (
  variables: AppsResetAuthorizationVariables
) =>
  githubFetch<
    Schemas.Authorization,
    undefined,
    {},
    {},
    AppsResetAuthorizationPathParams
  >({
    url: "/applications/{clientId}/tokens/{accessToken}",
    method: "post",
    ...variables,
  });

/**
 * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
 *
 * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
 */
export const useAppsResetAuthorization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Authorization,
      undefined,
      AppsResetAuthorizationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Authorization,
    undefined,
    AppsResetAuthorizationVariables
  >(
    (variables: AppsResetAuthorizationVariables) =>
      fetchAppsResetAuthorization({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsGetBySlugPathParams = {
  appSlug: string;
};

export type AppsGetBySlugVariables = {
  pathParams: AppsGetBySlugPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
 *
 * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const fetchAppsGetBySlug = (variables: AppsGetBySlugVariables) =>
  githubFetch<Schemas.Integration, undefined, {}, {}, AppsGetBySlugPathParams>({
    url: "/apps/{appSlug}",
    method: "get",
    ...variables,
  });

/**
 * **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
 *
 * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const useAppsGetBySlug = (
  variables: AppsGetBySlugVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Integration,
      Responses.Forbidden | Responses.NotFound | Responses.PreviewHeaderMissing,
      Schemas.Integration
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Integration,
    Responses.Forbidden | Responses.NotFound | Responses.PreviewHeaderMissing,
    Schemas.Integration
  >(
    queryKeyFn({
      path: "/apps/{app_slug}",
      operationId: "appsGetBySlug",
      variables,
    }),
    () => fetchAppsGetBySlug({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OauthAuthorizationsListAuthorizationsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * The client ID of your GitHub app.
   */
  client_id?: string;
};

export type OauthAuthorizationsListAuthorizationsResponse =
  Schemas.Authorization[];

export type OauthAuthorizationsListAuthorizationsVariables = {
  queryParams?: OauthAuthorizationsListAuthorizationsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const fetchOauthAuthorizationsListAuthorizations = (
  variables: OauthAuthorizationsListAuthorizationsVariables
) =>
  githubFetch<
    OauthAuthorizationsListAuthorizationsResponse,
    undefined,
    {},
    OauthAuthorizationsListAuthorizationsQueryParams,
    {}
  >({ url: "/authorizations", method: "get", ...variables });

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const useOauthAuthorizationsListAuthorizations = (
  variables: OauthAuthorizationsListAuthorizationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OauthAuthorizationsListAuthorizationsResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      OauthAuthorizationsListAuthorizationsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OauthAuthorizationsListAuthorizationsResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound,
    OauthAuthorizationsListAuthorizationsResponse
  >(
    queryKeyFn({
      path: "/authorizations",
      operationId: "oauthAuthorizationsListAuthorizations",
      variables,
    }),
    () =>
      fetchOauthAuthorizationsListAuthorizations({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OauthAuthorizationsCreateAuthorizationRequestBody = {
  /*
   * The OAuth app client key for which to create the token.
   *
   * @maxLength 20
   */
  client_id?: string;
  /*
   * The OAuth app client secret for which to create the token.
   *
   * @maxLength 40
   */
  client_secret?: string;
  /*
   * A unique string to distinguish an authorization from others created for the same client ID and user.
   */
  fingerprint?: string;
  /*
   * A note to remind you what the OAuth token is for.
   *
   * @example Update all gems
   */
  note?: string;
  /*
   * A URL to remind you what app the OAuth token is for.
   */
  note_url?: string;
  /*
   * A list of scopes that this authorization is in.
   *
   * @example public_repo
   * @example user
   */
  scopes?: string[] | null;
};

export type OauthAuthorizationsCreateAuthorizationVariables = {
  body?: OauthAuthorizationsCreateAuthorizationRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
 *
 * Creates OAuth tokens using [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
 *
 * To create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use `fingerprint` to differentiate between them.
 *
 * You can also create tokens on GitHub from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://help.github.com/articles/creating-an-access-token-for-command-line-use).
 *
 * Organizations that enforce SAML SSO require personal access tokens to be allowed. Read more about allowing tokens in [the GitHub Help documentation](https://help.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).
 */
export const fetchOauthAuthorizationsCreateAuthorization = (
  variables: OauthAuthorizationsCreateAuthorizationVariables
) =>
  githubFetch<
    Schemas.Authorization,
    OauthAuthorizationsCreateAuthorizationRequestBody,
    {},
    {},
    {}
  >({ url: "/authorizations", method: "post", ...variables });

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
 *
 * Creates OAuth tokens using [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
 *
 * To create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use `fingerprint` to differentiate between them.
 *
 * You can also create tokens on GitHub from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://help.github.com/articles/creating-an-access-token-for-command-line-use).
 *
 * Organizations that enforce SAML SSO require personal access tokens to be allowed. Read more about allowing tokens in [the GitHub Help documentation](https://help.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).
 */
export const useOauthAuthorizationsCreateAuthorization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Authorization,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.Gone
      | Responses.ValidationFailed,
      OauthAuthorizationsCreateAuthorizationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Authorization,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.Gone
    | Responses.ValidationFailed,
    OauthAuthorizationsCreateAuthorizationVariables
  >(
    (variables: OauthAuthorizationsCreateAuthorizationVariables) =>
      fetchOauthAuthorizationsCreateAuthorization({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type OauthAuthorizationsGetOrCreateAuthorizationForAppPathParams = {
  /*
   * The client ID of your GitHub app.
   */
  clientId: string;
};

export type OauthAuthorizationsGetOrCreateAuthorizationForAppRequestBody = {
  /*
   * The OAuth app client secret for which to create the token.
   *
   * @maxLength 40
   */
  client_secret: string;
  /*
   * A unique string to distinguish an authorization from others created for the same client ID and user.
   */
  fingerprint?: string;
  /*
   * A note to remind you what the OAuth token is for.
   *
   * @example Update all gems
   */
  note?: string;
  /*
   * A URL to remind you what app the OAuth token is for.
   */
  note_url?: string;
  /*
   * A list of scopes that this authorization is in.
   *
   * @example public_repo
   * @example user
   */
  scopes?: string[] | null;
};

export type OauthAuthorizationsGetOrCreateAuthorizationForAppVariables = {
  body: OauthAuthorizationsGetOrCreateAuthorizationForAppRequestBody;
  pathParams: OauthAuthorizationsGetOrCreateAuthorizationForAppPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
 *
 * Creates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
 *
 * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
 *
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const fetchOauthAuthorizationsGetOrCreateAuthorizationForApp = (
  variables: OauthAuthorizationsGetOrCreateAuthorizationForAppVariables
) =>
  githubFetch<
    Schemas.Authorization,
    OauthAuthorizationsGetOrCreateAuthorizationForAppRequestBody,
    {},
    {},
    OauthAuthorizationsGetOrCreateAuthorizationForAppPathParams
  >({ url: "/authorizations/clients/{clientId}", method: "put", ...variables });

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
 *
 * Creates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
 *
 * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
 *
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const useOauthAuthorizationsGetOrCreateAuthorizationForApp = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Authorization,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.ValidationFailed,
      OauthAuthorizationsGetOrCreateAuthorizationForAppVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Authorization,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.ValidationFailed,
    OauthAuthorizationsGetOrCreateAuthorizationForAppVariables
  >(
    (variables: OauthAuthorizationsGetOrCreateAuthorizationForAppVariables) =>
      fetchOauthAuthorizationsGetOrCreateAuthorizationForApp({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintPathParams =
  {
    /*
     * The client ID of your GitHub app.
     */
    clientId: string;
    fingerprint: string;
  };

export type OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintRequestBody =
  {
    /*
     * The OAuth app client secret for which to create the token.
     *
     * @maxLength 40
     */
    client_secret: string;
    /*
     * A note to remind you what the OAuth token is for.
     *
     * @example Update all gems
     */
    note?: string;
    /*
     * A URL to remind you what app the OAuth token is for.
     */
    note_url?: string;
    /*
     * A list of scopes that this authorization is in.
     *
     * @example public_repo
     * @example user
     */
    scopes?: string[] | null;
  };

export type OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintVariables =
  {
    body: OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintRequestBody;
    pathParams: OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintPathParams;
  } & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
 *
 * This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
 *
 * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
 */
export const fetchOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint =
  (
    variables: OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintVariables
  ) =>
    githubFetch<
      Schemas.Authorization,
      OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintRequestBody,
      {},
      {},
      OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintPathParams
    >({
      url: "/authorizations/clients/{clientId}/{fingerprint}",
      method: "put",
      ...variables,
    });

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
 *
 * This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
 *
 * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
 */
export const useOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        Schemas.Authorization,
        Responses.ValidationFailed,
        OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintVariables
      >,
      "mutationFn"
    >
  ) => {
    const { fetcherOptions } = useGithubContext();
    return reactQuery.useMutation<
      Schemas.Authorization,
      Responses.ValidationFailed,
      OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintVariables
    >(
      (
        variables: OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintVariables
      ) =>
        fetchOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint({
          ...fetcherOptions,
          ...variables,
        }),
      options
    );
  };

export type OauthAuthorizationsDeleteAuthorizationPathParams = {
  /*
   * authorization_id parameter
   */
  authorizationId: number;
};

export type OauthAuthorizationsDeleteAuthorizationVariables = {
  pathParams: OauthAuthorizationsDeleteAuthorizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const fetchOauthAuthorizationsDeleteAuthorization = (
  variables: OauthAuthorizationsDeleteAuthorizationVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    OauthAuthorizationsDeleteAuthorizationPathParams
  >({
    url: "/authorizations/{authorizationId}",
    method: "delete",
    ...variables,
  });

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const useOauthAuthorizationsDeleteAuthorization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden,
      OauthAuthorizationsDeleteAuthorizationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden,
    OauthAuthorizationsDeleteAuthorizationVariables
  >(
    (variables: OauthAuthorizationsDeleteAuthorizationVariables) =>
      fetchOauthAuthorizationsDeleteAuthorization({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type OauthAuthorizationsGetAuthorizationPathParams = {
  /*
   * authorization_id parameter
   */
  authorizationId: number;
};

export type OauthAuthorizationsGetAuthorizationVariables = {
  pathParams: OauthAuthorizationsGetAuthorizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const fetchOauthAuthorizationsGetAuthorization = (
  variables: OauthAuthorizationsGetAuthorizationVariables
) =>
  githubFetch<
    Schemas.Authorization,
    undefined,
    {},
    {},
    OauthAuthorizationsGetAuthorizationPathParams
  >({ url: "/authorizations/{authorizationId}", method: "get", ...variables });

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const useOauthAuthorizationsGetAuthorization = (
  variables: OauthAuthorizationsGetAuthorizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Authorization,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden,
      Schemas.Authorization
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Authorization,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden,
    Schemas.Authorization
  >(
    queryKeyFn({
      path: "/authorizations/{authorization_id}",
      operationId: "oauthAuthorizationsGetAuthorization",
      variables,
    }),
    () =>
      fetchOauthAuthorizationsGetAuthorization({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OauthAuthorizationsUpdateAuthorizationPathParams = {
  /*
   * authorization_id parameter
   */
  authorizationId: number;
};

export type OauthAuthorizationsUpdateAuthorizationRequestBody = {
  /*
   * A list of scopes to add to this authorization.
   */
  add_scopes?: string[];
  /*
   * A unique string to distinguish an authorization from others created for the same client ID and user.
   */
  fingerprint?: string;
  /*
   * A note to remind you what the OAuth token is for.
   *
   * @example Update all gems
   */
  note?: string;
  /*
   * A URL to remind you what app the OAuth token is for.
   */
  note_url?: string;
  /*
   * A list of scopes to remove from this authorization.
   */
  remove_scopes?: string[];
  /*
   * A list of scopes that this authorization is in.
   *
   * @example public_repo
   * @example user
   */
  scopes?: string[] | null;
};

export type OauthAuthorizationsUpdateAuthorizationVariables = {
  body?: OauthAuthorizationsUpdateAuthorizationRequestBody;
  pathParams: OauthAuthorizationsUpdateAuthorizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
 *
 * You can only send one of these scope keys at a time.
 */
export const fetchOauthAuthorizationsUpdateAuthorization = (
  variables: OauthAuthorizationsUpdateAuthorizationVariables
) =>
  githubFetch<
    Schemas.Authorization,
    OauthAuthorizationsUpdateAuthorizationRequestBody,
    {},
    {},
    OauthAuthorizationsUpdateAuthorizationPathParams
  >({
    url: "/authorizations/{authorizationId}",
    method: "patch",
    ...variables,
  });

/**
 * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 *
 * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
 *
 * You can only send one of these scope keys at a time.
 */
export const useOauthAuthorizationsUpdateAuthorization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Authorization,
      Responses.ValidationFailed,
      OauthAuthorizationsUpdateAuthorizationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Authorization,
    Responses.ValidationFailed,
    OauthAuthorizationsUpdateAuthorizationVariables
  >(
    (variables: OauthAuthorizationsUpdateAuthorizationVariables) =>
      fetchOauthAuthorizationsUpdateAuthorization({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type CodesOfConductGetAllCodesOfConductResponse =
  Schemas.CodeOfConduct[];

export type CodesOfConductGetAllCodesOfConductVariables =
  GithubContext["fetcherOptions"];

export const fetchCodesOfConductGetAllCodesOfConduct = (
  variables: CodesOfConductGetAllCodesOfConductVariables
) =>
  githubFetch<
    CodesOfConductGetAllCodesOfConductResponse,
    undefined,
    {},
    {},
    {}
  >({ url: "/codes_of_conduct", method: "get", ...variables });

export const useCodesOfConductGetAllCodesOfConduct = (
  variables: CodesOfConductGetAllCodesOfConductVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodesOfConductGetAllCodesOfConductResponse,
      Responses.NotModified | Responses.PreviewHeaderMissing,
      CodesOfConductGetAllCodesOfConductResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    CodesOfConductGetAllCodesOfConductResponse,
    Responses.NotModified | Responses.PreviewHeaderMissing,
    CodesOfConductGetAllCodesOfConductResponse
  >(
    queryKeyFn({
      path: "/codes_of_conduct",
      operationId: "codesOfConductGetAllCodesOfConduct",
      variables,
    }),
    () =>
      fetchCodesOfConductGetAllCodesOfConduct({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CodesOfConductGetConductCodePathParams = {
  key: string;
};

export type CodesOfConductGetConductCodeVariables = {
  pathParams: CodesOfConductGetConductCodePathParams;
} & GithubContext["fetcherOptions"];

export const fetchCodesOfConductGetConductCode = (
  variables: CodesOfConductGetConductCodeVariables
) =>
  githubFetch<
    Schemas.CodeOfConduct,
    undefined,
    {},
    {},
    CodesOfConductGetConductCodePathParams
  >({ url: "/codes_of_conduct/{key}", method: "get", ...variables });

export const useCodesOfConductGetConductCode = (
  variables: CodesOfConductGetConductCodeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeOfConduct,
      | Responses.NotModified
      | Responses.NotFound
      | Responses.PreviewHeaderMissing,
      Schemas.CodeOfConduct
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CodeOfConduct,
    Responses.NotModified | Responses.NotFound | Responses.PreviewHeaderMissing,
    Schemas.CodeOfConduct
  >(
    queryKeyFn({
      path: "/codes_of_conduct/{key}",
      operationId: "codesOfConductGetConductCode",
      variables,
    }),
    () =>
      fetchCodesOfConductGetConductCode({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsCreateContentAttachmentPathParams = {
  contentReferenceId: number;
};

export type AppsCreateContentAttachmentRequestBody = {
  /*
   * The body of the attachment
   *
   * @example Body of the attachment
   * @maxLength 262144
   */
  body: string;
  /*
   * The title of the attachment
   *
   * @example Title of the attachment
   * @maxLength 1024
   */
  title: string;
};

export type AppsCreateContentAttachmentVariables = {
  body: AppsCreateContentAttachmentRequestBody;
  pathParams: AppsCreateContentAttachmentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the `id` of the content reference from the [`content_reference` event](https://docs.github.com/webhooks/event-payloads/#content_reference) to create an attachment.
 *
 * The app must create a content attachment within six hours of the content reference URL being posted. See "[Using content attachments](https://docs.github.com/apps/using-content-attachments/)" for details about content attachments.
 *
 * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const fetchAppsCreateContentAttachment = (
  variables: AppsCreateContentAttachmentVariables
) =>
  githubFetch<
    Schemas.ContentReferenceAttachment,
    AppsCreateContentAttachmentRequestBody,
    {},
    {},
    AppsCreateContentAttachmentPathParams
  >({
    url: "/content_references/{contentReferenceId}/attachments",
    method: "post",
    ...variables,
  });

/**
 * Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the `id` of the content reference from the [`content_reference` event](https://docs.github.com/webhooks/event-payloads/#content_reference) to create an attachment.
 *
 * The app must create a content attachment within six hours of the content reference URL being posted. See "[Using content attachments](https://docs.github.com/apps/using-content-attachments/)" for details about content attachments.
 *
 * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const useAppsCreateContentAttachment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ContentReferenceAttachment,
      | Responses.NotModified
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.Gone
      | Responses.PreviewHeaderMissing
      | Responses.ValidationFailed,
      AppsCreateContentAttachmentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ContentReferenceAttachment,
    | Responses.NotModified
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.Gone
    | Responses.PreviewHeaderMissing
    | Responses.ValidationFailed,
    AppsCreateContentAttachmentVariables
  >(
    (variables: AppsCreateContentAttachmentVariables) =>
      fetchAppsCreateContentAttachment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type EmojisGetResponse = {
  [key: string]: string;
};

export type EmojisGetVariables = GithubContext["fetcherOptions"];

/**
 * Lists all the emojis available to use on GitHub.
 */
export const fetchEmojisGet = (variables: EmojisGetVariables) =>
  githubFetch<EmojisGetResponse, undefined, {}, {}, {}>({
    url: "/emojis",
    method: "get",
    ...variables,
  });

/**
 * Lists all the emojis available to use on GitHub.
 */
export const useEmojisGet = (
  variables: EmojisGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      EmojisGetResponse,
      Responses.NotModified,
      EmojisGetResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    EmojisGetResponse,
    Responses.NotModified,
    EmojisGetResponse
  >(
    queryKeyFn({ path: "/emojis", operationId: "emojisGet", variables }),
    () => fetchEmojisGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EnterpriseAdminGetGithubActionsPermissionsEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminGetGithubActionsPermissionsEnterpriseVariables = {
  pathParams: EnterpriseAdminGetGithubActionsPermissionsEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminGetGithubActionsPermissionsEnterprise = (
  variables: EnterpriseAdminGetGithubActionsPermissionsEnterpriseVariables
) =>
  githubFetch<
    Schemas.ActionsEnterprisePermissions,
    undefined,
    {},
    {},
    EnterpriseAdminGetGithubActionsPermissionsEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/permissions",
    method: "get",
    ...variables,
  });

/**
 * Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminGetGithubActionsPermissionsEnterprise = (
  variables: EnterpriseAdminGetGithubActionsPermissionsEnterpriseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsEnterprisePermissions,
      undefined,
      Schemas.ActionsEnterprisePermissions
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsEnterprisePermissions,
    undefined,
    Schemas.ActionsEnterprisePermissions
  >(
    queryKeyFn({
      path: "/enterprises/{enterprise}/actions/permissions",
      operationId: "enterpriseAdminGetGithubActionsPermissionsEnterprise",
      variables,
    }),
    () =>
      fetchEnterpriseAdminGetGithubActionsPermissionsEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EnterpriseAdminSetGithubActionsPermissionsEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequestBody = {
  allowed_actions?: Schemas.AllowedActions;
  enabled_organizations: Schemas.EnabledOrganizations;
};

export type EnterpriseAdminSetGithubActionsPermissionsEnterpriseVariables = {
  body: EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequestBody;
  pathParams: EnterpriseAdminSetGithubActionsPermissionsEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminSetGithubActionsPermissionsEnterprise = (
  variables: EnterpriseAdminSetGithubActionsPermissionsEnterpriseVariables
) =>
  githubFetch<
    undefined,
    EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequestBody,
    {},
    {},
    EnterpriseAdminSetGithubActionsPermissionsEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/permissions",
    method: "put",
    ...variables,
  });

/**
 * Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminSetGithubActionsPermissionsEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      EnterpriseAdminSetGithubActionsPermissionsEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    EnterpriseAdminSetGithubActionsPermissionsEnterpriseVariables
  >(
    (
      variables: EnterpriseAdminSetGithubActionsPermissionsEnterpriseVariables
    ) =>
      fetchEnterpriseAdminSetGithubActionsPermissionsEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
  };

export type EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseQueryParams =
  {
    /*
     * Results per page (max 100).
     *
     * @default 30
     */
    per_page?: number;
    /*
     * Page number of the results to fetch.
     *
     * @default 1
     */
    page?: number;
  };

export type EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse =
  {
    organizations: Schemas.OrganizationSimple[];
    total_count: number;
  };

export type EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseVariables =
  {
    pathParams: EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprisePathParams;
    queryParams?: EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseQueryParams;
  } & GithubContext["fetcherOptions"];

/**
 * Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise =
  (
    variables: EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseVariables
  ) =>
    githubFetch<
      EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse,
      undefined,
      {},
      EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseQueryParams,
      EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprisePathParams
    >({
      url: "/enterprises/{enterprise}/actions/permissions/organizations",
      method: "get",
      ...variables,
    });

/**
 * Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise =
  (
    variables: EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseVariables,
    options?: Omit<
      reactQuery.UseQueryOptions<
        EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse,
        undefined,
        EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse
      >,
      "queryKey" | "queryFn"
    >
  ) => {
    const { fetcherOptions, queryOptions, queryKeyFn } =
      useGithubContext(options);
    return reactQuery.useQuery<
      EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse,
      undefined,
      EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse
    >(
      queryKeyFn({
        path: "/enterprises/{enterprise}/actions/permissions/organizations",
        operationId:
          "enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise",
        variables,
      }),
      () =>
        fetchEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise(
          { ...fetcherOptions, ...variables }
        ),
      {
        ...options,
        ...queryOptions,
      }
    );
  };

export type EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
  };

export type EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequestBody =
  {
    /*
     * List of organization IDs to enable for GitHub Actions.
     */
    selected_organization_ids: number[];
  };

export type EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseVariables =
  {
    body: EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequestBody;
    pathParams: EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprisePathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise =
  (
    variables: EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseVariables
  ) =>
    githubFetch<
      undefined,
      EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequestBody,
      {},
      {},
      EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprisePathParams
    >({
      url: "/enterprises/{enterprise}/actions/permissions/organizations",
      method: "put",
      ...variables,
    });

/**
 * Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        undefined,
        undefined,
        EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseVariables
      >,
      "mutationFn"
    >
  ) => {
    const { fetcherOptions } = useGithubContext();
    return reactQuery.useMutation<
      undefined,
      undefined,
      EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseVariables
    >(
      (
        variables: EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseVariables
      ) =>
        fetchEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise(
          { ...fetcherOptions, ...variables }
        ),
      options
    );
  };

export type EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Unique identifier of an organization.
     */
    orgId: number;
  };

export type EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseVariables =
  {
    pathParams: EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprisePathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise =
  (
    variables: EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseVariables
  ) =>
    githubFetch<
      undefined,
      undefined,
      {},
      {},
      EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprisePathParams
    >({
      url: "/enterprises/{enterprise}/actions/permissions/organizations/{orgId}",
      method: "delete",
      ...variables,
    });

/**
 * Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        undefined,
        undefined,
        EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseVariables
      >,
      "mutationFn"
    >
  ) => {
    const { fetcherOptions } = useGithubContext();
    return reactQuery.useMutation<
      undefined,
      undefined,
      EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseVariables
    >(
      (
        variables: EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseVariables
      ) =>
        fetchEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise({
          ...fetcherOptions,
          ...variables,
        }),
      options
    );
  };

export type EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Unique identifier of an organization.
     */
    orgId: number;
  };

export type EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseVariables =
  {
    pathParams: EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprisePathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise =
  (
    variables: EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseVariables
  ) =>
    githubFetch<
      undefined,
      undefined,
      {},
      {},
      EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprisePathParams
    >({
      url: "/enterprises/{enterprise}/actions/permissions/organizations/{orgId}",
      method: "put",
      ...variables,
    });

/**
 * Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        undefined,
        undefined,
        EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseVariables
      >,
      "mutationFn"
    >
  ) => {
    const { fetcherOptions } = useGithubContext();
    return reactQuery.useMutation<
      undefined,
      undefined,
      EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseVariables
    >(
      (
        variables: EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseVariables
      ) =>
        fetchEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise({
          ...fetcherOptions,
          ...variables,
        }),
      options
    );
  };

export type EnterpriseAdminGetAllowedActionsEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminGetAllowedActionsEnterpriseVariables = {
  pathParams: EnterpriseAdminGetAllowedActionsEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminGetAllowedActionsEnterprise = (
  variables: EnterpriseAdminGetAllowedActionsEnterpriseVariables
) =>
  githubFetch<
    Schemas.SelectedActions,
    undefined,
    {},
    {},
    EnterpriseAdminGetAllowedActionsEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/permissions/selected-actions",
    method: "get",
    ...variables,
  });

/**
 * Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminGetAllowedActionsEnterprise = (
  variables: EnterpriseAdminGetAllowedActionsEnterpriseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SelectedActions,
      undefined,
      Schemas.SelectedActions
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.SelectedActions,
    undefined,
    Schemas.SelectedActions
  >(
    queryKeyFn({
      path: "/enterprises/{enterprise}/actions/permissions/selected-actions",
      operationId: "enterpriseAdminGetAllowedActionsEnterprise",
      variables,
    }),
    () =>
      fetchEnterpriseAdminGetAllowedActionsEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EnterpriseAdminSetAllowedActionsEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminSetAllowedActionsEnterpriseVariables = {
  body: Schemas.SelectedActions;
  pathParams: EnterpriseAdminSetAllowedActionsEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminSetAllowedActionsEnterprise = (
  variables: EnterpriseAdminSetAllowedActionsEnterpriseVariables
) =>
  githubFetch<
    undefined,
    Schemas.SelectedActions,
    {},
    {},
    EnterpriseAdminSetAllowedActionsEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/permissions/selected-actions",
    method: "put",
    ...variables,
  });

/**
 * Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminSetAllowedActionsEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      EnterpriseAdminSetAllowedActionsEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    EnterpriseAdminSetAllowedActionsEnterpriseVariables
  >(
    (variables: EnterpriseAdminSetAllowedActionsEnterpriseVariables) =>
      fetchEnterpriseAdminSetAllowedActionsEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminListSelfHostedRunnerGroupsForEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseQueryParams =
  {
    /*
     * Results per page (max 100).
     *
     * @default 30
     */
    per_page?: number;
    /*
     * Page number of the results to fetch.
     *
     * @default 1
     */
    page?: number;
  };

export type EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse = {
  runner_groups: Schemas.RunnerGroupsEnterprise[];
  total_count: number;
};

export type EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseVariables = {
  pathParams: EnterpriseAdminListSelfHostedRunnerGroupsForEnterprisePathParams;
  queryParams?: EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all self-hosted runner groups for an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminListSelfHostedRunnerGroupsForEnterprise = (
  variables: EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseVariables
) =>
  githubFetch<
    EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse,
    undefined,
    {},
    EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseQueryParams,
    EnterpriseAdminListSelfHostedRunnerGroupsForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runner-groups",
    method: "get",
    ...variables,
  });

/**
 * Lists all self-hosted runner groups for an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminListSelfHostedRunnerGroupsForEnterprise = (
  variables: EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse,
      undefined,
      EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse,
    undefined,
    EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse
  >(
    queryKeyFn({
      path: "/enterprises/{enterprise}/actions/runner-groups",
      operationId: "enterpriseAdminListSelfHostedRunnerGroupsForEnterprise",
      variables,
    }),
    () =>
      fetchEnterpriseAdminListSelfHostedRunnerGroupsForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EnterpriseAdminCreateSelfHostedRunnerGroupForEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
  };

export type EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequestBody =
  {
    /*
     * Name of the runner group.
     */
    name: string;
    /*
     * List of runner IDs to add to the runner group.
     */
    runners?: number[];
    /*
     * List of organization IDs that can access the runner group.
     */
    selected_organization_ids?: number[];
    /*
     * Visibility of a runner group. You can select all organizations or select individual organization. Can be one of: `all` or `selected`
     */
    visibility?: "selected" | "all";
  };

export type EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseVariables = {
  body: EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequestBody;
  pathParams: EnterpriseAdminCreateSelfHostedRunnerGroupForEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a new self-hosted runner group for an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminCreateSelfHostedRunnerGroupForEnterprise = (
  variables: EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseVariables
) =>
  githubFetch<
    Schemas.RunnerGroupsEnterprise,
    EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequestBody,
    {},
    {},
    EnterpriseAdminCreateSelfHostedRunnerGroupForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runner-groups",
    method: "post",
    ...variables,
  });

/**
 * Creates a new self-hosted runner group for an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminCreateSelfHostedRunnerGroupForEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RunnerGroupsEnterprise,
      undefined,
      EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.RunnerGroupsEnterprise,
    undefined,
    EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseVariables
  >(
    (
      variables: EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseVariables
    ) =>
      fetchEnterpriseAdminCreateSelfHostedRunnerGroupForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Unique identifier of the self-hosted runner group.
     */
    runnerGroupId: number;
  };

export type EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseVariables =
  {
    pathParams: EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprisePathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Deletes a self-hosted runner group for an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise = (
  variables: EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runner-groups/{runnerGroupId}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a self-hosted runner group for an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseVariables
  >(
    (
      variables: EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseVariables
    ) =>
      fetchEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminGetSelfHostedRunnerGroupForEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
};

export type EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseVariables = {
  pathParams: EnterpriseAdminGetSelfHostedRunnerGroupForEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific self-hosted runner group for an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminGetSelfHostedRunnerGroupForEnterprise = (
  variables: EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseVariables
) =>
  githubFetch<
    Schemas.RunnerGroupsEnterprise,
    undefined,
    {},
    {},
    EnterpriseAdminGetSelfHostedRunnerGroupForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runner-groups/{runnerGroupId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific self-hosted runner group for an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminGetSelfHostedRunnerGroupForEnterprise = (
  variables: EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RunnerGroupsEnterprise,
      undefined,
      Schemas.RunnerGroupsEnterprise
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.RunnerGroupsEnterprise,
    undefined,
    Schemas.RunnerGroupsEnterprise
  >(
    queryKeyFn({
      path: "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}",
      operationId: "enterpriseAdminGetSelfHostedRunnerGroupForEnterprise",
      variables,
    }),
    () =>
      fetchEnterpriseAdminGetSelfHostedRunnerGroupForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Unique identifier of the self-hosted runner group.
     */
    runnerGroupId: number;
  };

export type EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequestBody =
  {
    /*
     * Name of the runner group.
     */
    name?: string;
    /*
     * Visibility of a runner group. You can select all organizations or select individual organizations. Can be one of: `all` or `selected`
     *
     * @default all
     */
    visibility?: "selected" | "all";
  };

export type EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseVariables = {
  body?: EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequestBody;
  pathParams: EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise = (
  variables: EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseVariables
) =>
  githubFetch<
    Schemas.RunnerGroupsEnterprise,
    EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequestBody,
    {},
    {},
    EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runner-groups/{runnerGroupId}",
    method: "patch",
    ...variables,
  });

/**
 * Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RunnerGroupsEnterprise,
      undefined,
      EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.RunnerGroupsEnterprise,
    undefined,
    EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseVariables
  >(
    (
      variables: EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseVariables
    ) =>
      fetchEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Unique identifier of the self-hosted runner group.
     */
    runnerGroupId: number;
  };

export type EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseQueryParams =
  {
    /*
     * Results per page (max 100).
     *
     * @default 30
     */
    per_page?: number;
    /*
     * Page number of the results to fetch.
     *
     * @default 1
     */
    page?: number;
  };

export type EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse =
  {
    organizations: Schemas.OrganizationSimple[];
    total_count: number;
  };

export type EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables =
  {
    pathParams: EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprisePathParams;
    queryParams?: EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseQueryParams;
  } & GithubContext["fetcherOptions"];

/**
 * Lists the organizations with access to a self-hosted runner group.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise =
  (
    variables: EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
  ) =>
    githubFetch<
      EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse,
      undefined,
      {},
      EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseQueryParams,
      EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprisePathParams
    >({
      url: "/enterprises/{enterprise}/actions/runner-groups/{runnerGroupId}/organizations",
      method: "get",
      ...variables,
    });

/**
 * Lists the organizations with access to a self-hosted runner group.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise =
  (
    variables: EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables,
    options?: Omit<
      reactQuery.UseQueryOptions<
        EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse,
        undefined,
        EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse
      >,
      "queryKey" | "queryFn"
    >
  ) => {
    const { fetcherOptions, queryOptions, queryKeyFn } =
      useGithubContext(options);
    return reactQuery.useQuery<
      EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse,
      undefined,
      EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse
    >(
      queryKeyFn({
        path: "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations",
        operationId:
          "enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise",
        variables,
      }),
      () =>
        fetchEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise({
          ...fetcherOptions,
          ...variables,
        }),
      {
        ...options,
        ...queryOptions,
      }
    );
  };

export type EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Unique identifier of the self-hosted runner group.
     */
    runnerGroupId: number;
  };

export type EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequestBody =
  {
    /*
     * List of organization IDs that can access the runner group.
     */
    selected_organization_ids: number[];
  };

export type EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables =
  {
    body: EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequestBody;
    pathParams: EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprisePathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise =
  (
    variables: EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
  ) =>
    githubFetch<
      undefined,
      EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequestBody,
      {},
      {},
      EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprisePathParams
    >({
      url: "/enterprises/{enterprise}/actions/runner-groups/{runnerGroupId}/organizations",
      method: "put",
      ...variables,
    });

/**
 * Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        undefined,
        undefined,
        EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
      >,
      "mutationFn"
    >
  ) => {
    const { fetcherOptions } = useGithubContext();
    return reactQuery.useMutation<
      undefined,
      undefined,
      EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
    >(
      (
        variables: EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
      ) =>
        fetchEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise({
          ...fetcherOptions,
          ...variables,
        }),
      options
    );
  };

export type EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Unique identifier of the self-hosted runner group.
     */
    runnerGroupId: number;
    /*
     * Unique identifier of an organization.
     */
    orgId: number;
  };

export type EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables =
  {
    pathParams: EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprisePathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise =
  (
    variables: EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
  ) =>
    githubFetch<
      undefined,
      undefined,
      {},
      {},
      EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprisePathParams
    >({
      url: "/enterprises/{enterprise}/actions/runner-groups/{runnerGroupId}/organizations/{orgId}",
      method: "delete",
      ...variables,
    });

/**
 * Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        undefined,
        undefined,
        EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
      >,
      "mutationFn"
    >
  ) => {
    const { fetcherOptions } = useGithubContext();
    return reactQuery.useMutation<
      undefined,
      undefined,
      EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
    >(
      (
        variables: EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
      ) =>
        fetchEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise({
          ...fetcherOptions,
          ...variables,
        }),
      options
    );
  };

export type EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Unique identifier of the self-hosted runner group.
     */
    runnerGroupId: number;
    /*
     * Unique identifier of an organization.
     */
    orgId: number;
  };

export type EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables =
  {
    pathParams: EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprisePathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise =
  (
    variables: EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
  ) =>
    githubFetch<
      undefined,
      undefined,
      {},
      {},
      EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprisePathParams
    >({
      url: "/enterprises/{enterprise}/actions/runner-groups/{runnerGroupId}/organizations/{orgId}",
      method: "put",
      ...variables,
    });

/**
 * Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        undefined,
        undefined,
        EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
      >,
      "mutationFn"
    >
  ) => {
    const { fetcherOptions } = useGithubContext();
    return reactQuery.useMutation<
      undefined,
      undefined,
      EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
    >(
      (
        variables: EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables
      ) =>
        fetchEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise({
          ...fetcherOptions,
          ...variables,
        }),
      options
    );
  };

export type EnterpriseAdminListSelfHostedRunnersInGroupForEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Unique identifier of the self-hosted runner group.
     */
    runnerGroupId: number;
  };

export type EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseQueryParams =
  {
    /*
     * Results per page (max 100).
     *
     * @default 30
     */
    per_page?: number;
    /*
     * Page number of the results to fetch.
     *
     * @default 1
     */
    page?: number;
  };

export type EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse = {
  runners: Schemas.Runner[];
  total_count: number;
};

export type EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseVariables =
  {
    pathParams: EnterpriseAdminListSelfHostedRunnersInGroupForEnterprisePathParams;
    queryParams?: EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseQueryParams;
  } & GithubContext["fetcherOptions"];

/**
 * Lists the self-hosted runners that are in a specific enterprise group.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminListSelfHostedRunnersInGroupForEnterprise = (
  variables: EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseVariables
) =>
  githubFetch<
    EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse,
    undefined,
    {},
    EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseQueryParams,
    EnterpriseAdminListSelfHostedRunnersInGroupForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runner-groups/{runnerGroupId}/runners",
    method: "get",
    ...variables,
  });

/**
 * Lists the self-hosted runners that are in a specific enterprise group.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminListSelfHostedRunnersInGroupForEnterprise = (
  variables: EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse,
      undefined,
      EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse,
    undefined,
    EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse
  >(
    queryKeyFn({
      path: "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners",
      operationId: "enterpriseAdminListSelfHostedRunnersInGroupForEnterprise",
      variables,
    }),
    () =>
      fetchEnterpriseAdminListSelfHostedRunnersInGroupForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Unique identifier of the self-hosted runner group.
     */
    runnerGroupId: number;
  };

export type EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequestBody =
  {
    /*
     * List of runner IDs to add to the runner group.
     */
    runners: number[];
  };

export type EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseVariables = {
  body: EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequestBody;
  pathParams: EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Replaces the list of self-hosted runners that are part of an enterprise runner group.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise = (
  variables: EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseVariables
) =>
  githubFetch<
    undefined,
    EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequestBody,
    {},
    {},
    EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runner-groups/{runnerGroupId}/runners",
    method: "put",
    ...variables,
  });

/**
 * Replaces the list of self-hosted runners that are part of an enterprise runner group.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseVariables
  >(
    (
      variables: EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseVariables
    ) =>
      fetchEnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprisePathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Unique identifier of the self-hosted runner group.
     */
    runnerGroupId: number;
    /*
     * Unique identifier of the self-hosted runner.
     */
    runnerId: number;
  };

export type EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseVariables =
  {
    pathParams: EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprisePathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise =
  (
    variables: EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseVariables
  ) =>
    githubFetch<
      undefined,
      undefined,
      {},
      {},
      EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprisePathParams
    >({
      url: "/enterprises/{enterprise}/actions/runner-groups/{runnerGroupId}/runners/{runnerId}",
      method: "delete",
      ...variables,
    });

/**
 * Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseVariables
  >(
    (
      variables: EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseVariables
    ) =>
      fetchEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
  /*
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseVariables = {
  pathParams: EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Adds a self-hosted runner to a runner group configured in an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise`
 * scope to use this endpoint.
 */
export const fetchEnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise = (
  variables: EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runner-groups/{runnerGroupId}/runners/{runnerId}",
    method: "put",
    ...variables,
  });

/**
 * Adds a self-hosted runner to a runner group configured in an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise`
 * scope to use this endpoint.
 */
export const useEnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseVariables
  >(
    (
      variables: EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseVariables
    ) =>
      fetchEnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminListSelfHostedRunnersForEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminListSelfHostedRunnersForEnterpriseQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse = {
  runners?: Schemas.Runner[];
  total_count?: number;
};

export type EnterpriseAdminListSelfHostedRunnersForEnterpriseVariables = {
  pathParams: EnterpriseAdminListSelfHostedRunnersForEnterprisePathParams;
  queryParams?: EnterpriseAdminListSelfHostedRunnersForEnterpriseQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all self-hosted runners configured for an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminListSelfHostedRunnersForEnterprise = (
  variables: EnterpriseAdminListSelfHostedRunnersForEnterpriseVariables
) =>
  githubFetch<
    EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse,
    undefined,
    {},
    EnterpriseAdminListSelfHostedRunnersForEnterpriseQueryParams,
    EnterpriseAdminListSelfHostedRunnersForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runners",
    method: "get",
    ...variables,
  });

/**
 * Lists all self-hosted runners configured for an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminListSelfHostedRunnersForEnterprise = (
  variables: EnterpriseAdminListSelfHostedRunnersForEnterpriseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse,
      undefined,
      EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse,
    undefined,
    EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse
  >(
    queryKeyFn({
      path: "/enterprises/{enterprise}/actions/runners",
      operationId: "enterpriseAdminListSelfHostedRunnersForEnterprise",
      variables,
    }),
    () =>
      fetchEnterpriseAdminListSelfHostedRunnersForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EnterpriseAdminListRunnerApplicationsForEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminListRunnerApplicationsForEnterpriseResponse =
  Schemas.RunnerApplication[];

export type EnterpriseAdminListRunnerApplicationsForEnterpriseVariables = {
  pathParams: EnterpriseAdminListRunnerApplicationsForEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminListRunnerApplicationsForEnterprise = (
  variables: EnterpriseAdminListRunnerApplicationsForEnterpriseVariables
) =>
  githubFetch<
    EnterpriseAdminListRunnerApplicationsForEnterpriseResponse,
    undefined,
    {},
    {},
    EnterpriseAdminListRunnerApplicationsForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runners/downloads",
    method: "get",
    ...variables,
  });

/**
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminListRunnerApplicationsForEnterprise = (
  variables: EnterpriseAdminListRunnerApplicationsForEnterpriseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      EnterpriseAdminListRunnerApplicationsForEnterpriseResponse,
      undefined,
      EnterpriseAdminListRunnerApplicationsForEnterpriseResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    EnterpriseAdminListRunnerApplicationsForEnterpriseResponse,
    undefined,
    EnterpriseAdminListRunnerApplicationsForEnterpriseResponse
  >(
    queryKeyFn({
      path: "/enterprises/{enterprise}/actions/runners/downloads",
      operationId: "enterpriseAdminListRunnerApplicationsForEnterprise",
      variables,
    }),
    () =>
      fetchEnterpriseAdminListRunnerApplicationsForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EnterpriseAdminCreateRegistrationTokenForEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminCreateRegistrationTokenForEnterpriseVariables = {
  pathParams: EnterpriseAdminCreateRegistrationTokenForEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a token that you can pass to the `config` script. The token expires after one hour.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 *
 * #### Example using registration token
 *
 * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
 *
 * ```
 * ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN
 * ```
 */
export const fetchEnterpriseAdminCreateRegistrationTokenForEnterprise = (
  variables: EnterpriseAdminCreateRegistrationTokenForEnterpriseVariables
) =>
  githubFetch<
    Schemas.AuthenticationToken,
    undefined,
    {},
    {},
    EnterpriseAdminCreateRegistrationTokenForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runners/registration-token",
    method: "post",
    ...variables,
  });

/**
 * Returns a token that you can pass to the `config` script. The token expires after one hour.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 *
 * #### Example using registration token
 *
 * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
 *
 * ```
 * ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN
 * ```
 */
export const useEnterpriseAdminCreateRegistrationTokenForEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AuthenticationToken,
      undefined,
      EnterpriseAdminCreateRegistrationTokenForEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.AuthenticationToken,
    undefined,
    EnterpriseAdminCreateRegistrationTokenForEnterpriseVariables
  >(
    (variables: EnterpriseAdminCreateRegistrationTokenForEnterpriseVariables) =>
      fetchEnterpriseAdminCreateRegistrationTokenForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminCreateRemoveTokenForEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminCreateRemoveTokenForEnterpriseVariables = {
  pathParams: EnterpriseAdminCreateRemoveTokenForEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 *
 * #### Example using remove token
 *
 * To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this
 * endpoint.
 *
 * ```
 * ./config.sh remove --token TOKEN
 * ```
 */
export const fetchEnterpriseAdminCreateRemoveTokenForEnterprise = (
  variables: EnterpriseAdminCreateRemoveTokenForEnterpriseVariables
) =>
  githubFetch<
    Schemas.AuthenticationToken,
    undefined,
    {},
    {},
    EnterpriseAdminCreateRemoveTokenForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runners/remove-token",
    method: "post",
    ...variables,
  });

/**
 * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 *
 * #### Example using remove token
 *
 * To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this
 * endpoint.
 *
 * ```
 * ./config.sh remove --token TOKEN
 * ```
 */
export const useEnterpriseAdminCreateRemoveTokenForEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AuthenticationToken,
      undefined,
      EnterpriseAdminCreateRemoveTokenForEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.AuthenticationToken,
    undefined,
    EnterpriseAdminCreateRemoveTokenForEnterpriseVariables
  >(
    (variables: EnterpriseAdminCreateRemoveTokenForEnterpriseVariables) =>
      fetchEnterpriseAdminCreateRemoveTokenForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminDeleteSelfHostedRunnerFromEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
  /*
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseVariables = {
  pathParams: EnterpriseAdminDeleteSelfHostedRunnerFromEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminDeleteSelfHostedRunnerFromEnterprise = (
  variables: EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    EnterpriseAdminDeleteSelfHostedRunnerFromEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runners/{runnerId}",
    method: "delete",
    ...variables,
  });

/**
 * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminDeleteSelfHostedRunnerFromEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseVariables
  >(
    (variables: EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseVariables) =>
      fetchEnterpriseAdminDeleteSelfHostedRunnerFromEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminGetSelfHostedRunnerForEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
  /*
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type EnterpriseAdminGetSelfHostedRunnerForEnterpriseVariables = {
  pathParams: EnterpriseAdminGetSelfHostedRunnerForEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific self-hosted runner configured in an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const fetchEnterpriseAdminGetSelfHostedRunnerForEnterprise = (
  variables: EnterpriseAdminGetSelfHostedRunnerForEnterpriseVariables
) =>
  githubFetch<
    Schemas.Runner,
    undefined,
    {},
    {},
    EnterpriseAdminGetSelfHostedRunnerForEnterprisePathParams
  >({
    url: "/enterprises/{enterprise}/actions/runners/{runnerId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific self-hosted runner configured in an enterprise.
 *
 * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
 */
export const useEnterpriseAdminGetSelfHostedRunnerForEnterprise = (
  variables: EnterpriseAdminGetSelfHostedRunnerForEnterpriseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Runner, undefined, Schemas.Runner>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Runner, undefined, Schemas.Runner>(
    queryKeyFn({
      path: "/enterprises/{enterprise}/actions/runners/{runner_id}",
      operationId: "enterpriseAdminGetSelfHostedRunnerForEnterprise",
      variables,
    }),
    () =>
      fetchEnterpriseAdminGetSelfHostedRunnerForEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AuditLogGetAuditLogPathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type AuditLogGetAuditLogQueryParams = {
  /*
   * A search phrase. For more information, see [Searching the audit log](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).
   */
  phrase?: string;
  /*
   * The event types to include:
   *
   * - `web` - returns web (non-Git) events
   * - `git` - returns Git events
   * - `all` - returns both web and Git events
   *
   * The default is `web`.
   */
  include?: "web" | "git" | "all";
  /*
   * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.
   */
  after?: string;
  /*
   * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.
   */
  before?: string;
  /*
   * The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.
   *
   * The default is `desc`.
   */
  order?: "desc" | "asc";
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type AuditLogGetAuditLogResponse = Schemas.AuditLogEvent[];

export type AuditLogGetAuditLogVariables = {
  pathParams: AuditLogGetAuditLogPathParams;
  queryParams?: AuditLogGetAuditLogQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The audit log REST API is currently in beta and is subject to change.
 *
 * Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.
 */
export const fetchAuditLogGetAuditLog = (
  variables: AuditLogGetAuditLogVariables
) =>
  githubFetch<
    AuditLogGetAuditLogResponse,
    undefined,
    {},
    AuditLogGetAuditLogQueryParams,
    AuditLogGetAuditLogPathParams
  >({
    url: "/enterprises/{enterprise}/audit-log",
    method: "get",
    ...variables,
  });

/**
 * **Note:** The audit log REST API is currently in beta and is subject to change.
 *
 * Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.
 */
export const useAuditLogGetAuditLog = (
  variables: AuditLogGetAuditLogVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AuditLogGetAuditLogResponse,
      undefined,
      AuditLogGetAuditLogResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    AuditLogGetAuditLogResponse,
    undefined,
    AuditLogGetAuditLogResponse
  >(
    queryKeyFn({
      path: "/enterprises/{enterprise}/audit-log",
      operationId: "auditLogGetAuditLog",
      variables,
    }),
    () => fetchAuditLogGetAuditLog({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type BillingGetGithubActionsBillingGhePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type BillingGetGithubActionsBillingGheVariables = {
  pathParams: BillingGetGithubActionsBillingGhePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * The authenticated user must be an enterprise admin.
 */
export const fetchBillingGetGithubActionsBillingGhe = (
  variables: BillingGetGithubActionsBillingGheVariables
) =>
  githubFetch<
    Schemas.ActionsBillingUsage,
    undefined,
    {},
    {},
    BillingGetGithubActionsBillingGhePathParams
  >({
    url: "/enterprises/{enterprise}/settings/billing/actions",
    method: "get",
    ...variables,
  });

/**
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * The authenticated user must be an enterprise admin.
 */
export const useBillingGetGithubActionsBillingGhe = (
  variables: BillingGetGithubActionsBillingGheVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsBillingUsage,
      undefined,
      Schemas.ActionsBillingUsage
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsBillingUsage,
    undefined,
    Schemas.ActionsBillingUsage
  >(
    queryKeyFn({
      path: "/enterprises/{enterprise}/settings/billing/actions",
      operationId: "billingGetGithubActionsBillingGhe",
      variables,
    }),
    () =>
      fetchBillingGetGithubActionsBillingGhe({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type BillingGetGithubPackagesBillingGhePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type BillingGetGithubPackagesBillingGheVariables = {
  pathParams: BillingGetGithubPackagesBillingGhePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the free and paid storage used for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * The authenticated user must be an enterprise admin.
 */
export const fetchBillingGetGithubPackagesBillingGhe = (
  variables: BillingGetGithubPackagesBillingGheVariables
) =>
  githubFetch<
    Schemas.PackagesBillingUsage,
    undefined,
    {},
    {},
    BillingGetGithubPackagesBillingGhePathParams
  >({
    url: "/enterprises/{enterprise}/settings/billing/packages",
    method: "get",
    ...variables,
  });

/**
 * Gets the free and paid storage used for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * The authenticated user must be an enterprise admin.
 */
export const useBillingGetGithubPackagesBillingGhe = (
  variables: BillingGetGithubPackagesBillingGheVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PackagesBillingUsage,
      undefined,
      Schemas.PackagesBillingUsage
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PackagesBillingUsage,
    undefined,
    Schemas.PackagesBillingUsage
  >(
    queryKeyFn({
      path: "/enterprises/{enterprise}/settings/billing/packages",
      operationId: "billingGetGithubPackagesBillingGhe",
      variables,
    }),
    () =>
      fetchBillingGetGithubPackagesBillingGhe({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type BillingGetSharedStorageBillingGhePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type BillingGetSharedStorageBillingGheVariables = {
  pathParams: BillingGetSharedStorageBillingGhePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * The authenticated user must be an enterprise admin.
 */
export const fetchBillingGetSharedStorageBillingGhe = (
  variables: BillingGetSharedStorageBillingGheVariables
) =>
  githubFetch<
    Schemas.CombinedBillingUsage,
    undefined,
    {},
    {},
    BillingGetSharedStorageBillingGhePathParams
  >({
    url: "/enterprises/{enterprise}/settings/billing/shared-storage",
    method: "get",
    ...variables,
  });

/**
 * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * The authenticated user must be an enterprise admin.
 */
export const useBillingGetSharedStorageBillingGhe = (
  variables: BillingGetSharedStorageBillingGheVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CombinedBillingUsage,
      undefined,
      Schemas.CombinedBillingUsage
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CombinedBillingUsage,
    undefined,
    Schemas.CombinedBillingUsage
  >(
    queryKeyFn({
      path: "/enterprises/{enterprise}/settings/billing/shared-storage",
      operationId: "billingGetSharedStorageBillingGhe",
      variables,
    }),
    () =>
      fetchBillingGetSharedStorageBillingGhe({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityListPublicEventsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListPublicEventsResponse = Schemas.Event[];

export type ActivityListPublicEventsVariables = {
  queryParams?: ActivityListPublicEventsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
 */
export const fetchActivityListPublicEvents = (
  variables: ActivityListPublicEventsVariables
) =>
  githubFetch<
    ActivityListPublicEventsResponse,
    undefined,
    {},
    ActivityListPublicEventsQueryParams,
    {}
  >({ url: "/events", method: "get", ...variables });

/**
 * We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
 */
export const useActivityListPublicEvents = (
  variables: ActivityListPublicEventsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListPublicEventsResponse,
      | Responses.NotModified
      | Responses.Forbidden
      | Responses.ServiceUnavailable,
      ActivityListPublicEventsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListPublicEventsResponse,
    Responses.NotModified | Responses.Forbidden | Responses.ServiceUnavailable,
    ActivityListPublicEventsResponse
  >(
    queryKeyFn({
      path: "/events",
      operationId: "activityListPublicEvents",
      variables,
    }),
    () => fetchActivityListPublicEvents({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityGetFeedsVariables = GithubContext["fetcherOptions"];

/**
 * GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
 *
 * *   **Timeline**: The GitHub global public timeline
 * *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia)
 * *   **Current user public**: The public timeline for the authenticated user
 * *   **Current user**: The private timeline for the authenticated user
 * *   **Current user actor**: The private timeline for activity created by the authenticated user
 * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
 * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
 *
 * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
 */
export const fetchActivityGetFeeds = (variables: ActivityGetFeedsVariables) =>
  githubFetch<Schemas.Feed, undefined, {}, {}, {}>({
    url: "/feeds",
    method: "get",
    ...variables,
  });

/**
 * GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
 *
 * *   **Timeline**: The GitHub global public timeline
 * *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia)
 * *   **Current user public**: The public timeline for the authenticated user
 * *   **Current user**: The private timeline for the authenticated user
 * *   **Current user actor**: The private timeline for activity created by the authenticated user
 * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
 * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
 *
 * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
 */
export const useActivityGetFeeds = (
  variables: ActivityGetFeedsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Feed, undefined, Schemas.Feed>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Feed, undefined, Schemas.Feed>(
    queryKeyFn({ path: "/feeds", operationId: "activityGetFeeds", variables }),
    () => fetchActivityGetFeeds({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GistsListQueryParams = {
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type GistsListResponse = Schemas.BaseGist[];

export type GistsListVariables = {
  queryParams?: GistsListQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
 */
export const fetchGistsList = (variables: GistsListVariables) =>
  githubFetch<GistsListResponse, undefined, {}, GistsListQueryParams, {}>({
    url: "/gists",
    method: "get",
    ...variables,
  });

/**
 * Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
 */
export const useGistsList = (
  variables: GistsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListResponse,
      Responses.NotModified | Responses.Forbidden,
      GistsListResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    GistsListResponse,
    Responses.NotModified | Responses.Forbidden,
    GistsListResponse
  >(
    queryKeyFn({ path: "/gists", operationId: "gistsList", variables }),
    () => fetchGistsList({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GistsCreateRequestBody = {
  /*
   * Description of the gist
   *
   * @example Example Ruby script
   */
  description?: string;
  /*
   * Names and content for the files that make up the gist
   *
   * @example {"hello.rb":{"content":"puts \"Hello, World!\""}}
   */
  files: {
    [key: string]: {
      /*
       * Content of the file
       */
      content: string;
    };
  };
  public?: boolean | ("true" | "false");
};

export type GistsCreateVariables = {
  body: GistsCreateRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Allows you to add a new gist with one or more files.
 *
 * **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
 */
export const fetchGistsCreate = (variables: GistsCreateVariables) =>
  githubFetch<Schemas.GistSimple, GistsCreateRequestBody, {}, {}, {}>({
    url: "/gists",
    method: "post",
    ...variables,
  });

/**
 * Allows you to add a new gist with one or more files.
 *
 * **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
 */
export const useGistsCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GistSimple,
      | Responses.NotModified
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.ValidationFailed,
      GistsCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GistSimple,
    | Responses.NotModified
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.ValidationFailed,
    GistsCreateVariables
  >(
    (variables: GistsCreateVariables) =>
      fetchGistsCreate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GistsListPublicQueryParams = {
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type GistsListPublicResponse = Schemas.BaseGist[];

export type GistsListPublicVariables = {
  queryParams?: GistsListPublicQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List public gists sorted by most recently updated to least recently updated.
 *
 * Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
 */
export const fetchGistsListPublic = (variables: GistsListPublicVariables) =>
  githubFetch<
    GistsListPublicResponse,
    undefined,
    {},
    GistsListPublicQueryParams,
    {}
  >({ url: "/gists/public", method: "get", ...variables });

/**
 * List public gists sorted by most recently updated to least recently updated.
 *
 * Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
 */
export const useGistsListPublic = (
  variables: GistsListPublicVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListPublicResponse,
      Responses.NotModified | Responses.Forbidden | Responses.ValidationFailed,
      GistsListPublicResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    GistsListPublicResponse,
    Responses.NotModified | Responses.Forbidden | Responses.ValidationFailed,
    GistsListPublicResponse
  >(
    queryKeyFn({
      path: "/gists/public",
      operationId: "gistsListPublic",
      variables,
    }),
    () => fetchGistsListPublic({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GistsListStarredQueryParams = {
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type GistsListStarredResponse = Schemas.BaseGist[];

export type GistsListStarredVariables = {
  queryParams?: GistsListStarredQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the authenticated user's starred gists:
 */
export const fetchGistsListStarred = (variables: GistsListStarredVariables) =>
  githubFetch<
    GistsListStarredResponse,
    undefined,
    {},
    GistsListStarredQueryParams,
    {}
  >({ url: "/gists/starred", method: "get", ...variables });

/**
 * List the authenticated user's starred gists:
 */
export const useGistsListStarred = (
  variables: GistsListStarredVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListStarredResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden,
      GistsListStarredResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    GistsListStarredResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden,
    GistsListStarredResponse
  >(
    queryKeyFn({
      path: "/gists/starred",
      operationId: "gistsListStarred",
      variables,
    }),
    () => fetchGistsListStarred({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GistsDeletePathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
};

export type GistsDeleteVariables = {
  pathParams: GistsDeletePathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsDelete = (variables: GistsDeleteVariables) =>
  githubFetch<undefined, undefined, {}, {}, GistsDeletePathParams>({
    url: "/gists/{gistId}",
    method: "delete",
    ...variables,
  });

export const useGistsDelete = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotModified | Responses.Forbidden | Responses.NotFound,
      GistsDeleteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotModified | Responses.Forbidden | Responses.NotFound,
    GistsDeleteVariables
  >(
    (variables: GistsDeleteVariables) =>
      fetchGistsDelete({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GistsGetPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
};

export type GistsGetVariables = {
  pathParams: GistsGetPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsGet = (variables: GistsGetVariables) =>
  githubFetch<Schemas.GistSimple, undefined, {}, {}, GistsGetPathParams>({
    url: "/gists/{gistId}",
    method: "get",
    ...variables,
  });

export const useGistsGet = (
  variables: GistsGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GistSimple,
      Responses.NotModified | Responses.ForbiddenGist | Responses.NotFound,
      Schemas.GistSimple
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.GistSimple,
    Responses.NotModified | Responses.ForbiddenGist | Responses.NotFound,
    Schemas.GistSimple
  >(
    queryKeyFn({
      path: "/gists/{gist_id}",
      operationId: "gistsGet",
      variables,
    }),
    () => fetchGistsGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GistsUpdatePathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
};

export type GistsUpdateVariables = {
  body?:
    | {
        /*
         * Description of the gist
         *
         * @example Example Ruby script
         */
        description: string;
        /*
         * Names of files to be updated
         *
         * @example {"hello.rb":{"content":"blah","filename":"goodbye.rb"}}
         */
        files?: {
          [key: string]:
            | {
                /*
                 * The new content of the file
                 */
                content: string;
                /*
                 * The new filename for the file
                 */
                filename?: string | null;
              }
            | {
                /*
                 * The new content of the file
                 */
                content?: string;
                /*
                 * The new filename for the file
                 */
                filename: string | null;
              }
            | {}
            | null;
        };
      }
    | {
        /*
         * Description of the gist
         *
         * @example Example Ruby script
         */
        description?: string;
        /*
         * Names of files to be updated
         *
         * @example {"hello.rb":{"content":"blah","filename":"goodbye.rb"}}
         */
        files: {
          [key: string]:
            | {
                /*
                 * The new content of the file
                 */
                content: string;
                /*
                 * The new filename for the file
                 */
                filename?: string | null;
              }
            | {
                /*
                 * The new content of the file
                 */
                content?: string;
                /*
                 * The new filename for the file
                 */
                filename: string | null;
              }
            | {}
            | null;
        };
      }
    | null;
  pathParams: GistsUpdatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
 */
export const fetchGistsUpdate = (variables: GistsUpdateVariables) =>
  githubFetch<
    Schemas.GistSimple,
    | {
        /*
         * Description of the gist
         *
         * @example Example Ruby script
         */
        description: string;
        /*
         * Names of files to be updated
         *
         * @example {"hello.rb":{"content":"blah","filename":"goodbye.rb"}}
         */
        files?: {
          [key: string]:
            | {
                /*
                 * The new content of the file
                 */
                content: string;
                /*
                 * The new filename for the file
                 */
                filename?: string | null;
              }
            | {
                /*
                 * The new content of the file
                 */
                content?: string;
                /*
                 * The new filename for the file
                 */
                filename: string | null;
              }
            | {}
            | null;
        };
      }
    | {
        /*
         * Description of the gist
         *
         * @example Example Ruby script
         */
        description?: string;
        /*
         * Names of files to be updated
         *
         * @example {"hello.rb":{"content":"blah","filename":"goodbye.rb"}}
         */
        files: {
          [key: string]:
            | {
                /*
                 * The new content of the file
                 */
                content: string;
                /*
                 * The new filename for the file
                 */
                filename?: string | null;
              }
            | {
                /*
                 * The new content of the file
                 */
                content?: string;
                /*
                 * The new filename for the file
                 */
                filename: string | null;
              }
            | {}
            | null;
        };
      }
    | null,
    {},
    {},
    GistsUpdatePathParams
  >({ url: "/gists/{gistId}", method: "patch", ...variables });

/**
 * Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
 */
export const useGistsUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GistSimple,
      Responses.NotFound | Responses.ValidationFailed,
      GistsUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GistSimple,
    Responses.NotFound | Responses.ValidationFailed,
    GistsUpdateVariables
  >(
    (variables: GistsUpdateVariables) =>
      fetchGistsUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GistsListCommentsPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
};

export type GistsListCommentsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type GistsListCommentsResponse = Schemas.GistComment[];

export type GistsListCommentsVariables = {
  pathParams: GistsListCommentsPathParams;
  queryParams?: GistsListCommentsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsListComments = (variables: GistsListCommentsVariables) =>
  githubFetch<
    GistsListCommentsResponse,
    undefined,
    {},
    GistsListCommentsQueryParams,
    GistsListCommentsPathParams
  >({ url: "/gists/{gistId}/comments", method: "get", ...variables });

export const useGistsListComments = (
  variables: GistsListCommentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListCommentsResponse,
      Responses.NotModified | Responses.Forbidden | Responses.NotFound,
      GistsListCommentsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    GistsListCommentsResponse,
    Responses.NotModified | Responses.Forbidden | Responses.NotFound,
    GistsListCommentsResponse
  >(
    queryKeyFn({
      path: "/gists/{gist_id}/comments",
      operationId: "gistsListComments",
      variables,
    }),
    () => fetchGistsListComments({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GistsCreateCommentPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
};

export type GistsCreateCommentRequestBody = {
  /*
   * The comment text.
   *
   * @example Body of the attachment
   * @maxLength 65535
   */
  body: string;
};

export type GistsCreateCommentVariables = {
  body: GistsCreateCommentRequestBody;
  pathParams: GistsCreateCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsCreateComment = (
  variables: GistsCreateCommentVariables
) =>
  githubFetch<
    Schemas.GistComment,
    GistsCreateCommentRequestBody,
    {},
    {},
    GistsCreateCommentPathParams
  >({ url: "/gists/{gistId}/comments", method: "post", ...variables });

export const useGistsCreateComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GistComment,
      Responses.NotModified | Responses.Forbidden | Responses.NotFound,
      GistsCreateCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GistComment,
    Responses.NotModified | Responses.Forbidden | Responses.NotFound,
    GistsCreateCommentVariables
  >(
    (variables: GistsCreateCommentVariables) =>
      fetchGistsCreateComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GistsDeleteCommentPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type GistsDeleteCommentVariables = {
  pathParams: GistsDeleteCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsDeleteComment = (
  variables: GistsDeleteCommentVariables
) =>
  githubFetch<undefined, undefined, {}, {}, GistsDeleteCommentPathParams>({
    url: "/gists/{gistId}/comments/{commentId}",
    method: "delete",
    ...variables,
  });

export const useGistsDeleteComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotModified | Responses.Forbidden | Responses.NotFound,
      GistsDeleteCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotModified | Responses.Forbidden | Responses.NotFound,
    GistsDeleteCommentVariables
  >(
    (variables: GistsDeleteCommentVariables) =>
      fetchGistsDeleteComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GistsGetCommentPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type GistsGetCommentVariables = {
  pathParams: GistsGetCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsGetComment = (variables: GistsGetCommentVariables) =>
  githubFetch<
    Schemas.GistComment,
    undefined,
    {},
    {},
    GistsGetCommentPathParams
  >({
    url: "/gists/{gistId}/comments/{commentId}",
    method: "get",
    ...variables,
  });

export const useGistsGetComment = (
  variables: GistsGetCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GistComment,
      Responses.NotModified | Responses.ForbiddenGist | Responses.NotFound,
      Schemas.GistComment
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.GistComment,
    Responses.NotModified | Responses.ForbiddenGist | Responses.NotFound,
    Schemas.GistComment
  >(
    queryKeyFn({
      path: "/gists/{gist_id}/comments/{comment_id}",
      operationId: "gistsGetComment",
      variables,
    }),
    () => fetchGistsGetComment({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GistsUpdateCommentPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type GistsUpdateCommentRequestBody = {
  /*
   * The comment text.
   *
   * @example Body of the attachment
   * @maxLength 65535
   */
  body: string;
};

export type GistsUpdateCommentVariables = {
  body: GistsUpdateCommentRequestBody;
  pathParams: GistsUpdateCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsUpdateComment = (
  variables: GistsUpdateCommentVariables
) =>
  githubFetch<
    Schemas.GistComment,
    GistsUpdateCommentRequestBody,
    {},
    {},
    GistsUpdateCommentPathParams
  >({
    url: "/gists/{gistId}/comments/{commentId}",
    method: "patch",
    ...variables,
  });

export const useGistsUpdateComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GistComment,
      Responses.NotFound,
      GistsUpdateCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GistComment,
    Responses.NotFound,
    GistsUpdateCommentVariables
  >(
    (variables: GistsUpdateCommentVariables) =>
      fetchGistsUpdateComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GistsListCommitsPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
};

export type GistsListCommitsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type GistsListCommitsResponse = Schemas.GistCommit[];

export type GistsListCommitsVariables = {
  pathParams: GistsListCommitsPathParams;
  queryParams?: GistsListCommitsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsListCommits = (variables: GistsListCommitsVariables) =>
  githubFetch<
    GistsListCommitsResponse,
    undefined,
    {},
    GistsListCommitsQueryParams,
    GistsListCommitsPathParams
  >({ url: "/gists/{gistId}/commits", method: "get", ...variables });

export const useGistsListCommits = (
  variables: GistsListCommitsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListCommitsResponse,
      Responses.NotModified | Responses.Forbidden | Responses.NotFound,
      GistsListCommitsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    GistsListCommitsResponse,
    Responses.NotModified | Responses.Forbidden | Responses.NotFound,
    GistsListCommitsResponse
  >(
    queryKeyFn({
      path: "/gists/{gist_id}/commits",
      operationId: "gistsListCommits",
      variables,
    }),
    () => fetchGistsListCommits({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GistsListForksPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
};

export type GistsListForksQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type GistsListForksResponse = Schemas.GistSimple[];

export type GistsListForksVariables = {
  pathParams: GistsListForksPathParams;
  queryParams?: GistsListForksQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsListForks = (variables: GistsListForksVariables) =>
  githubFetch<
    GistsListForksResponse,
    undefined,
    {},
    GistsListForksQueryParams,
    GistsListForksPathParams
  >({ url: "/gists/{gistId}/forks", method: "get", ...variables });

export const useGistsListForks = (
  variables: GistsListForksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListForksResponse,
      Responses.NotModified | Responses.Forbidden | Responses.NotFound,
      GistsListForksResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    GistsListForksResponse,
    Responses.NotModified | Responses.Forbidden | Responses.NotFound,
    GistsListForksResponse
  >(
    queryKeyFn({
      path: "/gists/{gist_id}/forks",
      operationId: "gistsListForks",
      variables,
    }),
    () => fetchGistsListForks({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GistsForkPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
};

export type GistsForkVariables = {
  pathParams: GistsForkPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note**: This was previously `/gists/:gist_id/fork`.
 */
export const fetchGistsFork = (variables: GistsForkVariables) =>
  githubFetch<Schemas.BaseGist, undefined, {}, {}, GistsForkPathParams>({
    url: "/gists/{gistId}/forks",
    method: "post",
    ...variables,
  });

/**
 * **Note**: This was previously `/gists/:gist_id/fork`.
 */
export const useGistsFork = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.BaseGist,
      | Responses.NotModified
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.ValidationFailed,
      GistsForkVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.BaseGist,
    | Responses.NotModified
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.ValidationFailed,
    GistsForkVariables
  >(
    (variables: GistsForkVariables) =>
      fetchGistsFork({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GistsUnstarPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
};

export type GistsUnstarVariables = {
  pathParams: GistsUnstarPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsUnstar = (variables: GistsUnstarVariables) =>
  githubFetch<undefined, undefined, {}, {}, GistsUnstarPathParams>({
    url: "/gists/{gistId}/star",
    method: "delete",
    ...variables,
  });

export const useGistsUnstar = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotModified | Responses.Forbidden | Responses.NotFound,
      GistsUnstarVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotModified | Responses.Forbidden | Responses.NotFound,
    GistsUnstarVariables
  >(
    (variables: GistsUnstarVariables) =>
      fetchGistsUnstar({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GistsCheckIsStarredPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
};

export type GistsCheckIsStarredVariables = {
  pathParams: GistsCheckIsStarredPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsCheckIsStarred = (
  variables: GistsCheckIsStarredVariables
) =>
  githubFetch<undefined, undefined, {}, {}, GistsCheckIsStarredPathParams>({
    url: "/gists/{gistId}/star",
    method: "get",
    ...variables,
  });

export const useGistsCheckIsStarred = (
  variables: GistsCheckIsStarredVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      Responses.NotModified | Responses.Forbidden | {},
      undefined
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    Responses.NotModified | Responses.Forbidden | {},
    undefined
  >(
    queryKeyFn({
      path: "/gists/{gist_id}/star",
      operationId: "gistsCheckIsStarred",
      variables,
    }),
    () => fetchGistsCheckIsStarred({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GistsStarPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
};

export type GistsStarVariables = {
  pathParams: GistsStarPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const fetchGistsStar = (variables: GistsStarVariables) =>
  githubFetch<undefined, undefined, {}, {}, GistsStarPathParams>({
    url: "/gists/{gistId}/star",
    method: "put",
    ...variables,
  });

/**
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const useGistsStar = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotModified | Responses.Forbidden | Responses.NotFound,
      GistsStarVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotModified | Responses.Forbidden | Responses.NotFound,
    GistsStarVariables
  >(
    (variables: GistsStarVariables) =>
      fetchGistsStar({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GistsGetRevisionPathParams = {
  /*
   * gist_id parameter
   */
  gistId: string;
  sha: string;
};

export type GistsGetRevisionVariables = {
  pathParams: GistsGetRevisionPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGistsGetRevision = (variables: GistsGetRevisionVariables) =>
  githubFetch<
    Schemas.GistSimple,
    undefined,
    {},
    {},
    GistsGetRevisionPathParams
  >({ url: "/gists/{gistId}/{sha}", method: "get", ...variables });

export const useGistsGetRevision = (
  variables: GistsGetRevisionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GistSimple,
      Responses.Forbidden | Responses.NotFound | Responses.ValidationFailed,
      Schemas.GistSimple
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.GistSimple,
    Responses.Forbidden | Responses.NotFound | Responses.ValidationFailed,
    Schemas.GistSimple
  >(
    queryKeyFn({
      path: "/gists/{gist_id}/{sha}",
      operationId: "gistsGetRevision",
      variables,
    }),
    () => fetchGistsGetRevision({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GitignoreGetAllTemplatesResponse = string[];

export type GitignoreGetAllTemplatesVariables = GithubContext["fetcherOptions"];

/**
 * List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user).
 */
export const fetchGitignoreGetAllTemplates = (
  variables: GitignoreGetAllTemplatesVariables
) =>
  githubFetch<GitignoreGetAllTemplatesResponse, undefined, {}, {}, {}>({
    url: "/gitignore/templates",
    method: "get",
    ...variables,
  });

/**
 * List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user).
 */
export const useGitignoreGetAllTemplates = (
  variables: GitignoreGetAllTemplatesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GitignoreGetAllTemplatesResponse,
      Responses.NotModified,
      GitignoreGetAllTemplatesResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    GitignoreGetAllTemplatesResponse,
    Responses.NotModified,
    GitignoreGetAllTemplatesResponse
  >(
    queryKeyFn({
      path: "/gitignore/templates",
      operationId: "gitignoreGetAllTemplates",
      variables,
    }),
    () => fetchGitignoreGetAllTemplates({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GitignoreGetTemplatePathParams = {
  name: string;
};

export type GitignoreGetTemplateVariables = {
  pathParams: GitignoreGetTemplatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * The API also allows fetching the source of a single template.
 * Use the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.
 */
export const fetchGitignoreGetTemplate = (
  variables: GitignoreGetTemplateVariables
) =>
  githubFetch<
    Schemas.GitignoreTemplate,
    undefined,
    {},
    {},
    GitignoreGetTemplatePathParams
  >({ url: "/gitignore/templates/{name}", method: "get", ...variables });

/**
 * The API also allows fetching the source of a single template.
 * Use the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.
 */
export const useGitignoreGetTemplate = (
  variables: GitignoreGetTemplateVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GitignoreTemplate,
      Responses.NotModified,
      Schemas.GitignoreTemplate
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.GitignoreTemplate,
    Responses.NotModified,
    Schemas.GitignoreTemplate
  >(
    queryKeyFn({
      path: "/gitignore/templates/{name}",
      operationId: "gitignoreGetTemplate",
      variables,
    }),
    () => fetchGitignoreGetTemplate({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsListReposAccessibleToInstallationQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListReposAccessibleToInstallationResponse = {
  repositories: Schemas.Repository[];
  /*
   * @example selected
   */
  repository_selection?: string;
  total_count: number;
};

export type AppsListReposAccessibleToInstallationVariables = {
  queryParams?: AppsListReposAccessibleToInstallationQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List repositories that an app installation can access.
 *
 * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const fetchAppsListReposAccessibleToInstallation = (
  variables: AppsListReposAccessibleToInstallationVariables
) =>
  githubFetch<
    AppsListReposAccessibleToInstallationResponse,
    undefined,
    {},
    AppsListReposAccessibleToInstallationQueryParams,
    {}
  >({ url: "/installation/repositories", method: "get", ...variables });

/**
 * List repositories that an app installation can access.
 *
 * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const useAppsListReposAccessibleToInstallation = (
  variables: AppsListReposAccessibleToInstallationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListReposAccessibleToInstallationResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden,
      AppsListReposAccessibleToInstallationResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    AppsListReposAccessibleToInstallationResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden,
    AppsListReposAccessibleToInstallationResponse
  >(
    queryKeyFn({
      path: "/installation/repositories",
      operationId: "appsListReposAccessibleToInstallation",
      variables,
    }),
    () =>
      fetchAppsListReposAccessibleToInstallation({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsRevokeInstallationAccessTokenVariables =
  GithubContext["fetcherOptions"];

/**
 * Revokes the installation token you're using to authenticate as an installation and access this endpoint.
 *
 * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/reference/apps#create-an-installation-access-token-for-an-app)" endpoint.
 *
 * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const fetchAppsRevokeInstallationAccessToken = (
  variables: AppsRevokeInstallationAccessTokenVariables
) =>
  githubFetch<undefined, undefined, {}, {}, {}>({
    url: "/installation/token",
    method: "delete",
    ...variables,
  });

/**
 * Revokes the installation token you're using to authenticate as an installation and access this endpoint.
 *
 * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/reference/apps#create-an-installation-access-token-for-an-app)" endpoint.
 *
 * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const useAppsRevokeInstallationAccessToken = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      AppsRevokeInstallationAccessTokenVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    AppsRevokeInstallationAccessTokenVariables
  >(
    (variables: AppsRevokeInstallationAccessTokenVariables) =>
      fetchAppsRevokeInstallationAccessToken({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type IssuesListQueryParams = {
  /*
   * Indicates which sorts of issues to return. Can be one of:
   * \* `assigned`: Issues assigned to you
   * \* `created`: Issues created by you
   * \* `mentioned`: Issues mentioning you
   * \* `subscribed`: Issues you're subscribed to updates for
   * \* `all`: All issues the authenticated user can see, regardless of participation or creation
   *
   * @default assigned
   */
  filter?:
    | "assigned"
    | "created"
    | "mentioned"
    | "subscribed"
    | "repos"
    | "all";
  /*
   * Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /*
   * A list of comma separated label names. Example: `bug,ui,@high`
   */
  labels?: string;
  /*
   * What to sort results by. Can be either `created`, `updated`, `comments`.
   *
   * @default created
   */
  sort?: "created" | "updated" | "comments";
  /*
   * One of `asc` (ascending) or `desc` (descending).
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  collab?: boolean;
  orgs?: boolean;
  owned?: boolean;
  pulls?: boolean;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListResponse = Schemas.Issue[];

export type IssuesListVariables = {
  queryParams?: IssuesListQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List issues assigned to the authenticated user across all visible repositories including owned repositories, member
 * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
 * necessarily assigned to you.
 *
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const fetchIssuesList = (variables: IssuesListVariables) =>
  githubFetch<IssuesListResponse, undefined, {}, IssuesListQueryParams, {}>({
    url: "/issues",
    method: "get",
    ...variables,
  });

/**
 * List issues assigned to the authenticated user across all visible repositories including owned repositories, member
 * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
 * necessarily assigned to you.
 *
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const useIssuesList = (
  variables: IssuesListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListResponse,
      Responses.NotModified | Responses.NotFound | Responses.ValidationFailed,
      IssuesListResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListResponse,
    Responses.NotModified | Responses.NotFound | Responses.ValidationFailed,
    IssuesListResponse
  >(
    queryKeyFn({ path: "/issues", operationId: "issuesList", variables }),
    () => fetchIssuesList({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type LicensesGetAllCommonlyUsedQueryParams = {
  featured?: boolean;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type LicensesGetAllCommonlyUsedResponse = Schemas.LicenseSimple[];

export type LicensesGetAllCommonlyUsedVariables = {
  queryParams?: LicensesGetAllCommonlyUsedQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchLicensesGetAllCommonlyUsed = (
  variables: LicensesGetAllCommonlyUsedVariables
) =>
  githubFetch<
    LicensesGetAllCommonlyUsedResponse,
    undefined,
    {},
    LicensesGetAllCommonlyUsedQueryParams,
    {}
  >({ url: "/licenses", method: "get", ...variables });

export const useLicensesGetAllCommonlyUsed = (
  variables: LicensesGetAllCommonlyUsedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      LicensesGetAllCommonlyUsedResponse,
      Responses.NotModified,
      LicensesGetAllCommonlyUsedResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    LicensesGetAllCommonlyUsedResponse,
    Responses.NotModified,
    LicensesGetAllCommonlyUsedResponse
  >(
    queryKeyFn({
      path: "/licenses",
      operationId: "licensesGetAllCommonlyUsed",
      variables,
    }),
    () => fetchLicensesGetAllCommonlyUsed({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type LicensesGetPathParams = {
  license: string;
};

export type LicensesGetVariables = {
  pathParams: LicensesGetPathParams;
} & GithubContext["fetcherOptions"];

export const fetchLicensesGet = (variables: LicensesGetVariables) =>
  githubFetch<Schemas.License, undefined, {}, {}, LicensesGetPathParams>({
    url: "/licenses/{license}",
    method: "get",
    ...variables,
  });

export const useLicensesGet = (
  variables: LicensesGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.License,
      Responses.NotModified | Responses.Forbidden | Responses.NotFound,
      Schemas.License
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.License,
    Responses.NotModified | Responses.Forbidden | Responses.NotFound,
    Schemas.License
  >(
    queryKeyFn({
      path: "/licenses/{license}",
      operationId: "licensesGet",
      variables,
    }),
    () => fetchLicensesGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MarkdownRenderRequestBody = {
  /*
   * The repository context to use when creating references in `gfm` mode.
   */
  context?: string;
  /*
   * The rendering mode.
   *
   * @default markdown
   * @example markdown
   */
  mode?: "markdown" | "gfm";
  /*
   * The Markdown text to render in HTML.
   */
  text: string;
};

export type MarkdownRenderVariables = {
  body: MarkdownRenderRequestBody;
} & GithubContext["fetcherOptions"];

export const fetchMarkdownRender = (variables: MarkdownRenderVariables) =>
  githubFetch<undefined, MarkdownRenderRequestBody, {}, {}, {}>({
    url: "/markdown",
    method: "post",
    ...variables,
  });

export const useMarkdownRender = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotModified,
      MarkdownRenderVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotModified,
    MarkdownRenderVariables
  >(
    (variables: MarkdownRenderVariables) =>
      fetchMarkdownRender({ ...fetcherOptions, ...variables }),
    options
  );
};

export type MarkdownRenderRawVariables = GithubContext["fetcherOptions"];

/**
 * You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
 */
export const fetchMarkdownRenderRaw = (variables: MarkdownRenderRawVariables) =>
  githubFetch<undefined, undefined, {}, {}, {}>({
    url: "/markdown/raw",
    method: "post",
    ...variables,
  });

/**
 * You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
 */
export const useMarkdownRenderRaw = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotModified,
      MarkdownRenderRawVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotModified,
    MarkdownRenderRawVariables
  >(
    (variables: MarkdownRenderRawVariables) =>
      fetchMarkdownRenderRaw({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsGetSubscriptionPlanForAccountPathParams = {
  /*
   * account_id parameter
   */
  accountId: number;
};

export type AppsGetSubscriptionPlanForAccountVariables = {
  pathParams: AppsGetSubscriptionPlanForAccountPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const fetchAppsGetSubscriptionPlanForAccount = (
  variables: AppsGetSubscriptionPlanForAccountVariables
) =>
  githubFetch<
    Schemas.MarketplacePurchase,
    undefined,
    {},
    {},
    AppsGetSubscriptionPlanForAccountPathParams
  >({
    url: "/marketplace_listing/accounts/{accountId}",
    method: "get",
    ...variables,
  });

/**
 * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const useAppsGetSubscriptionPlanForAccount = (
  variables: AppsGetSubscriptionPlanForAccountVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.MarketplacePurchase,
      Responses.RequiresAuthentication | Schemas.BasicError,
      Schemas.MarketplacePurchase
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.MarketplacePurchase,
    Responses.RequiresAuthentication | Schemas.BasicError,
    Schemas.MarketplacePurchase
  >(
    queryKeyFn({
      path: "/marketplace_listing/accounts/{account_id}",
      operationId: "appsGetSubscriptionPlanForAccount",
      variables,
    }),
    () =>
      fetchAppsGetSubscriptionPlanForAccount({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsListPlansQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListPlansResponse = Schemas.MarketplaceListingPlan[];

export type AppsListPlansVariables = {
  queryParams?: AppsListPlansQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all plans that are part of your GitHub Marketplace listing.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const fetchAppsListPlans = (variables: AppsListPlansVariables) =>
  githubFetch<
    AppsListPlansResponse,
    undefined,
    {},
    AppsListPlansQueryParams,
    {}
  >({ url: "/marketplace_listing/plans", method: "get", ...variables });

/**
 * Lists all plans that are part of your GitHub Marketplace listing.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const useAppsListPlans = (
  variables: AppsListPlansVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListPlansResponse,
      Responses.RequiresAuthentication | Responses.NotFound,
      AppsListPlansResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    AppsListPlansResponse,
    Responses.RequiresAuthentication | Responses.NotFound,
    AppsListPlansResponse
  >(
    queryKeyFn({
      path: "/marketplace_listing/plans",
      operationId: "appsListPlans",
      variables,
    }),
    () => fetchAppsListPlans({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsListAccountsForPlanPathParams = {
  /*
   * plan_id parameter
   */
  planId: number;
};

export type AppsListAccountsForPlanQueryParams = {
  /*
   * One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
   *
   * @default created
   */
  sort?: "created" | "updated";
  /*
   * To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListAccountsForPlanResponse = Schemas.MarketplacePurchase[];

export type AppsListAccountsForPlanVariables = {
  pathParams: AppsListAccountsForPlanPathParams;
  queryParams?: AppsListAccountsForPlanQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const fetchAppsListAccountsForPlan = (
  variables: AppsListAccountsForPlanVariables
) =>
  githubFetch<
    AppsListAccountsForPlanResponse,
    undefined,
    {},
    AppsListAccountsForPlanQueryParams,
    AppsListAccountsForPlanPathParams
  >({
    url: "/marketplace_listing/plans/{planId}/accounts",
    method: "get",
    ...variables,
  });

/**
 * Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const useAppsListAccountsForPlan = (
  variables: AppsListAccountsForPlanVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListAccountsForPlanResponse,
      | Responses.RequiresAuthentication
      | Responses.NotFound
      | Responses.ValidationFailed,
      AppsListAccountsForPlanResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    AppsListAccountsForPlanResponse,
    | Responses.RequiresAuthentication
    | Responses.NotFound
    | Responses.ValidationFailed,
    AppsListAccountsForPlanResponse
  >(
    queryKeyFn({
      path: "/marketplace_listing/plans/{plan_id}/accounts",
      operationId: "appsListAccountsForPlan",
      variables,
    }),
    () => fetchAppsListAccountsForPlan({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsGetSubscriptionPlanForAccountStubbedPathParams = {
  /*
   * account_id parameter
   */
  accountId: number;
};

export type AppsGetSubscriptionPlanForAccountStubbedVariables = {
  pathParams: AppsGetSubscriptionPlanForAccountStubbedPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const fetchAppsGetSubscriptionPlanForAccountStubbed = (
  variables: AppsGetSubscriptionPlanForAccountStubbedVariables
) =>
  githubFetch<
    Schemas.MarketplacePurchase,
    undefined,
    {},
    {},
    AppsGetSubscriptionPlanForAccountStubbedPathParams
  >({
    url: "/marketplace_listing/stubbed/accounts/{accountId}",
    method: "get",
    ...variables,
  });

/**
 * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const useAppsGetSubscriptionPlanForAccountStubbed = (
  variables: AppsGetSubscriptionPlanForAccountStubbedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.MarketplacePurchase,
      Responses.RequiresAuthentication,
      Schemas.MarketplacePurchase
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.MarketplacePurchase,
    Responses.RequiresAuthentication,
    Schemas.MarketplacePurchase
  >(
    queryKeyFn({
      path: "/marketplace_listing/stubbed/accounts/{account_id}",
      operationId: "appsGetSubscriptionPlanForAccountStubbed",
      variables,
    }),
    () =>
      fetchAppsGetSubscriptionPlanForAccountStubbed({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsListPlansStubbedQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListPlansStubbedResponse = Schemas.MarketplaceListingPlan[];

export type AppsListPlansStubbedVariables = {
  queryParams?: AppsListPlansStubbedQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all plans that are part of your GitHub Marketplace listing.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const fetchAppsListPlansStubbed = (
  variables: AppsListPlansStubbedVariables
) =>
  githubFetch<
    AppsListPlansStubbedResponse,
    undefined,
    {},
    AppsListPlansStubbedQueryParams,
    {}
  >({ url: "/marketplace_listing/stubbed/plans", method: "get", ...variables });

/**
 * Lists all plans that are part of your GitHub Marketplace listing.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const useAppsListPlansStubbed = (
  variables: AppsListPlansStubbedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListPlansStubbedResponse,
      Responses.RequiresAuthentication,
      AppsListPlansStubbedResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    AppsListPlansStubbedResponse,
    Responses.RequiresAuthentication,
    AppsListPlansStubbedResponse
  >(
    queryKeyFn({
      path: "/marketplace_listing/stubbed/plans",
      operationId: "appsListPlansStubbed",
      variables,
    }),
    () => fetchAppsListPlansStubbed({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsListAccountsForPlanStubbedPathParams = {
  /*
   * plan_id parameter
   */
  planId: number;
};

export type AppsListAccountsForPlanStubbedQueryParams = {
  /*
   * One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
   *
   * @default created
   */
  sort?: "created" | "updated";
  /*
   * To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListAccountsForPlanStubbedResponse =
  Schemas.MarketplacePurchase[];

export type AppsListAccountsForPlanStubbedVariables = {
  pathParams: AppsListAccountsForPlanStubbedPathParams;
  queryParams?: AppsListAccountsForPlanStubbedQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const fetchAppsListAccountsForPlanStubbed = (
  variables: AppsListAccountsForPlanStubbedVariables
) =>
  githubFetch<
    AppsListAccountsForPlanStubbedResponse,
    undefined,
    {},
    AppsListAccountsForPlanStubbedQueryParams,
    AppsListAccountsForPlanStubbedPathParams
  >({
    url: "/marketplace_listing/stubbed/plans/{planId}/accounts",
    method: "get",
    ...variables,
  });

/**
 * Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
 *
 * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
 */
export const useAppsListAccountsForPlanStubbed = (
  variables: AppsListAccountsForPlanStubbedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListAccountsForPlanStubbedResponse,
      Responses.RequiresAuthentication,
      AppsListAccountsForPlanStubbedResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    AppsListAccountsForPlanStubbedResponse,
    Responses.RequiresAuthentication,
    AppsListAccountsForPlanStubbedResponse
  >(
    queryKeyFn({
      path: "/marketplace_listing/stubbed/plans/{plan_id}/accounts",
      operationId: "appsListAccountsForPlanStubbed",
      variables,
    }),
    () =>
      fetchAppsListAccountsForPlanStubbed({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MetaGetVariables = GithubContext["fetcherOptions"];

/**
 * Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://help.github.com/articles/about-github-s-ip-addresses/)."
 *
 * **Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.
 */
export const fetchMetaGet = (variables: MetaGetVariables) =>
  githubFetch<Schemas.ApiOverview, undefined, {}, {}, {}>({
    url: "/meta",
    method: "get",
    ...variables,
  });

/**
 * Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://help.github.com/articles/about-github-s-ip-addresses/)."
 *
 * **Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.
 */
export const useMetaGet = (
  variables: MetaGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ApiOverview,
      Responses.NotModified,
      Schemas.ApiOverview
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ApiOverview,
    Responses.NotModified,
    Schemas.ApiOverview
  >(
    queryKeyFn({ path: "/meta", operationId: "metaGet", variables }),
    () => fetchMetaGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityListPublicEventsForRepoNetworkPathParams = {
  owner: string;
  repo: string;
};

export type ActivityListPublicEventsForRepoNetworkQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListPublicEventsForRepoNetworkResponse = Schemas.Event[];

export type ActivityListPublicEventsForRepoNetworkVariables = {
  pathParams: ActivityListPublicEventsForRepoNetworkPathParams;
  queryParams?: ActivityListPublicEventsForRepoNetworkQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityListPublicEventsForRepoNetwork = (
  variables: ActivityListPublicEventsForRepoNetworkVariables
) =>
  githubFetch<
    ActivityListPublicEventsForRepoNetworkResponse,
    undefined,
    {},
    ActivityListPublicEventsForRepoNetworkQueryParams,
    ActivityListPublicEventsForRepoNetworkPathParams
  >({ url: "/networks/{owner}/{repo}/events", method: "get", ...variables });

export const useActivityListPublicEventsForRepoNetwork = (
  variables: ActivityListPublicEventsForRepoNetworkVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListPublicEventsForRepoNetworkResponse,
      | Responses.MovedPermanently
      | Responses.NotModified
      | Responses.Forbidden
      | Responses.NotFound,
      ActivityListPublicEventsForRepoNetworkResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListPublicEventsForRepoNetworkResponse,
    | Responses.MovedPermanently
    | Responses.NotModified
    | Responses.Forbidden
    | Responses.NotFound,
    ActivityListPublicEventsForRepoNetworkResponse
  >(
    queryKeyFn({
      path: "/networks/{owner}/{repo}/events",
      operationId: "activityListPublicEventsForRepoNetwork",
      variables,
    }),
    () =>
      fetchActivityListPublicEventsForRepoNetwork({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityListNotificationsForAuthenticatedUserQueryParams = {
  /*
   * If `true`, show notifications marked as read.
   *
   * @default false
   */
  all?: boolean;
  /*
   * If `true`, only shows notifications in which the user is directly participating or mentioned.
   *
   * @default false
   */
  participating?: boolean;
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  before?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListNotificationsForAuthenticatedUserResponse =
  Schemas.Thread[];

export type ActivityListNotificationsForAuthenticatedUserVariables = {
  queryParams?: ActivityListNotificationsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all notifications for the current user, sorted by most recently updated.
 */
export const fetchActivityListNotificationsForAuthenticatedUser = (
  variables: ActivityListNotificationsForAuthenticatedUserVariables
) =>
  githubFetch<
    ActivityListNotificationsForAuthenticatedUserResponse,
    undefined,
    {},
    ActivityListNotificationsForAuthenticatedUserQueryParams,
    {}
  >({ url: "/notifications", method: "get", ...variables });

/**
 * List all notifications for the current user, sorted by most recently updated.
 */
export const useActivityListNotificationsForAuthenticatedUser = (
  variables: ActivityListNotificationsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListNotificationsForAuthenticatedUserResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.ValidationFailed,
      ActivityListNotificationsForAuthenticatedUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListNotificationsForAuthenticatedUserResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.ValidationFailed,
    ActivityListNotificationsForAuthenticatedUserResponse
  >(
    queryKeyFn({
      path: "/notifications",
      operationId: "activityListNotificationsForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchActivityListNotificationsForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityMarkNotificationsAsReadResponse = {
  message?: string;
};

export type ActivityMarkNotificationsAsReadRequestBody = {
  /*
   * Describes the last point that notifications were checked.
   *
   * @format date-time
   */
  last_read_at?: string;
  /*
   * Whether the notification has been read.
   */
  read?: boolean;
};

export type ActivityMarkNotificationsAsReadVariables = {
  body?: ActivityMarkNotificationsAsReadRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Marks all notifications as "read" removes it from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
 */
export const fetchActivityMarkNotificationsAsRead = (
  variables: ActivityMarkNotificationsAsReadVariables
) =>
  githubFetch<
    ActivityMarkNotificationsAsReadResponse,
    ActivityMarkNotificationsAsReadRequestBody,
    {},
    {},
    {}
  >({ url: "/notifications", method: "put", ...variables });

/**
 * Marks all notifications as "read" removes it from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
 */
export const useActivityMarkNotificationsAsRead = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ActivityMarkNotificationsAsReadResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden,
      ActivityMarkNotificationsAsReadVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ActivityMarkNotificationsAsReadResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden,
    ActivityMarkNotificationsAsReadVariables
  >(
    (variables: ActivityMarkNotificationsAsReadVariables) =>
      fetchActivityMarkNotificationsAsRead({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActivityGetThreadPathParams = {
  /*
   * thread_id parameter
   */
  threadId: number;
};

export type ActivityGetThreadVariables = {
  pathParams: ActivityGetThreadPathParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityGetThread = (variables: ActivityGetThreadVariables) =>
  githubFetch<Schemas.Thread, undefined, {}, {}, ActivityGetThreadPathParams>({
    url: "/notifications/threads/{threadId}",
    method: "get",
    ...variables,
  });

export const useActivityGetThread = (
  variables: ActivityGetThreadVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Thread,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden,
      Schemas.Thread
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Thread,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden,
    Schemas.Thread
  >(
    queryKeyFn({
      path: "/notifications/threads/{thread_id}",
      operationId: "activityGetThread",
      variables,
    }),
    () => fetchActivityGetThread({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityMarkThreadAsReadPathParams = {
  /*
   * thread_id parameter
   */
  threadId: number;
};

export type ActivityMarkThreadAsReadVariables = {
  pathParams: ActivityMarkThreadAsReadPathParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityMarkThreadAsRead = (
  variables: ActivityMarkThreadAsReadVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ActivityMarkThreadAsReadPathParams>(
    { url: "/notifications/threads/{threadId}", method: "patch", ...variables }
  );

export const useActivityMarkThreadAsRead = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotModified | Responses.Forbidden,
      ActivityMarkThreadAsReadVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotModified | Responses.Forbidden,
    ActivityMarkThreadAsReadVariables
  >(
    (variables: ActivityMarkThreadAsReadVariables) =>
      fetchActivityMarkThreadAsRead({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActivityDeleteThreadSubscriptionPathParams = {
  /*
   * thread_id parameter
   */
  threadId: number;
};

export type ActivityDeleteThreadSubscriptionVariables = {
  pathParams: ActivityDeleteThreadSubscriptionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`.
 */
export const fetchActivityDeleteThreadSubscription = (
  variables: ActivityDeleteThreadSubscriptionVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ActivityDeleteThreadSubscriptionPathParams
  >({
    url: "/notifications/threads/{threadId}/subscription",
    method: "delete",
    ...variables,
  });

/**
 * Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`.
 */
export const useActivityDeleteThreadSubscription = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden,
      ActivityDeleteThreadSubscriptionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden,
    ActivityDeleteThreadSubscriptionVariables
  >(
    (variables: ActivityDeleteThreadSubscriptionVariables) =>
      fetchActivityDeleteThreadSubscription({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActivityGetThreadSubscriptionForAuthenticatedUserPathParams = {
  /*
   * thread_id parameter
   */
  threadId: number;
};

export type ActivityGetThreadSubscriptionForAuthenticatedUserVariables = {
  pathParams: ActivityGetThreadSubscriptionForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/reference/activity#get-a-repository-subscription).
 *
 * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
 */
export const fetchActivityGetThreadSubscriptionForAuthenticatedUser = (
  variables: ActivityGetThreadSubscriptionForAuthenticatedUserVariables
) =>
  githubFetch<
    Schemas.ThreadSubscription,
    undefined,
    {},
    {},
    ActivityGetThreadSubscriptionForAuthenticatedUserPathParams
  >({
    url: "/notifications/threads/{threadId}/subscription",
    method: "get",
    ...variables,
  });

/**
 * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/reference/activity#get-a-repository-subscription).
 *
 * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
 */
export const useActivityGetThreadSubscriptionForAuthenticatedUser = (
  variables: ActivityGetThreadSubscriptionForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ThreadSubscription,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden,
      Schemas.ThreadSubscription
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ThreadSubscription,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden,
    Schemas.ThreadSubscription
  >(
    queryKeyFn({
      path: "/notifications/threads/{thread_id}/subscription",
      operationId: "activityGetThreadSubscriptionForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchActivityGetThreadSubscriptionForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivitySetThreadSubscriptionPathParams = {
  /*
   * thread_id parameter
   */
  threadId: number;
};

export type ActivitySetThreadSubscriptionRequestBody = {
  /*
   * Whether to block all notifications from a thread.
   *
   * @default false
   */
  ignored?: boolean;
};

export type ActivitySetThreadSubscriptionVariables = {
  body?: ActivitySetThreadSubscriptionRequestBody;
  pathParams: ActivitySetThreadSubscriptionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
 *
 * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
 *
 * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/reference/activity#delete-a-thread-subscription) endpoint.
 */
export const fetchActivitySetThreadSubscription = (
  variables: ActivitySetThreadSubscriptionVariables
) =>
  githubFetch<
    Schemas.ThreadSubscription,
    ActivitySetThreadSubscriptionRequestBody,
    {},
    {},
    ActivitySetThreadSubscriptionPathParams
  >({
    url: "/notifications/threads/{threadId}/subscription",
    method: "put",
    ...variables,
  });

/**
 * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
 *
 * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
 *
 * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/reference/activity#delete-a-thread-subscription) endpoint.
 */
export const useActivitySetThreadSubscription = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ThreadSubscription,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden,
      ActivitySetThreadSubscriptionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ThreadSubscription,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden,
    ActivitySetThreadSubscriptionVariables
  >(
    (variables: ActivitySetThreadSubscriptionVariables) =>
      fetchActivitySetThreadSubscription({ ...fetcherOptions, ...variables }),
    options
  );
};

export type MetaGetOctocatQueryParams = {
  /*
   * The words to show in Octocat's speech bubble
   */
  s?: string;
};

export type MetaGetOctocatVariables = {
  queryParams?: MetaGetOctocatQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Get the octocat as ASCII art
 */
export const fetchMetaGetOctocat = (variables: MetaGetOctocatVariables) =>
  githubFetch<undefined, undefined, {}, MetaGetOctocatQueryParams, {}>({
    url: "/octocat",
    method: "get",
    ...variables,
  });

/**
 * Get the octocat as ASCII art
 */
export const useMetaGetOctocat = (
  variables: MetaGetOctocatVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, undefined, undefined>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, undefined, undefined>(
    queryKeyFn({ path: "/octocat", operationId: "metaGetOctocat", variables }),
    () => fetchMetaGetOctocat({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsListQueryParams = {
  /*
   * An organization ID. Only return organizations with an ID greater than this ID.
   */
  since?: number;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type OrgsListResponse = Schemas.OrganizationSimple[];

export type OrgsListVariables = {
  queryParams?: OrgsListQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all organizations, in the order that they were created on GitHub.
 *
 * **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
 */
export const fetchOrgsList = (variables: OrgsListVariables) =>
  githubFetch<OrgsListResponse, undefined, {}, OrgsListQueryParams, {}>({
    url: "/organizations",
    method: "get",
    ...variables,
  });

/**
 * Lists all organizations, in the order that they were created on GitHub.
 *
 * **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
 */
export const useOrgsList = (
  variables: OrgsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListResponse,
      Responses.NotModified,
      OrgsListResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListResponse,
    Responses.NotModified,
    OrgsListResponse
  >(
    queryKeyFn({ path: "/organizations", operationId: "orgsList", variables }),
    () => fetchOrgsList({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsGetPathParams = {
  org: string;
};

export type OrgsGetVariables = {
  pathParams: OrgsGetPathParams;
} & GithubContext["fetcherOptions"];

/**
 * To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
 *
 * GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
 */
export const fetchOrgsGet = (variables: OrgsGetVariables) =>
  githubFetch<Schemas.OrganizationFull, undefined, {}, {}, OrgsGetPathParams>({
    url: "/orgs/{org}",
    method: "get",
    ...variables,
  });

/**
 * To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
 *
 * GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
 */
export const useOrgsGet = (
  variables: OrgsGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OrganizationFull,
      Responses.NotFound,
      Schemas.OrganizationFull
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.OrganizationFull,
    Responses.NotFound,
    Schemas.OrganizationFull
  >(
    queryKeyFn({ path: "/orgs/{org}", operationId: "orgsGet", variables }),
    () => fetchOrgsGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsUpdatePathParams = {
  org: string;
};

export type OrgsUpdateRequestBody = {
  /*
   * Billing email address. This address is not publicized.
   */
  billing_email?: string;
  /*
   * @example "http://github.blog"
   */
  blog?: string;
  /*
   * The company name.
   */
  company?: string;
  /*
   * Default permission level members have for organization repositories:
   * \* `read` - can pull, but not push to or administer this repository.
   * \* `write` - can pull and push, but not administer this repository.
   * \* `admin` - can pull, push, and administer this repository.
   * \* `none` - no permissions granted by default.
   *
   * @default read
   */
  default_repository_permission?: "read" | "write" | "admin" | "none";
  /*
   * The description of the company.
   */
  description?: string;
  /*
   * The publicly visible email address.
   */
  email?: string;
  /*
   * Toggles whether an organization can use organization projects.
   */
  has_organization_projects?: boolean;
  /*
   * Toggles whether repositories that belong to the organization can use repository projects.
   */
  has_repository_projects?: boolean;
  /*
   * The location.
   */
  location?: string;
  /*
   * Specifies which types of repositories non-admin organization members can create. Can be one of:
   * \* `all` - all organization members can create public and private repositories.
   * \* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.
   * \* `none` - only admin members can create repositories.
   * **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
   */
  members_allowed_repository_creation_type?: "all" | "private" | "none";
  /*
   * Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:
   * \* `true` - all organization members can create internal repositories.
   * \* `false` - only organization owners can create internal repositories.
   * Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
   */
  members_can_create_internal_repositories?: boolean;
  /*
   * Toggles whether organization members can create GitHub Pages sites. Can be one of:
   * \* `true` - all organization members can create GitHub Pages sites.
   * \* `false` - no organization members can create GitHub Pages sites. Existing published sites will not be impacted.
   *
   * @default true
   */
  members_can_create_pages?: boolean;
  /*
   * Toggles whether organization members can create private GitHub Pages sites. Can be one of:
   * \* `true` - all organization members can create private GitHub Pages sites.
   * \* `false` - no organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
   *
   * @default true
   */
  members_can_create_private_pages?: boolean;
  /*
   * Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:
   * \* `true` - all organization members can create private repositories.
   * \* `false` - only organization owners can create private repositories.
   * Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
   */
  members_can_create_private_repositories?: boolean;
  /*
   * Toggles whether organization members can create public GitHub Pages sites. Can be one of:
   * \* `true` - all organization members can create public GitHub Pages sites.
   * \* `false` - no organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
   *
   * @default true
   */
  members_can_create_public_pages?: boolean;
  /*
   * Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:
   * \* `true` - all organization members can create public repositories.
   * \* `false` - only organization owners can create public repositories.
   * Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
   */
  members_can_create_public_repositories?: boolean;
  /*
   * Toggles the ability of non-admin organization members to create repositories. Can be one of:
   * \* `true` - all organization members can create repositories.
   * \* `false` - only organization owners can create repositories.
   * Default: `true`
   * **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
   *
   * @default true
   */
  members_can_create_repositories?: boolean;
  /*
   * The shorthand name of the company.
   */
  name?: string;
  /*
   * The Twitter username of the company.
   */
  twitter_username?: string;
};

export type OrgsUpdateVariables = {
  body?: OrgsUpdateRequestBody;
  pathParams: OrgsUpdatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
 *
 * Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.
 */
export const fetchOrgsUpdate = (variables: OrgsUpdateVariables) =>
  githubFetch<
    Schemas.OrganizationFull,
    OrgsUpdateRequestBody,
    {},
    {},
    OrgsUpdatePathParams
  >({ url: "/orgs/{org}", method: "patch", ...variables });

/**
 * **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
 *
 * Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.
 */
export const useOrgsUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrganizationFull,
      | Responses.Conflict
      | Responses.PreviewHeaderMissing
      | (Schemas.ValidationError | Schemas.ValidationErrorSimple),
      OrgsUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.OrganizationFull,
    | Responses.Conflict
    | Responses.PreviewHeaderMissing
    | (Schemas.ValidationError | Schemas.ValidationErrorSimple),
    OrgsUpdateVariables
  >(
    (variables: OrgsUpdateVariables) =>
      fetchOrgsUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsGetGithubActionsPermissionsOrganizationPathParams = {
  org: string;
};

export type ActionsGetGithubActionsPermissionsOrganizationVariables = {
  pathParams: ActionsGetGithubActionsPermissionsOrganizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsGetGithubActionsPermissionsOrganization = (
  variables: ActionsGetGithubActionsPermissionsOrganizationVariables
) =>
  githubFetch<
    Schemas.ActionsOrganizationPermissions,
    undefined,
    {},
    {},
    ActionsGetGithubActionsPermissionsOrganizationPathParams
  >({ url: "/orgs/{org}/actions/permissions", method: "get", ...variables });

/**
 * Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsGetGithubActionsPermissionsOrganization = (
  variables: ActionsGetGithubActionsPermissionsOrganizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsOrganizationPermissions,
      undefined,
      Schemas.ActionsOrganizationPermissions
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsOrganizationPermissions,
    undefined,
    Schemas.ActionsOrganizationPermissions
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/permissions",
      operationId: "actionsGetGithubActionsPermissionsOrganization",
      variables,
    }),
    () =>
      fetchActionsGetGithubActionsPermissionsOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsSetGithubActionsPermissionsOrganizationPathParams = {
  org: string;
};

export type ActionsSetGithubActionsPermissionsOrganizationRequestBody = {
  allowed_actions?: Schemas.AllowedActions;
  enabled_repositories: Schemas.EnabledRepositories;
};

export type ActionsSetGithubActionsPermissionsOrganizationVariables = {
  body: ActionsSetGithubActionsPermissionsOrganizationRequestBody;
  pathParams: ActionsSetGithubActionsPermissionsOrganizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
 *
 * If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as `allowed_actions` to `selected` actions, then you cannot override them for the organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsSetGithubActionsPermissionsOrganization = (
  variables: ActionsSetGithubActionsPermissionsOrganizationVariables
) =>
  githubFetch<
    undefined,
    ActionsSetGithubActionsPermissionsOrganizationRequestBody,
    {},
    {},
    ActionsSetGithubActionsPermissionsOrganizationPathParams
  >({ url: "/orgs/{org}/actions/permissions", method: "put", ...variables });

/**
 * Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
 *
 * If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as `allowed_actions` to `selected` actions, then you cannot override them for the organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsSetGithubActionsPermissionsOrganization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsSetGithubActionsPermissionsOrganizationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsSetGithubActionsPermissionsOrganizationVariables
  >(
    (variables: ActionsSetGithubActionsPermissionsOrganizationVariables) =>
      fetchActionsSetGithubActionsPermissionsOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationPathParams =
  {
    org: string;
  };

export type ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationQueryParams =
  {
    /*
     * Results per page (max 100).
     *
     * @default 30
     */
    per_page?: number;
    /*
     * Page number of the results to fetch.
     *
     * @default 1
     */
    page?: number;
  };

export type ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse =
  {
    repositories: Schemas.Repository[];
    total_count: number;
  };

export type ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationVariables =
  {
    pathParams: ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationPathParams;
    queryParams?: ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationQueryParams;
  } & GithubContext["fetcherOptions"];

/**
 * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsListSelectedRepositoriesEnabledGithubActionsOrganization =
  (
    variables: ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationVariables
  ) =>
    githubFetch<
      ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse,
      undefined,
      {},
      ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationQueryParams,
      ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationPathParams
    >({
      url: "/orgs/{org}/actions/permissions/repositories",
      method: "get",
      ...variables,
    });

/**
 * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsListSelectedRepositoriesEnabledGithubActionsOrganization =
  (
    variables: ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationVariables,
    options?: Omit<
      reactQuery.UseQueryOptions<
        ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse,
        undefined,
        ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse
      >,
      "queryKey" | "queryFn"
    >
  ) => {
    const { fetcherOptions, queryOptions, queryKeyFn } =
      useGithubContext(options);
    return reactQuery.useQuery<
      ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse,
      undefined,
      ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse
    >(
      queryKeyFn({
        path: "/orgs/{org}/actions/permissions/repositories",
        operationId:
          "actionsListSelectedRepositoriesEnabledGithubActionsOrganization",
        variables,
      }),
      () =>
        fetchActionsListSelectedRepositoriesEnabledGithubActionsOrganization({
          ...fetcherOptions,
          ...variables,
        }),
      {
        ...options,
        ...queryOptions,
      }
    );
  };

export type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationPathParams =
  {
    org: string;
  };

export type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequestBody =
  {
    /*
     * List of repository IDs to enable for GitHub Actions.
     */
    selected_repository_ids: number[];
  };

export type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationVariables =
  {
    body: ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequestBody;
    pathParams: ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationPathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsSetSelectedRepositoriesEnabledGithubActionsOrganization =
  (
    variables: ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationVariables
  ) =>
    githubFetch<
      undefined,
      ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequestBody,
      {},
      {},
      ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationPathParams
    >({
      url: "/orgs/{org}/actions/permissions/repositories",
      method: "put",
      ...variables,
    });

/**
 * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsSetSelectedRepositoriesEnabledGithubActionsOrganization =
  (
    options?: Omit<
      reactQuery.UseMutationOptions<
        undefined,
        undefined,
        ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationVariables
      >,
      "mutationFn"
    >
  ) => {
    const { fetcherOptions } = useGithubContext();
    return reactQuery.useMutation<
      undefined,
      undefined,
      ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationVariables
    >(
      (
        variables: ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationVariables
      ) =>
        fetchActionsSetSelectedRepositoriesEnabledGithubActionsOrganization({
          ...fetcherOptions,
          ...variables,
        }),
      options
    );
  };

export type ActionsDisableSelectedRepositoryGithubActionsOrganizationPathParams =
  {
    org: string;
    repositoryId: number;
  };

export type ActionsDisableSelectedRepositoryGithubActionsOrganizationVariables =
  {
    pathParams: ActionsDisableSelectedRepositoryGithubActionsOrganizationPathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsDisableSelectedRepositoryGithubActionsOrganization = (
  variables: ActionsDisableSelectedRepositoryGithubActionsOrganizationVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ActionsDisableSelectedRepositoryGithubActionsOrganizationPathParams
  >({
    url: "/orgs/{org}/actions/permissions/repositories/{repositoryId}",
    method: "delete",
    ...variables,
  });

/**
 * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsDisableSelectedRepositoryGithubActionsOrganization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsDisableSelectedRepositoryGithubActionsOrganizationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsDisableSelectedRepositoryGithubActionsOrganizationVariables
  >(
    (
      variables: ActionsDisableSelectedRepositoryGithubActionsOrganizationVariables
    ) =>
      fetchActionsDisableSelectedRepositoryGithubActionsOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsEnableSelectedRepositoryGithubActionsOrganizationPathParams =
  {
    org: string;
    repositoryId: number;
  };

export type ActionsEnableSelectedRepositoryGithubActionsOrganizationVariables =
  {
    pathParams: ActionsEnableSelectedRepositoryGithubActionsOrganizationPathParams;
  } & GithubContext["fetcherOptions"];

/**
 * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsEnableSelectedRepositoryGithubActionsOrganization = (
  variables: ActionsEnableSelectedRepositoryGithubActionsOrganizationVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ActionsEnableSelectedRepositoryGithubActionsOrganizationPathParams
  >({
    url: "/orgs/{org}/actions/permissions/repositories/{repositoryId}",
    method: "put",
    ...variables,
  });

/**
 * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsEnableSelectedRepositoryGithubActionsOrganization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsEnableSelectedRepositoryGithubActionsOrganizationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsEnableSelectedRepositoryGithubActionsOrganizationVariables
  >(
    (
      variables: ActionsEnableSelectedRepositoryGithubActionsOrganizationVariables
    ) =>
      fetchActionsEnableSelectedRepositoryGithubActionsOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsGetAllowedActionsOrganizationPathParams = {
  org: string;
};

export type ActionsGetAllowedActionsOrganizationVariables = {
  pathParams: ActionsGetAllowedActionsOrganizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsGetAllowedActionsOrganization = (
  variables: ActionsGetAllowedActionsOrganizationVariables
) =>
  githubFetch<
    Schemas.SelectedActions,
    undefined,
    {},
    {},
    ActionsGetAllowedActionsOrganizationPathParams
  >({
    url: "/orgs/{org}/actions/permissions/selected-actions",
    method: "get",
    ...variables,
  });

/**
 * Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsGetAllowedActionsOrganization = (
  variables: ActionsGetAllowedActionsOrganizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SelectedActions,
      undefined,
      Schemas.SelectedActions
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.SelectedActions,
    undefined,
    Schemas.SelectedActions
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/permissions/selected-actions",
      operationId: "actionsGetAllowedActionsOrganization",
      variables,
    }),
    () =>
      fetchActionsGetAllowedActionsOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsSetAllowedActionsOrganizationPathParams = {
  org: string;
};

export type ActionsSetAllowedActionsOrganizationVariables = {
  body: Schemas.SelectedActions;
  pathParams: ActionsSetAllowedActionsOrganizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * If the organization belongs to an enterprise that has `selected` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.
 *
 * To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const fetchActionsSetAllowedActionsOrganization = (
  variables: ActionsSetAllowedActionsOrganizationVariables
) =>
  githubFetch<
    undefined,
    Schemas.SelectedActions,
    {},
    {},
    ActionsSetAllowedActionsOrganizationPathParams
  >({
    url: "/orgs/{org}/actions/permissions/selected-actions",
    method: "put",
    ...variables,
  });

/**
 * Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * If the organization belongs to an enterprise that has `selected` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.
 *
 * To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const useActionsSetAllowedActionsOrganization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsSetAllowedActionsOrganizationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsSetAllowedActionsOrganizationVariables
  >(
    (variables: ActionsSetAllowedActionsOrganizationVariables) =>
      fetchActionsSetAllowedActionsOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsListSelfHostedRunnerGroupsForOrgPathParams = {
  org: string;
};

export type ActionsListSelfHostedRunnerGroupsForOrgQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListSelfHostedRunnerGroupsForOrgResponse = {
  runner_groups: Schemas.RunnerGroupsOrg[];
  total_count: number;
};

export type ActionsListSelfHostedRunnerGroupsForOrgVariables = {
  pathParams: ActionsListSelfHostedRunnerGroupsForOrgPathParams;
  queryParams?: ActionsListSelfHostedRunnerGroupsForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsListSelfHostedRunnerGroupsForOrg = (
  variables: ActionsListSelfHostedRunnerGroupsForOrgVariables
) =>
  githubFetch<
    ActionsListSelfHostedRunnerGroupsForOrgResponse,
    undefined,
    {},
    ActionsListSelfHostedRunnerGroupsForOrgQueryParams,
    ActionsListSelfHostedRunnerGroupsForOrgPathParams
  >({ url: "/orgs/{org}/actions/runner-groups", method: "get", ...variables });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsListSelfHostedRunnerGroupsForOrg = (
  variables: ActionsListSelfHostedRunnerGroupsForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListSelfHostedRunnerGroupsForOrgResponse,
      undefined,
      ActionsListSelfHostedRunnerGroupsForOrgResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListSelfHostedRunnerGroupsForOrgResponse,
    undefined,
    ActionsListSelfHostedRunnerGroupsForOrgResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/runner-groups",
      operationId: "actionsListSelfHostedRunnerGroupsForOrg",
      variables,
    }),
    () =>
      fetchActionsListSelfHostedRunnerGroupsForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsCreateSelfHostedRunnerGroupForOrgPathParams = {
  org: string;
};

export type ActionsCreateSelfHostedRunnerGroupForOrgRequestBody = {
  /*
   * Name of the runner group.
   */
  name: string;
  /*
   * List of runner IDs to add to the runner group.
   */
  runners?: number[];
  /*
   * List of repository IDs that can access the runner group.
   */
  selected_repository_ids?: number[];
  /*
   * Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories. Can be one of: `all`, `selected`, or `private`.
   *
   * @default all
   */
  visibility?: "selected" | "all" | "private";
};

export type ActionsCreateSelfHostedRunnerGroupForOrgVariables = {
  body: ActionsCreateSelfHostedRunnerGroupForOrgRequestBody;
  pathParams: ActionsCreateSelfHostedRunnerGroupForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Creates a new self-hosted runner group for an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsCreateSelfHostedRunnerGroupForOrg = (
  variables: ActionsCreateSelfHostedRunnerGroupForOrgVariables
) =>
  githubFetch<
    Schemas.RunnerGroupsOrg,
    ActionsCreateSelfHostedRunnerGroupForOrgRequestBody,
    {},
    {},
    ActionsCreateSelfHostedRunnerGroupForOrgPathParams
  >({ url: "/orgs/{org}/actions/runner-groups", method: "post", ...variables });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Creates a new self-hosted runner group for an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsCreateSelfHostedRunnerGroupForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RunnerGroupsOrg,
      undefined,
      ActionsCreateSelfHostedRunnerGroupForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.RunnerGroupsOrg,
    undefined,
    ActionsCreateSelfHostedRunnerGroupForOrgVariables
  >(
    (variables: ActionsCreateSelfHostedRunnerGroupForOrgVariables) =>
      fetchActionsCreateSelfHostedRunnerGroupForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsDeleteSelfHostedRunnerGroupFromOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
};

export type ActionsDeleteSelfHostedRunnerGroupFromOrgVariables = {
  pathParams: ActionsDeleteSelfHostedRunnerGroupFromOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Deletes a self-hosted runner group for an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsDeleteSelfHostedRunnerGroupFromOrg = (
  variables: ActionsDeleteSelfHostedRunnerGroupFromOrgVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ActionsDeleteSelfHostedRunnerGroupFromOrgPathParams
  >({
    url: "/orgs/{org}/actions/runner-groups/{runnerGroupId}",
    method: "delete",
    ...variables,
  });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Deletes a self-hosted runner group for an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsDeleteSelfHostedRunnerGroupFromOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsDeleteSelfHostedRunnerGroupFromOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsDeleteSelfHostedRunnerGroupFromOrgVariables
  >(
    (variables: ActionsDeleteSelfHostedRunnerGroupFromOrgVariables) =>
      fetchActionsDeleteSelfHostedRunnerGroupFromOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsGetSelfHostedRunnerGroupForOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
};

export type ActionsGetSelfHostedRunnerGroupForOrgVariables = {
  pathParams: ActionsGetSelfHostedRunnerGroupForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Gets a specific self-hosted runner group for an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsGetSelfHostedRunnerGroupForOrg = (
  variables: ActionsGetSelfHostedRunnerGroupForOrgVariables
) =>
  githubFetch<
    Schemas.RunnerGroupsOrg,
    undefined,
    {},
    {},
    ActionsGetSelfHostedRunnerGroupForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runner-groups/{runnerGroupId}",
    method: "get",
    ...variables,
  });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Gets a specific self-hosted runner group for an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsGetSelfHostedRunnerGroupForOrg = (
  variables: ActionsGetSelfHostedRunnerGroupForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RunnerGroupsOrg,
      undefined,
      Schemas.RunnerGroupsOrg
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.RunnerGroupsOrg,
    undefined,
    Schemas.RunnerGroupsOrg
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/runner-groups/{runner_group_id}",
      operationId: "actionsGetSelfHostedRunnerGroupForOrg",
      variables,
    }),
    () =>
      fetchActionsGetSelfHostedRunnerGroupForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsUpdateSelfHostedRunnerGroupForOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
};

export type ActionsUpdateSelfHostedRunnerGroupForOrgRequestBody = {
  /*
   * Name of the runner group.
   */
  name?: string;
  /*
   * Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories. Can be one of: `all`, `selected`, or `private`.
   */
  visibility?: "selected" | "all" | "private";
};

export type ActionsUpdateSelfHostedRunnerGroupForOrgVariables = {
  body?: ActionsUpdateSelfHostedRunnerGroupForOrgRequestBody;
  pathParams: ActionsUpdateSelfHostedRunnerGroupForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Updates the `name` and `visibility` of a self-hosted runner group in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsUpdateSelfHostedRunnerGroupForOrg = (
  variables: ActionsUpdateSelfHostedRunnerGroupForOrgVariables
) =>
  githubFetch<
    Schemas.RunnerGroupsOrg,
    ActionsUpdateSelfHostedRunnerGroupForOrgRequestBody,
    {},
    {},
    ActionsUpdateSelfHostedRunnerGroupForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runner-groups/{runnerGroupId}",
    method: "patch",
    ...variables,
  });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Updates the `name` and `visibility` of a self-hosted runner group in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsUpdateSelfHostedRunnerGroupForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RunnerGroupsOrg,
      undefined,
      ActionsUpdateSelfHostedRunnerGroupForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.RunnerGroupsOrg,
    undefined,
    ActionsUpdateSelfHostedRunnerGroupForOrgVariables
  >(
    (variables: ActionsUpdateSelfHostedRunnerGroupForOrgVariables) =>
      fetchActionsUpdateSelfHostedRunnerGroupForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsListRepoAccessToSelfHostedRunnerGroupInOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
};

export type ActionsListRepoAccessToSelfHostedRunnerGroupInOrgQueryParams = {
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type ActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponse = {
  repositories: Schemas.Repository[];
  total_count: number;
};

export type ActionsListRepoAccessToSelfHostedRunnerGroupInOrgVariables = {
  pathParams: ActionsListRepoAccessToSelfHostedRunnerGroupInOrgPathParams;
  queryParams?: ActionsListRepoAccessToSelfHostedRunnerGroupInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Lists the repositories with access to a self-hosted runner group configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsListRepoAccessToSelfHostedRunnerGroupInOrg = (
  variables: ActionsListRepoAccessToSelfHostedRunnerGroupInOrgVariables
) =>
  githubFetch<
    ActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponse,
    undefined,
    {},
    ActionsListRepoAccessToSelfHostedRunnerGroupInOrgQueryParams,
    ActionsListRepoAccessToSelfHostedRunnerGroupInOrgPathParams
  >({
    url: "/orgs/{org}/actions/runner-groups/{runnerGroupId}/repositories",
    method: "get",
    ...variables,
  });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Lists the repositories with access to a self-hosted runner group configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsListRepoAccessToSelfHostedRunnerGroupInOrg = (
  variables: ActionsListRepoAccessToSelfHostedRunnerGroupInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponse,
      undefined,
      ActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponse,
    undefined,
    ActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories",
      operationId: "actionsListRepoAccessToSelfHostedRunnerGroupInOrg",
      variables,
    }),
    () =>
      fetchActionsListRepoAccessToSelfHostedRunnerGroupInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
};

export type ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequestBody = {
  /*
   * List of repository IDs that can access the runner group.
   */
  selected_repository_ids: number[];
};

export type ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgVariables = {
  body: ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequestBody;
  pathParams: ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsSetRepoAccessToSelfHostedRunnerGroupInOrg = (
  variables: ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgVariables
) =>
  githubFetch<
    undefined,
    ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequestBody,
    {},
    {},
    ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgPathParams
  >({
    url: "/orgs/{org}/actions/runner-groups/{runnerGroupId}/repositories",
    method: "put",
    ...variables,
  });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsSetRepoAccessToSelfHostedRunnerGroupInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgVariables
  >(
    (variables: ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgVariables) =>
      fetchActionsSetRepoAccessToSelfHostedRunnerGroupInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
  repositoryId: number;
};

export type ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgVariables = {
  pathParams: ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 *
 * Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg = (
  variables: ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgPathParams
  >({
    url: "/orgs/{org}/actions/runner-groups/{runnerGroupId}/repositories/{repositoryId}",
    method: "delete",
    ...variables,
  });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 *
 * Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgVariables
  >(
    (variables: ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgVariables) =>
      fetchActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
  repositoryId: number;
};

export type ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgVariables = {
  pathParams: ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 *
 * Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org`
 * scope to use this endpoint.
 */
export const fetchActionsAddRepoAccessToSelfHostedRunnerGroupInOrg = (
  variables: ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgPathParams
  >({
    url: "/orgs/{org}/actions/runner-groups/{runnerGroupId}/repositories/{repositoryId}",
    method: "put",
    ...variables,
  });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 *
 * Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
 *
 * You must authenticate using an access token with the `admin:org`
 * scope to use this endpoint.
 */
export const useActionsAddRepoAccessToSelfHostedRunnerGroupInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgVariables
  >(
    (variables: ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgVariables) =>
      fetchActionsAddRepoAccessToSelfHostedRunnerGroupInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsListSelfHostedRunnersInGroupForOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
};

export type ActionsListSelfHostedRunnersInGroupForOrgQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListSelfHostedRunnersInGroupForOrgResponse = {
  runners: Schemas.Runner[];
  total_count: number;
};

export type ActionsListSelfHostedRunnersInGroupForOrgVariables = {
  pathParams: ActionsListSelfHostedRunnersInGroupForOrgPathParams;
  queryParams?: ActionsListSelfHostedRunnersInGroupForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Lists self-hosted runners that are in a specific organization group.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsListSelfHostedRunnersInGroupForOrg = (
  variables: ActionsListSelfHostedRunnersInGroupForOrgVariables
) =>
  githubFetch<
    ActionsListSelfHostedRunnersInGroupForOrgResponse,
    undefined,
    {},
    ActionsListSelfHostedRunnersInGroupForOrgQueryParams,
    ActionsListSelfHostedRunnersInGroupForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runner-groups/{runnerGroupId}/runners",
    method: "get",
    ...variables,
  });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Lists self-hosted runners that are in a specific organization group.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsListSelfHostedRunnersInGroupForOrg = (
  variables: ActionsListSelfHostedRunnersInGroupForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListSelfHostedRunnersInGroupForOrgResponse,
      undefined,
      ActionsListSelfHostedRunnersInGroupForOrgResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListSelfHostedRunnersInGroupForOrgResponse,
    undefined,
    ActionsListSelfHostedRunnersInGroupForOrgResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners",
      operationId: "actionsListSelfHostedRunnersInGroupForOrg",
      variables,
    }),
    () =>
      fetchActionsListSelfHostedRunnersInGroupForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsSetSelfHostedRunnersInGroupForOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
};

export type ActionsSetSelfHostedRunnersInGroupForOrgRequestBody = {
  /*
   * List of runner IDs to add to the runner group.
   */
  runners: number[];
};

export type ActionsSetSelfHostedRunnersInGroupForOrgVariables = {
  body: ActionsSetSelfHostedRunnersInGroupForOrgRequestBody;
  pathParams: ActionsSetSelfHostedRunnersInGroupForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Replaces the list of self-hosted runners that are part of an organization runner group.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsSetSelfHostedRunnersInGroupForOrg = (
  variables: ActionsSetSelfHostedRunnersInGroupForOrgVariables
) =>
  githubFetch<
    undefined,
    ActionsSetSelfHostedRunnersInGroupForOrgRequestBody,
    {},
    {},
    ActionsSetSelfHostedRunnersInGroupForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runner-groups/{runnerGroupId}/runners",
    method: "put",
    ...variables,
  });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 * Replaces the list of self-hosted runners that are part of an organization runner group.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsSetSelfHostedRunnersInGroupForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsSetSelfHostedRunnersInGroupForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsSetSelfHostedRunnersInGroupForOrgVariables
  >(
    (variables: ActionsSetSelfHostedRunnersInGroupForOrgVariables) =>
      fetchActionsSetSelfHostedRunnersInGroupForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsRemoveSelfHostedRunnerFromGroupForOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
  /*
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type ActionsRemoveSelfHostedRunnerFromGroupForOrgVariables = {
  pathParams: ActionsRemoveSelfHostedRunnerFromGroupForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 *
 * Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsRemoveSelfHostedRunnerFromGroupForOrg = (
  variables: ActionsRemoveSelfHostedRunnerFromGroupForOrgVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ActionsRemoveSelfHostedRunnerFromGroupForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runner-groups/{runnerGroupId}/runners/{runnerId}",
    method: "delete",
    ...variables,
  });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 *
 * Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsRemoveSelfHostedRunnerFromGroupForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsRemoveSelfHostedRunnerFromGroupForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsRemoveSelfHostedRunnerFromGroupForOrgVariables
  >(
    (variables: ActionsRemoveSelfHostedRunnerFromGroupForOrgVariables) =>
      fetchActionsRemoveSelfHostedRunnerFromGroupForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsAddSelfHostedRunnerToGroupForOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner group.
   */
  runnerGroupId: number;
  /*
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type ActionsAddSelfHostedRunnerToGroupForOrgVariables = {
  pathParams: ActionsAddSelfHostedRunnerToGroupForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 *
 * Adds a self-hosted runner to a runner group configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org`
 * scope to use this endpoint.
 */
export const fetchActionsAddSelfHostedRunnerToGroupForOrg = (
  variables: ActionsAddSelfHostedRunnerToGroupForOrgVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ActionsAddSelfHostedRunnerToGroupForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runner-groups/{runnerGroupId}/runners/{runnerId}",
    method: "put",
    ...variables,
  });

/**
 * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
 *
 *
 * Adds a self-hosted runner to a runner group configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org`
 * scope to use this endpoint.
 */
export const useActionsAddSelfHostedRunnerToGroupForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsAddSelfHostedRunnerToGroupForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsAddSelfHostedRunnerToGroupForOrgVariables
  >(
    (variables: ActionsAddSelfHostedRunnerToGroupForOrgVariables) =>
      fetchActionsAddSelfHostedRunnerToGroupForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsListSelfHostedRunnersForOrgPathParams = {
  org: string;
};

export type ActionsListSelfHostedRunnersForOrgQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListSelfHostedRunnersForOrgResponse = {
  runners: Schemas.Runner[];
  total_count: number;
};

export type ActionsListSelfHostedRunnersForOrgVariables = {
  pathParams: ActionsListSelfHostedRunnersForOrgPathParams;
  queryParams?: ActionsListSelfHostedRunnersForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all self-hosted runners configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsListSelfHostedRunnersForOrg = (
  variables: ActionsListSelfHostedRunnersForOrgVariables
) =>
  githubFetch<
    ActionsListSelfHostedRunnersForOrgResponse,
    undefined,
    {},
    ActionsListSelfHostedRunnersForOrgQueryParams,
    ActionsListSelfHostedRunnersForOrgPathParams
  >({ url: "/orgs/{org}/actions/runners", method: "get", ...variables });

/**
 * Lists all self-hosted runners configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsListSelfHostedRunnersForOrg = (
  variables: ActionsListSelfHostedRunnersForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListSelfHostedRunnersForOrgResponse,
      undefined,
      ActionsListSelfHostedRunnersForOrgResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListSelfHostedRunnersForOrgResponse,
    undefined,
    ActionsListSelfHostedRunnersForOrgResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/runners",
      operationId: "actionsListSelfHostedRunnersForOrg",
      variables,
    }),
    () =>
      fetchActionsListSelfHostedRunnersForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsListRunnerApplicationsForOrgPathParams = {
  org: string;
};

export type ActionsListRunnerApplicationsForOrgResponse =
  Schemas.RunnerApplication[];

export type ActionsListRunnerApplicationsForOrgVariables = {
  pathParams: ActionsListRunnerApplicationsForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsListRunnerApplicationsForOrg = (
  variables: ActionsListRunnerApplicationsForOrgVariables
) =>
  githubFetch<
    ActionsListRunnerApplicationsForOrgResponse,
    undefined,
    {},
    {},
    ActionsListRunnerApplicationsForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runners/downloads",
    method: "get",
    ...variables,
  });

/**
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsListRunnerApplicationsForOrg = (
  variables: ActionsListRunnerApplicationsForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRunnerApplicationsForOrgResponse,
      undefined,
      ActionsListRunnerApplicationsForOrgResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListRunnerApplicationsForOrgResponse,
    undefined,
    ActionsListRunnerApplicationsForOrgResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/runners/downloads",
      operationId: "actionsListRunnerApplicationsForOrg",
      variables,
    }),
    () =>
      fetchActionsListRunnerApplicationsForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsCreateRegistrationTokenForOrgPathParams = {
  org: string;
};

export type ActionsCreateRegistrationTokenForOrgVariables = {
  pathParams: ActionsCreateRegistrationTokenForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a token that you can pass to the `config` script. The token expires after one hour.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 *
 * #### Example using registration token
 *
 * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
 *
 * ```
 * ./config.sh --url https://github.com/octo-org --token TOKEN
 * ```
 */
export const fetchActionsCreateRegistrationTokenForOrg = (
  variables: ActionsCreateRegistrationTokenForOrgVariables
) =>
  githubFetch<
    Schemas.AuthenticationToken,
    undefined,
    {},
    {},
    ActionsCreateRegistrationTokenForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runners/registration-token",
    method: "post",
    ...variables,
  });

/**
 * Returns a token that you can pass to the `config` script. The token expires after one hour.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 *
 * #### Example using registration token
 *
 * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
 *
 * ```
 * ./config.sh --url https://github.com/octo-org --token TOKEN
 * ```
 */
export const useActionsCreateRegistrationTokenForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AuthenticationToken,
      undefined,
      ActionsCreateRegistrationTokenForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.AuthenticationToken,
    undefined,
    ActionsCreateRegistrationTokenForOrgVariables
  >(
    (variables: ActionsCreateRegistrationTokenForOrgVariables) =>
      fetchActionsCreateRegistrationTokenForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsCreateRemoveTokenForOrgPathParams = {
  org: string;
};

export type ActionsCreateRemoveTokenForOrgVariables = {
  pathParams: ActionsCreateRemoveTokenForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 *
 * #### Example using remove token
 *
 * To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this
 * endpoint.
 *
 * ```
 * ./config.sh remove --token TOKEN
 * ```
 */
export const fetchActionsCreateRemoveTokenForOrg = (
  variables: ActionsCreateRemoveTokenForOrgVariables
) =>
  githubFetch<
    Schemas.AuthenticationToken,
    undefined,
    {},
    {},
    ActionsCreateRemoveTokenForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runners/remove-token",
    method: "post",
    ...variables,
  });

/**
 * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 *
 * #### Example using remove token
 *
 * To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this
 * endpoint.
 *
 * ```
 * ./config.sh remove --token TOKEN
 * ```
 */
export const useActionsCreateRemoveTokenForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AuthenticationToken,
      undefined,
      ActionsCreateRemoveTokenForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.AuthenticationToken,
    undefined,
    ActionsCreateRemoveTokenForOrgVariables
  >(
    (variables: ActionsCreateRemoveTokenForOrgVariables) =>
      fetchActionsCreateRemoveTokenForOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsDeleteSelfHostedRunnerFromOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type ActionsDeleteSelfHostedRunnerFromOrgVariables = {
  pathParams: ActionsDeleteSelfHostedRunnerFromOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsDeleteSelfHostedRunnerFromOrg = (
  variables: ActionsDeleteSelfHostedRunnerFromOrgVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ActionsDeleteSelfHostedRunnerFromOrgPathParams
  >({
    url: "/orgs/{org}/actions/runners/{runnerId}",
    method: "delete",
    ...variables,
  });

/**
 * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsDeleteSelfHostedRunnerFromOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsDeleteSelfHostedRunnerFromOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsDeleteSelfHostedRunnerFromOrgVariables
  >(
    (variables: ActionsDeleteSelfHostedRunnerFromOrgVariables) =>
      fetchActionsDeleteSelfHostedRunnerFromOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsGetSelfHostedRunnerForOrgPathParams = {
  org: string;
  /*
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type ActionsGetSelfHostedRunnerForOrgVariables = {
  pathParams: ActionsGetSelfHostedRunnerForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific self-hosted runner configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const fetchActionsGetSelfHostedRunnerForOrg = (
  variables: ActionsGetSelfHostedRunnerForOrgVariables
) =>
  githubFetch<
    Schemas.Runner,
    undefined,
    {},
    {},
    ActionsGetSelfHostedRunnerForOrgPathParams
  >({
    url: "/orgs/{org}/actions/runners/{runnerId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific self-hosted runner configured in an organization.
 *
 * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const useActionsGetSelfHostedRunnerForOrg = (
  variables: ActionsGetSelfHostedRunnerForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Runner, undefined, Schemas.Runner>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Runner, undefined, Schemas.Runner>(
    queryKeyFn({
      path: "/orgs/{org}/actions/runners/{runner_id}",
      operationId: "actionsGetSelfHostedRunnerForOrg",
      variables,
    }),
    () =>
      fetchActionsGetSelfHostedRunnerForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsListOrgSecretsPathParams = {
  org: string;
};

export type ActionsListOrgSecretsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListOrgSecretsResponse = {
  secrets: Schemas.OrganizationActionsSecret[];
  total_count: number;
};

export type ActionsListOrgSecretsVariables = {
  pathParams: ActionsListOrgSecretsPathParams;
  queryParams?: ActionsListOrgSecretsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const fetchActionsListOrgSecrets = (
  variables: ActionsListOrgSecretsVariables
) =>
  githubFetch<
    ActionsListOrgSecretsResponse,
    undefined,
    {},
    ActionsListOrgSecretsQueryParams,
    ActionsListOrgSecretsPathParams
  >({ url: "/orgs/{org}/actions/secrets", method: "get", ...variables });

/**
 * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useActionsListOrgSecrets = (
  variables: ActionsListOrgSecretsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListOrgSecretsResponse,
      undefined,
      ActionsListOrgSecretsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListOrgSecretsResponse,
    undefined,
    ActionsListOrgSecretsResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/secrets",
      operationId: "actionsListOrgSecrets",
      variables,
    }),
    () => fetchActionsListOrgSecrets({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsGetOrgPublicKeyPathParams = {
  org: string;
};

export type ActionsGetOrgPublicKeyVariables = {
  pathParams: ActionsGetOrgPublicKeyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const fetchActionsGetOrgPublicKey = (
  variables: ActionsGetOrgPublicKeyVariables
) =>
  githubFetch<
    Schemas.ActionsPublicKey,
    undefined,
    {},
    {},
    ActionsGetOrgPublicKeyPathParams
  >({
    url: "/orgs/{org}/actions/secrets/public-key",
    method: "get",
    ...variables,
  });

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useActionsGetOrgPublicKey = (
  variables: ActionsGetOrgPublicKeyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsPublicKey,
      undefined,
      Schemas.ActionsPublicKey
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsPublicKey,
    undefined,
    Schemas.ActionsPublicKey
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/secrets/public-key",
      operationId: "actionsGetOrgPublicKey",
      variables,
    }),
    () => fetchActionsGetOrgPublicKey({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsDeleteOrgSecretPathParams = {
  org: string;
  /*
   * secret_name parameter
   */
  secretName: string;
};

export type ActionsDeleteOrgSecretVariables = {
  pathParams: ActionsDeleteOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const fetchActionsDeleteOrgSecret = (
  variables: ActionsDeleteOrgSecretVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ActionsDeleteOrgSecretPathParams>({
    url: "/orgs/{org}/actions/secrets/{secretName}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useActionsDeleteOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsDeleteOrgSecretVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsDeleteOrgSecretVariables
  >(
    (variables: ActionsDeleteOrgSecretVariables) =>
      fetchActionsDeleteOrgSecret({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsGetOrgSecretPathParams = {
  org: string;
  /*
   * secret_name parameter
   */
  secretName: string;
};

export type ActionsGetOrgSecretVariables = {
  pathParams: ActionsGetOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const fetchActionsGetOrgSecret = (
  variables: ActionsGetOrgSecretVariables
) =>
  githubFetch<
    Schemas.OrganizationActionsSecret,
    undefined,
    {},
    {},
    ActionsGetOrgSecretPathParams
  >({
    url: "/orgs/{org}/actions/secrets/{secretName}",
    method: "get",
    ...variables,
  });

/**
 * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useActionsGetOrgSecret = (
  variables: ActionsGetOrgSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OrganizationActionsSecret,
      undefined,
      Schemas.OrganizationActionsSecret
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.OrganizationActionsSecret,
    undefined,
    Schemas.OrganizationActionsSecret
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/secrets/{secret_name}",
      operationId: "actionsGetOrgSecret",
      variables,
    }),
    () => fetchActionsGetOrgSecret({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsCreateOrUpdateOrgSecretPathParams = {
  org: string;
  /*
   * secret_name parameter
   */
  secretName: string;
};

export type ActionsCreateOrUpdateOrgSecretRequestBody = {
  /*
   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/actions#get-an-organization-public-key) endpoint.
   *
   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
   */
  encrypted_value?: string;
  /*
   * ID of the key you used to encrypt the secret.
   */
  key_id?: string;
  /*
   * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
   */
  selected_repository_ids?: string[];
  /*
   * Configures the access that repositories have to the organization secret. Can be one of:
   * \- `all` - All repositories in an organization can access the secret.
   * \- `private` - Private repositories in an organization can access the secret.
   * \- `selected` - Only specific repositories can access the secret.
   */
  visibility?: "all" | "private" | "selected";
};

export type ActionsCreateOrUpdateOrgSecretVariables = {
  body?: ActionsCreateOrUpdateOrgSecretRequestBody;
  pathParams: ActionsCreateOrUpdateOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to
 * use this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * ```
 * const sodium = require('tweetsodium');
 *
 * const key = "base64-encoded-public-key";
 * const value = "plain-text-secret";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * ```
 *
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const fetchActionsCreateOrUpdateOrgSecret = (
  variables: ActionsCreateOrUpdateOrgSecretVariables
) =>
  githubFetch<
    undefined,
    ActionsCreateOrUpdateOrgSecretRequestBody,
    {},
    {},
    ActionsCreateOrUpdateOrgSecretPathParams
  >({
    url: "/orgs/{org}/actions/secrets/{secretName}",
    method: "put",
    ...variables,
  });

/**
 * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to
 * use this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * ```
 * const sodium = require('tweetsodium');
 *
 * const key = "base64-encoded-public-key";
 * const value = "plain-text-secret";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * ```
 *
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const useActionsCreateOrUpdateOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsCreateOrUpdateOrgSecretVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsCreateOrUpdateOrgSecretVariables
  >(
    (variables: ActionsCreateOrUpdateOrgSecretVariables) =>
      fetchActionsCreateOrUpdateOrgSecret({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsListSelectedReposForOrgSecretPathParams = {
  org: string;
  /*
   * secret_name parameter
   */
  secretName: string;
};

export type ActionsListSelectedReposForOrgSecretQueryParams = {
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type ActionsListSelectedReposForOrgSecretResponse = {
  repositories: Schemas.MinimalRepository[];
  total_count: number;
};

export type ActionsListSelectedReposForOrgSecretVariables = {
  pathParams: ActionsListSelectedReposForOrgSecretPathParams;
  queryParams?: ActionsListSelectedReposForOrgSecretQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const fetchActionsListSelectedReposForOrgSecret = (
  variables: ActionsListSelectedReposForOrgSecretVariables
) =>
  githubFetch<
    ActionsListSelectedReposForOrgSecretResponse,
    undefined,
    {},
    ActionsListSelectedReposForOrgSecretQueryParams,
    ActionsListSelectedReposForOrgSecretPathParams
  >({
    url: "/orgs/{org}/actions/secrets/{secretName}/repositories",
    method: "get",
    ...variables,
  });

/**
 * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useActionsListSelectedReposForOrgSecret = (
  variables: ActionsListSelectedReposForOrgSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListSelectedReposForOrgSecretResponse,
      undefined,
      ActionsListSelectedReposForOrgSecretResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListSelectedReposForOrgSecretResponse,
    undefined,
    ActionsListSelectedReposForOrgSecretResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/actions/secrets/{secret_name}/repositories",
      operationId: "actionsListSelectedReposForOrgSecret",
      variables,
    }),
    () =>
      fetchActionsListSelectedReposForOrgSecret({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsSetSelectedReposForOrgSecretPathParams = {
  org: string;
  /*
   * secret_name parameter
   */
  secretName: string;
};

export type ActionsSetSelectedReposForOrgSecretRequestBody = {
  /*
   * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
   */
  selected_repository_ids?: number[];
};

export type ActionsSetSelectedReposForOrgSecretVariables = {
  body?: ActionsSetSelectedReposForOrgSecretRequestBody;
  pathParams: ActionsSetSelectedReposForOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const fetchActionsSetSelectedReposForOrgSecret = (
  variables: ActionsSetSelectedReposForOrgSecretVariables
) =>
  githubFetch<
    undefined,
    ActionsSetSelectedReposForOrgSecretRequestBody,
    {},
    {},
    ActionsSetSelectedReposForOrgSecretPathParams
  >({
    url: "/orgs/{org}/actions/secrets/{secretName}/repositories",
    method: "put",
    ...variables,
  });

/**
 * Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useActionsSetSelectedReposForOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsSetSelectedReposForOrgSecretVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsSetSelectedReposForOrgSecretVariables
  >(
    (variables: ActionsSetSelectedReposForOrgSecretVariables) =>
      fetchActionsSetSelectedReposForOrgSecret({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsRemoveSelectedRepoFromOrgSecretPathParams = {
  org: string;
  /*
   * secret_name parameter
   */
  secretName: string;
  repositoryId: number;
};

export type ActionsRemoveSelectedRepoFromOrgSecretVariables = {
  pathParams: ActionsRemoveSelectedRepoFromOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const fetchActionsRemoveSelectedRepoFromOrgSecret = (
  variables: ActionsRemoveSelectedRepoFromOrgSecretVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ActionsRemoveSelectedRepoFromOrgSecretPathParams
  >({
    url: "/orgs/{org}/actions/secrets/{secretName}/repositories/{repositoryId}",
    method: "delete",
    ...variables,
  });

/**
 * Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useActionsRemoveSelectedRepoFromOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsRemoveSelectedRepoFromOrgSecretVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsRemoveSelectedRepoFromOrgSecretVariables
  >(
    (variables: ActionsRemoveSelectedRepoFromOrgSecretVariables) =>
      fetchActionsRemoveSelectedRepoFromOrgSecret({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsAddSelectedRepoToOrgSecretPathParams = {
  org: string;
  /*
   * secret_name parameter
   */
  secretName: string;
  repositoryId: number;
};

export type ActionsAddSelectedRepoToOrgSecretVariables = {
  pathParams: ActionsAddSelectedRepoToOrgSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const fetchActionsAddSelectedRepoToOrgSecret = (
  variables: ActionsAddSelectedRepoToOrgSecretVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ActionsAddSelectedRepoToOrgSecretPathParams
  >({
    url: "/orgs/{org}/actions/secrets/{secretName}/repositories/{repositoryId}",
    method: "put",
    ...variables,
  });

/**
 * Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const useActionsAddSelectedRepoToOrgSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsAddSelectedRepoToOrgSecretVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsAddSelectedRepoToOrgSecretVariables
  >(
    (variables: ActionsAddSelectedRepoToOrgSecretVariables) =>
      fetchActionsAddSelectedRepoToOrgSecret({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type OrgsGetAuditLogPathParams = {
  org: string;
};

export type OrgsGetAuditLogQueryParams = {
  /*
   * A search phrase. For more information, see [Searching the audit log](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).
   */
  phrase?: string;
  /*
   * The event types to include:
   *
   * - `web` - returns web (non-Git) events
   * - `git` - returns Git events
   * - `all` - returns both web and Git events
   *
   * The default is `web`.
   */
  include?: "web" | "git" | "all";
  /*
   * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.
   */
  after?: string;
  /*
   * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.
   */
  before?: string;
  /*
   * The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.
   *
   * The default is `desc`.
   */
  order?: "desc" | "asc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsGetAuditLogResponse = Schemas.AuditLogEvent[];

export type OrgsGetAuditLogVariables = {
  pathParams: OrgsGetAuditLogPathParams;
  queryParams?: OrgsGetAuditLogQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The audit log REST API is currently in beta and is subject to change.
 *
 * Gets the audit log for an organization. For more information, see "[Reviewing the audit log for your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization)."
 *
 * To use this endpoint, you must be an organization owner, and you must use an access token with the `admin:org` scope. GitHub Apps must have the `organization_administration` read permission to use this endpoint.
 */
export const fetchOrgsGetAuditLog = (variables: OrgsGetAuditLogVariables) =>
  githubFetch<
    OrgsGetAuditLogResponse,
    undefined,
    {},
    OrgsGetAuditLogQueryParams,
    OrgsGetAuditLogPathParams
  >({ url: "/orgs/{org}/audit-log", method: "get", ...variables });

/**
 * **Note:** The audit log REST API is currently in beta and is subject to change.
 *
 * Gets the audit log for an organization. For more information, see "[Reviewing the audit log for your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization)."
 *
 * To use this endpoint, you must be an organization owner, and you must use an access token with the `admin:org` scope. GitHub Apps must have the `organization_administration` read permission to use this endpoint.
 */
export const useOrgsGetAuditLog = (
  variables: OrgsGetAuditLogVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsGetAuditLogResponse,
      undefined,
      OrgsGetAuditLogResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsGetAuditLogResponse,
    undefined,
    OrgsGetAuditLogResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/audit-log",
      operationId: "orgsGetAuditLog",
      variables,
    }),
    () => fetchOrgsGetAuditLog({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsListBlockedUsersPathParams = {
  org: string;
};

export type OrgsListBlockedUsersResponse = Schemas.SimpleUser[];

export type OrgsListBlockedUsersVariables = {
  pathParams: OrgsListBlockedUsersPathParams;
} & GithubContext["fetcherOptions"];

/**
 * List the users blocked by an organization.
 */
export const fetchOrgsListBlockedUsers = (
  variables: OrgsListBlockedUsersVariables
) =>
  githubFetch<
    OrgsListBlockedUsersResponse,
    undefined,
    {},
    {},
    OrgsListBlockedUsersPathParams
  >({ url: "/orgs/{org}/blocks", method: "get", ...variables });

/**
 * List the users blocked by an organization.
 */
export const useOrgsListBlockedUsers = (
  variables: OrgsListBlockedUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListBlockedUsersResponse,
      Responses.PreviewHeaderMissing,
      OrgsListBlockedUsersResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListBlockedUsersResponse,
    Responses.PreviewHeaderMissing,
    OrgsListBlockedUsersResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/blocks",
      operationId: "orgsListBlockedUsers",
      variables,
    }),
    () => fetchOrgsListBlockedUsers({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsUnblockUserPathParams = {
  org: string;
  username: string;
};

export type OrgsUnblockUserVariables = {
  pathParams: OrgsUnblockUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsUnblockUser = (variables: OrgsUnblockUserVariables) =>
  githubFetch<undefined, undefined, {}, {}, OrgsUnblockUserPathParams>({
    url: "/orgs/{org}/blocks/{username}",
    method: "delete",
    ...variables,
  });

export const useOrgsUnblockUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      OrgsUnblockUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<undefined, undefined, OrgsUnblockUserVariables>(
    (variables: OrgsUnblockUserVariables) =>
      fetchOrgsUnblockUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrgsCheckBlockedUserPathParams = {
  org: string;
  username: string;
};

export type OrgsCheckBlockedUserVariables = {
  pathParams: OrgsCheckBlockedUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsCheckBlockedUser = (
  variables: OrgsCheckBlockedUserVariables
) =>
  githubFetch<undefined, undefined, {}, {}, OrgsCheckBlockedUserPathParams>({
    url: "/orgs/{org}/blocks/{username}",
    method: "get",
    ...variables,
  });

export const useOrgsCheckBlockedUser = (
  variables: OrgsCheckBlockedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, Schemas.BasicError, undefined>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, Schemas.BasicError, undefined>(
    queryKeyFn({
      path: "/orgs/{org}/blocks/{username}",
      operationId: "orgsCheckBlockedUser",
      variables,
    }),
    () => fetchOrgsCheckBlockedUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsBlockUserPathParams = {
  org: string;
  username: string;
};

export type OrgsBlockUserVariables = {
  pathParams: OrgsBlockUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsBlockUser = (variables: OrgsBlockUserVariables) =>
  githubFetch<undefined, undefined, {}, {}, OrgsBlockUserPathParams>({
    url: "/orgs/{org}/blocks/{username}",
    method: "put",
    ...variables,
  });

export const useOrgsBlockUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.ValidationFailed,
      OrgsBlockUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.ValidationFailed,
    OrgsBlockUserVariables
  >(
    (variables: OrgsBlockUserVariables) =>
      fetchOrgsBlockUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrgsListSamlSsoAuthorizationsPathParams = {
  org: string;
};

export type OrgsListSamlSsoAuthorizationsResponse =
  Schemas.CredentialAuthorization[];

export type OrgsListSamlSsoAuthorizationsVariables = {
  pathParams: OrgsListSamlSsoAuthorizationsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).
 *
 * An authenticated organization owner with the `read:org` scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://help.github.com/en/articles/about-authentication-with-saml-single-sign-on).
 */
export const fetchOrgsListSamlSsoAuthorizations = (
  variables: OrgsListSamlSsoAuthorizationsVariables
) =>
  githubFetch<
    OrgsListSamlSsoAuthorizationsResponse,
    undefined,
    {},
    {},
    OrgsListSamlSsoAuthorizationsPathParams
  >({
    url: "/orgs/{org}/credential-authorizations",
    method: "get",
    ...variables,
  });

/**
 * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).
 *
 * An authenticated organization owner with the `read:org` scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://help.github.com/en/articles/about-authentication-with-saml-single-sign-on).
 */
export const useOrgsListSamlSsoAuthorizations = (
  variables: OrgsListSamlSsoAuthorizationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListSamlSsoAuthorizationsResponse,
      undefined,
      OrgsListSamlSsoAuthorizationsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListSamlSsoAuthorizationsResponse,
    undefined,
    OrgsListSamlSsoAuthorizationsResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/credential-authorizations",
      operationId: "orgsListSamlSsoAuthorizations",
      variables,
    }),
    () =>
      fetchOrgsListSamlSsoAuthorizations({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsRemoveSamlSsoAuthorizationPathParams = {
  org: string;
  credentialId: number;
};

export type OrgsRemoveSamlSsoAuthorizationVariables = {
  pathParams: OrgsRemoveSamlSsoAuthorizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).
 *
 * An authenticated organization owner with the `admin:org` scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone's credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.
 */
export const fetchOrgsRemoveSamlSsoAuthorization = (
  variables: OrgsRemoveSamlSsoAuthorizationVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    OrgsRemoveSamlSsoAuthorizationPathParams
  >({
    url: "/orgs/{org}/credential-authorizations/{credentialId}",
    method: "delete",
    ...variables,
  });

/**
 * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).
 *
 * An authenticated organization owner with the `admin:org` scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone's credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.
 */
export const useOrgsRemoveSamlSsoAuthorization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotFound,
      OrgsRemoveSamlSsoAuthorizationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotFound,
    OrgsRemoveSamlSsoAuthorizationVariables
  >(
    (variables: OrgsRemoveSamlSsoAuthorizationVariables) =>
      fetchOrgsRemoveSamlSsoAuthorization({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActivityListPublicOrgEventsPathParams = {
  org: string;
};

export type ActivityListPublicOrgEventsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListPublicOrgEventsResponse = Schemas.Event[];

export type ActivityListPublicOrgEventsVariables = {
  pathParams: ActivityListPublicOrgEventsPathParams;
  queryParams?: ActivityListPublicOrgEventsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityListPublicOrgEvents = (
  variables: ActivityListPublicOrgEventsVariables
) =>
  githubFetch<
    ActivityListPublicOrgEventsResponse,
    undefined,
    {},
    ActivityListPublicOrgEventsQueryParams,
    ActivityListPublicOrgEventsPathParams
  >({ url: "/orgs/{org}/events", method: "get", ...variables });

export const useActivityListPublicOrgEvents = (
  variables: ActivityListPublicOrgEventsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListPublicOrgEventsResponse,
      undefined,
      ActivityListPublicOrgEventsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListPublicOrgEventsResponse,
    undefined,
    ActivityListPublicOrgEventsResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/events",
      operationId: "activityListPublicOrgEvents",
      variables,
    }),
    () => fetchActivityListPublicOrgEvents({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsListFailedInvitationsPathParams = {
  org: string;
};

export type OrgsListFailedInvitationsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListFailedInvitationsResponse =
  Schemas.OrganizationInvitation[];

export type OrgsListFailedInvitationsVariables = {
  pathParams: OrgsListFailedInvitationsPathParams;
  queryParams?: OrgsListFailedInvitationsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.
 */
export const fetchOrgsListFailedInvitations = (
  variables: OrgsListFailedInvitationsVariables
) =>
  githubFetch<
    OrgsListFailedInvitationsResponse,
    undefined,
    {},
    OrgsListFailedInvitationsQueryParams,
    OrgsListFailedInvitationsPathParams
  >({ url: "/orgs/{org}/failed_invitations", method: "get", ...variables });

/**
 * The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.
 */
export const useOrgsListFailedInvitations = (
  variables: OrgsListFailedInvitationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListFailedInvitationsResponse,
      Responses.NotFound,
      OrgsListFailedInvitationsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListFailedInvitationsResponse,
    Responses.NotFound,
    OrgsListFailedInvitationsResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/failed_invitations",
      operationId: "orgsListFailedInvitations",
      variables,
    }),
    () => fetchOrgsListFailedInvitations({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsListWebhooksPathParams = {
  org: string;
};

export type OrgsListWebhooksQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListWebhooksResponse = Schemas.OrgHook[];

export type OrgsListWebhooksVariables = {
  pathParams: OrgsListWebhooksPathParams;
  queryParams?: OrgsListWebhooksQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsListWebhooks = (variables: OrgsListWebhooksVariables) =>
  githubFetch<
    OrgsListWebhooksResponse,
    undefined,
    {},
    OrgsListWebhooksQueryParams,
    OrgsListWebhooksPathParams
  >({ url: "/orgs/{org}/hooks", method: "get", ...variables });

export const useOrgsListWebhooks = (
  variables: OrgsListWebhooksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListWebhooksResponse,
      Responses.NotFound,
      OrgsListWebhooksResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListWebhooksResponse,
    Responses.NotFound,
    OrgsListWebhooksResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/hooks",
      operationId: "orgsListWebhooks",
      variables,
    }),
    () => fetchOrgsListWebhooks({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsCreateWebhookPathParams = {
  org: string;
};

export type OrgsCreateWebhookRequestBody = {
  /*
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   *
   * @default true
   */
  active?: boolean;
  /*
   * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#create-hook-config-params).
   */
  config: {
    content_type?: Schemas.WebhookConfigContentType;
    insecure_ssl?: Schemas.WebhookConfigInsecureSsl;
    /*
     * @example "password"
     */
    password?: string;
    secret?: Schemas.WebhookConfigSecret;
    url: Schemas.WebhookConfigUrl;
    /*
     * @example "kdaigle"
     */
    username?: string;
  };
  /*
   * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
   *
   * @default push
   */
  events?: string[];
  /*
   * Must be passed as "web".
   */
  name: string;
};

export type OrgsCreateWebhookVariables = {
  body: OrgsCreateWebhookRequestBody;
  pathParams: OrgsCreateWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Here's how you can create a hook that posts payloads in JSON format:
 */
export const fetchOrgsCreateWebhook = (variables: OrgsCreateWebhookVariables) =>
  githubFetch<
    Schemas.OrgHook,
    OrgsCreateWebhookRequestBody,
    {},
    {},
    OrgsCreateWebhookPathParams
  >({ url: "/orgs/{org}/hooks", method: "post", ...variables });

/**
 * Here's how you can create a hook that posts payloads in JSON format:
 */
export const useOrgsCreateWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrgHook,
      Responses.NotFound | Responses.ValidationFailed,
      OrgsCreateWebhookVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.OrgHook,
    Responses.NotFound | Responses.ValidationFailed,
    OrgsCreateWebhookVariables
  >(
    (variables: OrgsCreateWebhookVariables) =>
      fetchOrgsCreateWebhook({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrgsDeleteWebhookPathParams = {
  org: string;
  hookId: number;
};

export type OrgsDeleteWebhookVariables = {
  pathParams: OrgsDeleteWebhookPathParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsDeleteWebhook = (variables: OrgsDeleteWebhookVariables) =>
  githubFetch<undefined, undefined, {}, {}, OrgsDeleteWebhookPathParams>({
    url: "/orgs/{org}/hooks/{hookId}",
    method: "delete",
    ...variables,
  });

export const useOrgsDeleteWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotFound,
      OrgsDeleteWebhookVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotFound,
    OrgsDeleteWebhookVariables
  >(
    (variables: OrgsDeleteWebhookVariables) =>
      fetchOrgsDeleteWebhook({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrgsGetWebhookPathParams = {
  org: string;
  hookId: number;
};

export type OrgsGetWebhookVariables = {
  pathParams: OrgsGetWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)."
 */
export const fetchOrgsGetWebhook = (variables: OrgsGetWebhookVariables) =>
  githubFetch<Schemas.OrgHook, undefined, {}, {}, OrgsGetWebhookPathParams>({
    url: "/orgs/{org}/hooks/{hookId}",
    method: "get",
    ...variables,
  });

/**
 * Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)."
 */
export const useOrgsGetWebhook = (
  variables: OrgsGetWebhookVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OrgHook,
      Responses.NotFound,
      Schemas.OrgHook
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.OrgHook,
    Responses.NotFound,
    Schemas.OrgHook
  >(
    queryKeyFn({
      path: "/orgs/{org}/hooks/{hook_id}",
      operationId: "orgsGetWebhook",
      variables,
    }),
    () => fetchOrgsGetWebhook({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsUpdateWebhookPathParams = {
  org: string;
  hookId: number;
};

export type OrgsUpdateWebhookRequestBody = {
  /*
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   *
   * @default true
   */
  active?: boolean;
  /*
   * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#update-hook-config-params).
   */
  config?: {
    content_type?: Schemas.WebhookConfigContentType;
    insecure_ssl?: Schemas.WebhookConfigInsecureSsl;
    secret?: Schemas.WebhookConfigSecret;
    url: Schemas.WebhookConfigUrl;
  };
  /*
   * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
   *
   * @default push
   */
  events?: string[];
  /*
   * @example "web"
   */
  name?: string;
};

export type OrgsUpdateWebhookVariables = {
  body?: OrgsUpdateWebhookRequestBody;
  pathParams: OrgsUpdateWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)."
 */
export const fetchOrgsUpdateWebhook = (variables: OrgsUpdateWebhookVariables) =>
  githubFetch<
    Schemas.OrgHook,
    OrgsUpdateWebhookRequestBody,
    {},
    {},
    OrgsUpdateWebhookPathParams
  >({ url: "/orgs/{org}/hooks/{hookId}", method: "patch", ...variables });

/**
 * Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)."
 */
export const useOrgsUpdateWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrgHook,
      Responses.NotFound | Responses.ValidationFailed,
      OrgsUpdateWebhookVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.OrgHook,
    Responses.NotFound | Responses.ValidationFailed,
    OrgsUpdateWebhookVariables
  >(
    (variables: OrgsUpdateWebhookVariables) =>
      fetchOrgsUpdateWebhook({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrgsGetWebhookConfigForOrgPathParams = {
  org: string;
  hookId: number;
};

export type OrgsGetWebhookConfigForOrgVariables = {
  pathParams: OrgsGetWebhookConfigForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)."
 *
 * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
 */
export const fetchOrgsGetWebhookConfigForOrg = (
  variables: OrgsGetWebhookConfigForOrgVariables
) =>
  githubFetch<
    Schemas.WebhookConfig,
    undefined,
    {},
    {},
    OrgsGetWebhookConfigForOrgPathParams
  >({ url: "/orgs/{org}/hooks/{hookId}/config", method: "get", ...variables });

/**
 * Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)."
 *
 * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
 */
export const useOrgsGetWebhookConfigForOrg = (
  variables: OrgsGetWebhookConfigForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WebhookConfig,
      undefined,
      Schemas.WebhookConfig
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.WebhookConfig,
    undefined,
    Schemas.WebhookConfig
  >(
    queryKeyFn({
      path: "/orgs/{org}/hooks/{hook_id}/config",
      operationId: "orgsGetWebhookConfigForOrg",
      variables,
    }),
    () => fetchOrgsGetWebhookConfigForOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsUpdateWebhookConfigForOrgPathParams = {
  org: string;
  hookId: number;
};

export type OrgsUpdateWebhookConfigForOrgRequestBody = {
  content_type?: Schemas.WebhookConfigContentType;
  insecure_ssl?: Schemas.WebhookConfigInsecureSsl;
  secret?: Schemas.WebhookConfigSecret;
  url?: Schemas.WebhookConfigUrl;
};

export type OrgsUpdateWebhookConfigForOrgVariables = {
  body?: OrgsUpdateWebhookConfigForOrgRequestBody;
  pathParams: OrgsUpdateWebhookConfigForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook)."
 *
 * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.
 */
export const fetchOrgsUpdateWebhookConfigForOrg = (
  variables: OrgsUpdateWebhookConfigForOrgVariables
) =>
  githubFetch<
    Schemas.WebhookConfig,
    OrgsUpdateWebhookConfigForOrgRequestBody,
    {},
    {},
    OrgsUpdateWebhookConfigForOrgPathParams
  >({
    url: "/orgs/{org}/hooks/{hookId}/config",
    method: "patch",
    ...variables,
  });

/**
 * Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook)."
 *
 * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.
 */
export const useOrgsUpdateWebhookConfigForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.WebhookConfig,
      undefined,
      OrgsUpdateWebhookConfigForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.WebhookConfig,
    undefined,
    OrgsUpdateWebhookConfigForOrgVariables
  >(
    (variables: OrgsUpdateWebhookConfigForOrgVariables) =>
      fetchOrgsUpdateWebhookConfigForOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrgsPingWebhookPathParams = {
  org: string;
  hookId: number;
};

export type OrgsPingWebhookVariables = {
  pathParams: OrgsPingWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
 */
export const fetchOrgsPingWebhook = (variables: OrgsPingWebhookVariables) =>
  githubFetch<undefined, undefined, {}, {}, OrgsPingWebhookPathParams>({
    url: "/orgs/{org}/hooks/{hookId}/pings",
    method: "post",
    ...variables,
  });

/**
 * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
 */
export const useOrgsPingWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotFound,
      OrgsPingWebhookVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotFound,
    OrgsPingWebhookVariables
  >(
    (variables: OrgsPingWebhookVariables) =>
      fetchOrgsPingWebhook({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsGetOrgInstallationPathParams = {
  org: string;
};

export type AppsGetOrgInstallationVariables = {
  pathParams: AppsGetOrgInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables an authenticated GitHub App to find the organization's installation information.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsGetOrgInstallation = (
  variables: AppsGetOrgInstallationVariables
) =>
  githubFetch<
    Schemas.Installation,
    undefined,
    {},
    {},
    AppsGetOrgInstallationPathParams
  >({ url: "/orgs/{org}/installation", method: "get", ...variables });

/**
 * Enables an authenticated GitHub App to find the organization's installation information.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsGetOrgInstallation = (
  variables: AppsGetOrgInstallationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Installation,
      undefined,
      Schemas.Installation
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Installation,
    undefined,
    Schemas.Installation
  >(
    queryKeyFn({
      path: "/orgs/{org}/installation",
      operationId: "appsGetOrgInstallation",
      variables,
    }),
    () => fetchAppsGetOrgInstallation({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsListAppInstallationsPathParams = {
  org: string;
};

export type OrgsListAppInstallationsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListAppInstallationsResponse = {
  installations: Schemas.Installation[];
  total_count: number;
};

export type OrgsListAppInstallationsVariables = {
  pathParams: OrgsListAppInstallationsPathParams;
  queryParams?: OrgsListAppInstallationsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.
 */
export const fetchOrgsListAppInstallations = (
  variables: OrgsListAppInstallationsVariables
) =>
  githubFetch<
    OrgsListAppInstallationsResponse,
    undefined,
    {},
    OrgsListAppInstallationsQueryParams,
    OrgsListAppInstallationsPathParams
  >({ url: "/orgs/{org}/installations", method: "get", ...variables });

/**
 * Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.
 */
export const useOrgsListAppInstallations = (
  variables: OrgsListAppInstallationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListAppInstallationsResponse,
      undefined,
      OrgsListAppInstallationsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListAppInstallationsResponse,
    undefined,
    OrgsListAppInstallationsResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/installations",
      operationId: "orgsListAppInstallations",
      variables,
    }),
    () => fetchOrgsListAppInstallations({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type InteractionsRemoveRestrictionsForOrgPathParams = {
  org: string;
};

export type InteractionsRemoveRestrictionsForOrgVariables = {
  pathParams: InteractionsRemoveRestrictionsForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
 */
export const fetchInteractionsRemoveRestrictionsForOrg = (
  variables: InteractionsRemoveRestrictionsForOrgVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    InteractionsRemoveRestrictionsForOrgPathParams
  >({ url: "/orgs/{org}/interaction-limits", method: "delete", ...variables });

/**
 * Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
 */
export const useInteractionsRemoveRestrictionsForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      InteractionsRemoveRestrictionsForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    InteractionsRemoveRestrictionsForOrgVariables
  >(
    (variables: InteractionsRemoveRestrictionsForOrgVariables) =>
      fetchInteractionsRemoveRestrictionsForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type InteractionsGetRestrictionsForOrgPathParams = {
  org: string;
};

export type InteractionsGetRestrictionsForOrgVariables = {
  pathParams: InteractionsGetRestrictionsForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
 */
export const fetchInteractionsGetRestrictionsForOrg = (
  variables: InteractionsGetRestrictionsForOrgVariables
) =>
  githubFetch<
    Schemas.InteractionLimitResponse,
    undefined,
    {},
    {},
    InteractionsGetRestrictionsForOrgPathParams
  >({ url: "/orgs/{org}/interaction-limits", method: "get", ...variables });

/**
 * Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
 */
export const useInteractionsGetRestrictionsForOrg = (
  variables: InteractionsGetRestrictionsForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.InteractionLimitResponse,
      undefined,
      Schemas.InteractionLimitResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.InteractionLimitResponse,
    undefined,
    Schemas.InteractionLimitResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/interaction-limits",
      operationId: "interactionsGetRestrictionsForOrg",
      variables,
    }),
    () =>
      fetchInteractionsGetRestrictionsForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type InteractionsSetRestrictionsForOrgPathParams = {
  org: string;
};

export type InteractionsSetRestrictionsForOrgVariables = {
  body: Schemas.InteractionLimit;
  pathParams: InteractionsSetRestrictionsForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
 */
export const fetchInteractionsSetRestrictionsForOrg = (
  variables: InteractionsSetRestrictionsForOrgVariables
) =>
  githubFetch<
    Schemas.InteractionLimitResponse,
    Schemas.InteractionLimit,
    {},
    {},
    InteractionsSetRestrictionsForOrgPathParams
  >({ url: "/orgs/{org}/interaction-limits", method: "put", ...variables });

/**
 * Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
 */
export const useInteractionsSetRestrictionsForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.InteractionLimitResponse,
      Responses.ValidationFailed,
      InteractionsSetRestrictionsForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.InteractionLimitResponse,
    Responses.ValidationFailed,
    InteractionsSetRestrictionsForOrgVariables
  >(
    (variables: InteractionsSetRestrictionsForOrgVariables) =>
      fetchInteractionsSetRestrictionsForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type OrgsListPendingInvitationsPathParams = {
  org: string;
};

export type OrgsListPendingInvitationsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListPendingInvitationsResponse =
  Schemas.OrganizationInvitation[];

export type OrgsListPendingInvitationsVariables = {
  pathParams: OrgsListPendingInvitationsPathParams;
  queryParams?: OrgsListPendingInvitationsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 */
export const fetchOrgsListPendingInvitations = (
  variables: OrgsListPendingInvitationsVariables
) =>
  githubFetch<
    OrgsListPendingInvitationsResponse,
    undefined,
    {},
    OrgsListPendingInvitationsQueryParams,
    OrgsListPendingInvitationsPathParams
  >({ url: "/orgs/{org}/invitations", method: "get", ...variables });

/**
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 */
export const useOrgsListPendingInvitations = (
  variables: OrgsListPendingInvitationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListPendingInvitationsResponse,
      Responses.NotFound,
      OrgsListPendingInvitationsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListPendingInvitationsResponse,
    Responses.NotFound,
    OrgsListPendingInvitationsResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/invitations",
      operationId: "orgsListPendingInvitations",
      variables,
    }),
    () => fetchOrgsListPendingInvitations({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsCreateInvitationPathParams = {
  org: string;
};

export type OrgsCreateInvitationRequestBody = {
  /*
   * **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.
   */
  email?: string;
  /*
   * **Required unless you provide `email`**. GitHub user ID for the person you are inviting.
   */
  invitee_id?: number;
  /*
   * Specify role for new member. Can be one of:
   * \* `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.
   * \* `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.
   * \* `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.
   *
   * @default direct_member
   */
  role?: "admin" | "direct_member" | "billing_manager";
  /*
   * Specify IDs for the teams you want to invite new members to.
   */
  team_ids?: number[];
};

export type OrgsCreateInvitationVariables = {
  body?: OrgsCreateInvitationRequestBody;
  pathParams: OrgsCreateInvitationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const fetchOrgsCreateInvitation = (
  variables: OrgsCreateInvitationVariables
) =>
  githubFetch<
    Schemas.OrganizationInvitation,
    OrgsCreateInvitationRequestBody,
    {},
    {},
    OrgsCreateInvitationPathParams
  >({ url: "/orgs/{org}/invitations", method: "post", ...variables });

/**
 * Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const useOrgsCreateInvitation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrganizationInvitation,
      Responses.NotFound | Responses.ValidationFailed,
      OrgsCreateInvitationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.OrganizationInvitation,
    Responses.NotFound | Responses.ValidationFailed,
    OrgsCreateInvitationVariables
  >(
    (variables: OrgsCreateInvitationVariables) =>
      fetchOrgsCreateInvitation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrgsCancelInvitationPathParams = {
  org: string;
  /*
   * invitation_id parameter
   */
  invitationId: number;
};

export type OrgsCancelInvitationVariables = {
  pathParams: OrgsCancelInvitationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 */
export const fetchOrgsCancelInvitation = (
  variables: OrgsCancelInvitationVariables
) =>
  githubFetch<undefined, undefined, {}, {}, OrgsCancelInvitationPathParams>({
    url: "/orgs/{org}/invitations/{invitationId}",
    method: "delete",
    ...variables,
  });

/**
 * Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 */
export const useOrgsCancelInvitation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotFound | Responses.ValidationFailed,
      OrgsCancelInvitationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotFound | Responses.ValidationFailed,
    OrgsCancelInvitationVariables
  >(
    (variables: OrgsCancelInvitationVariables) =>
      fetchOrgsCancelInvitation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrgsListInvitationTeamsPathParams = {
  org: string;
  /*
   * invitation_id parameter
   */
  invitationId: number;
};

export type OrgsListInvitationTeamsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListInvitationTeamsResponse = Schemas.Team[];

export type OrgsListInvitationTeamsVariables = {
  pathParams: OrgsListInvitationTeamsPathParams;
  queryParams?: OrgsListInvitationTeamsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
 */
export const fetchOrgsListInvitationTeams = (
  variables: OrgsListInvitationTeamsVariables
) =>
  githubFetch<
    OrgsListInvitationTeamsResponse,
    undefined,
    {},
    OrgsListInvitationTeamsQueryParams,
    OrgsListInvitationTeamsPathParams
  >({
    url: "/orgs/{org}/invitations/{invitationId}/teams",
    method: "get",
    ...variables,
  });

/**
 * List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
 */
export const useOrgsListInvitationTeams = (
  variables: OrgsListInvitationTeamsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListInvitationTeamsResponse,
      Responses.NotFound,
      OrgsListInvitationTeamsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListInvitationTeamsResponse,
    Responses.NotFound,
    OrgsListInvitationTeamsResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/invitations/{invitation_id}/teams",
      operationId: "orgsListInvitationTeams",
      variables,
    }),
    () => fetchOrgsListInvitationTeams({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesListForOrgPathParams = {
  org: string;
};

export type IssuesListForOrgQueryParams = {
  /*
   * Indicates which sorts of issues to return. Can be one of:
   * \* `assigned`: Issues assigned to you
   * \* `created`: Issues created by you
   * \* `mentioned`: Issues mentioning you
   * \* `subscribed`: Issues you're subscribed to updates for
   * \* `all`: All issues the authenticated user can see, regardless of participation or creation
   *
   * @default assigned
   */
  filter?:
    | "assigned"
    | "created"
    | "mentioned"
    | "subscribed"
    | "repos"
    | "all";
  /*
   * Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /*
   * A list of comma separated label names. Example: `bug,ui,@high`
   */
  labels?: string;
  /*
   * What to sort results by. Can be either `created`, `updated`, `comments`.
   *
   * @default created
   */
  sort?: "created" | "updated" | "comments";
  /*
   * One of `asc` (ascending) or `desc` (descending).
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListForOrgResponse = Schemas.Issue[];

export type IssuesListForOrgVariables = {
  pathParams: IssuesListForOrgPathParams;
  queryParams?: IssuesListForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List issues in an organization assigned to the authenticated user.
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const fetchIssuesListForOrg = (variables: IssuesListForOrgVariables) =>
  githubFetch<
    IssuesListForOrgResponse,
    undefined,
    {},
    IssuesListForOrgQueryParams,
    IssuesListForOrgPathParams
  >({ url: "/orgs/{org}/issues", method: "get", ...variables });

/**
 * List issues in an organization assigned to the authenticated user.
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const useIssuesListForOrg = (
  variables: IssuesListForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListForOrgResponse,
      Responses.NotFound,
      IssuesListForOrgResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListForOrgResponse,
    Responses.NotFound,
    IssuesListForOrgResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/issues",
      operationId: "issuesListForOrg",
      variables,
    }),
    () => fetchIssuesListForOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsListMembersPathParams = {
  org: string;
};

export type OrgsListMembersQueryParams = {
  /*
   * Filter members returned in the list. Can be one of:
   * \* `2fa_disabled` - Members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled. Available for organization owners.
   * \* `all` - All members the authenticated user can see.
   *
   * @default all
   */
  filter?: "2fa_disabled" | "all";
  /*
   * Filter members returned by their role. Can be one of:
   * \* `all` - All members of the organization, regardless of role.
   * \* `admin` - Organization owners.
   * \* `member` - Non-owner organization members.
   *
   * @default all
   */
  role?: "all" | "admin" | "member";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListMembersResponse = Schemas.SimpleUser[];

export type OrgsListMembersVariables = {
  pathParams: OrgsListMembersPathParams;
  queryParams?: OrgsListMembersQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
 */
export const fetchOrgsListMembers = (variables: OrgsListMembersVariables) =>
  githubFetch<
    OrgsListMembersResponse,
    undefined,
    {},
    OrgsListMembersQueryParams,
    OrgsListMembersPathParams
  >({ url: "/orgs/{org}/members", method: "get", ...variables });

/**
 * List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
 */
export const useOrgsListMembers = (
  variables: OrgsListMembersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListMembersResponse,
      Responses.ValidationFailed,
      OrgsListMembersResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListMembersResponse,
    Responses.ValidationFailed,
    OrgsListMembersResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/members",
      operationId: "orgsListMembers",
      variables,
    }),
    () => fetchOrgsListMembers({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsRemoveMemberPathParams = {
  org: string;
  username: string;
};

export type OrgsRemoveMemberVariables = {
  pathParams: OrgsRemoveMemberPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
 */
export const fetchOrgsRemoveMember = (variables: OrgsRemoveMemberVariables) =>
  githubFetch<undefined, undefined, {}, {}, OrgsRemoveMemberPathParams>({
    url: "/orgs/{org}/members/{username}",
    method: "delete",
    ...variables,
  });

/**
 * Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
 */
export const useOrgsRemoveMember = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.Forbidden,
      OrgsRemoveMemberVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.Forbidden,
    OrgsRemoveMemberVariables
  >(
    (variables: OrgsRemoveMemberVariables) =>
      fetchOrgsRemoveMember({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrgsCheckMembershipForUserPathParams = {
  org: string;
  username: string;
};

export type OrgsCheckMembershipForUserVariables = {
  pathParams: OrgsCheckMembershipForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Check if a user is, publicly or privately, a member of the organization.
 */
export const fetchOrgsCheckMembershipForUser = (
  variables: OrgsCheckMembershipForUserVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    OrgsCheckMembershipForUserPathParams
  >({ url: "/orgs/{org}/members/{username}", method: "get", ...variables });

/**
 * Check if a user is, publicly or privately, a member of the organization.
 */
export const useOrgsCheckMembershipForUser = (
  variables: OrgsCheckMembershipForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, undefined, undefined>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, undefined, undefined>(
    queryKeyFn({
      path: "/orgs/{org}/members/{username}",
      operationId: "orgsCheckMembershipForUser",
      variables,
    }),
    () => fetchOrgsCheckMembershipForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsRemoveMembershipForUserPathParams = {
  org: string;
  username: string;
};

export type OrgsRemoveMembershipForUserVariables = {
  pathParams: OrgsRemoveMembershipForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
 *
 * If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
 */
export const fetchOrgsRemoveMembershipForUser = (
  variables: OrgsRemoveMembershipForUserVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    OrgsRemoveMembershipForUserPathParams
  >({
    url: "/orgs/{org}/memberships/{username}",
    method: "delete",
    ...variables,
  });

/**
 * In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
 *
 * If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
 */
export const useOrgsRemoveMembershipForUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.Forbidden | Responses.NotFound,
      OrgsRemoveMembershipForUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.Forbidden | Responses.NotFound,
    OrgsRemoveMembershipForUserVariables
  >(
    (variables: OrgsRemoveMembershipForUserVariables) =>
      fetchOrgsRemoveMembershipForUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrgsGetMembershipForUserPathParams = {
  org: string;
  username: string;
};

export type OrgsGetMembershipForUserVariables = {
  pathParams: OrgsGetMembershipForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * In order to get a user's membership with an organization, the authenticated user must be an organization member.
 */
export const fetchOrgsGetMembershipForUser = (
  variables: OrgsGetMembershipForUserVariables
) =>
  githubFetch<
    Schemas.OrgMembership,
    undefined,
    {},
    {},
    OrgsGetMembershipForUserPathParams
  >({ url: "/orgs/{org}/memberships/{username}", method: "get", ...variables });

/**
 * In order to get a user's membership with an organization, the authenticated user must be an organization member.
 */
export const useOrgsGetMembershipForUser = (
  variables: OrgsGetMembershipForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OrgMembership,
      Responses.Forbidden | Responses.NotFound,
      Schemas.OrgMembership
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.OrgMembership,
    Responses.Forbidden | Responses.NotFound,
    Schemas.OrgMembership
  >(
    queryKeyFn({
      path: "/orgs/{org}/memberships/{username}",
      operationId: "orgsGetMembershipForUser",
      variables,
    }),
    () => fetchOrgsGetMembershipForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsSetMembershipForUserPathParams = {
  org: string;
  username: string;
};

export type OrgsSetMembershipForUserRequestBody = {
  /*
   * The role to give the user in the organization. Can be one of:
   * \* `admin` - The user will become an owner of the organization.
   * \* `member` - The user will become a non-owner member of the organization.
   *
   * @default member
   */
  role?: "admin" | "member";
};

export type OrgsSetMembershipForUserVariables = {
  body?: OrgsSetMembershipForUserRequestBody;
  pathParams: OrgsSetMembershipForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Only authenticated organization owners can add a member to the organization or update the member's role.
 *
 * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
 *
 * *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
 *
 * **Rate limits**
 *
 * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
 */
export const fetchOrgsSetMembershipForUser = (
  variables: OrgsSetMembershipForUserVariables
) =>
  githubFetch<
    Schemas.OrgMembership,
    OrgsSetMembershipForUserRequestBody,
    {},
    {},
    OrgsSetMembershipForUserPathParams
  >({ url: "/orgs/{org}/memberships/{username}", method: "put", ...variables });

/**
 * Only authenticated organization owners can add a member to the organization or update the member's role.
 *
 * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
 *
 * *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
 *
 * **Rate limits**
 *
 * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
 */
export const useOrgsSetMembershipForUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrgMembership,
      Responses.Forbidden | Responses.ValidationFailed,
      OrgsSetMembershipForUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.OrgMembership,
    Responses.Forbidden | Responses.ValidationFailed,
    OrgsSetMembershipForUserVariables
  >(
    (variables: OrgsSetMembershipForUserVariables) =>
      fetchOrgsSetMembershipForUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type MigrationsListForOrgPathParams = {
  org: string;
};

export type MigrationsListForOrgQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Exclude attributes from the API response to improve performance
   */
  exclude?: "repositories"[];
};

export type MigrationsListForOrgResponse = Schemas.Migration[];

export type MigrationsListForOrgVariables = {
  pathParams: MigrationsListForOrgPathParams;
  queryParams?: MigrationsListForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the most recent migrations.
 */
export const fetchMigrationsListForOrg = (
  variables: MigrationsListForOrgVariables
) =>
  githubFetch<
    MigrationsListForOrgResponse,
    undefined,
    {},
    MigrationsListForOrgQueryParams,
    MigrationsListForOrgPathParams
  >({ url: "/orgs/{org}/migrations", method: "get", ...variables });

/**
 * Lists the most recent migrations.
 */
export const useMigrationsListForOrg = (
  variables: MigrationsListForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MigrationsListForOrgResponse,
      undefined,
      MigrationsListForOrgResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    MigrationsListForOrgResponse,
    undefined,
    MigrationsListForOrgResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/migrations",
      operationId: "migrationsListForOrg",
      variables,
    }),
    () => fetchMigrationsListForOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MigrationsStartForOrgPathParams = {
  org: string;
};

export type MigrationsStartForOrgRequestBody = {
  exclude?: string[];
  /*
   * Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
   *
   * @default false
   */
  exclude_attachments?: boolean;
  /*
   * Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
   *
   * @default false
   */
  lock_repositories?: boolean;
  /*
   * A list of arrays indicating which repositories should be migrated.
   */
  repositories: string[];
};

export type MigrationsStartForOrgVariables = {
  body: MigrationsStartForOrgRequestBody;
  pathParams: MigrationsStartForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Initiates the generation of a migration archive.
 */
export const fetchMigrationsStartForOrg = (
  variables: MigrationsStartForOrgVariables
) =>
  githubFetch<
    Schemas.Migration,
    MigrationsStartForOrgRequestBody,
    {},
    {},
    MigrationsStartForOrgPathParams
  >({ url: "/orgs/{org}/migrations", method: "post", ...variables });

/**
 * Initiates the generation of a migration archive.
 */
export const useMigrationsStartForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Migration,
      Responses.NotFound | Responses.ValidationFailed,
      MigrationsStartForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Migration,
    Responses.NotFound | Responses.ValidationFailed,
    MigrationsStartForOrgVariables
  >(
    (variables: MigrationsStartForOrgVariables) =>
      fetchMigrationsStartForOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type MigrationsGetStatusForOrgPathParams = {
  org: string;
  /*
   * migration_id parameter
   */
  migrationId: number;
};

export type MigrationsGetStatusForOrgQueryParams = {
  /*
   * Exclude attributes from the API response to improve performance
   */
  exclude?: "repositories"[];
};

export type MigrationsGetStatusForOrgVariables = {
  pathParams: MigrationsGetStatusForOrgPathParams;
  queryParams?: MigrationsGetStatusForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Fetches the status of a migration.
 *
 * The `state` of a migration can be one of the following values:
 *
 * *   `pending`, which means the migration hasn't started yet.
 * *   `exporting`, which means the migration is in progress.
 * *   `exported`, which means the migration finished successfully.
 * *   `failed`, which means the migration failed.
 */
export const fetchMigrationsGetStatusForOrg = (
  variables: MigrationsGetStatusForOrgVariables
) =>
  githubFetch<
    Schemas.Migration,
    undefined,
    {},
    MigrationsGetStatusForOrgQueryParams,
    MigrationsGetStatusForOrgPathParams
  >({
    url: "/orgs/{org}/migrations/{migrationId}",
    method: "get",
    ...variables,
  });

/**
 * Fetches the status of a migration.
 *
 * The `state` of a migration can be one of the following values:
 *
 * *   `pending`, which means the migration hasn't started yet.
 * *   `exporting`, which means the migration is in progress.
 * *   `exported`, which means the migration finished successfully.
 * *   `failed`, which means the migration failed.
 */
export const useMigrationsGetStatusForOrg = (
  variables: MigrationsGetStatusForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Migration,
      Responses.NotFound,
      Schemas.Migration
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Migration,
    Responses.NotFound,
    Schemas.Migration
  >(
    queryKeyFn({
      path: "/orgs/{org}/migrations/{migration_id}",
      operationId: "migrationsGetStatusForOrg",
      variables,
    }),
    () => fetchMigrationsGetStatusForOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MigrationsDeleteArchiveForOrgPathParams = {
  org: string;
  /*
   * migration_id parameter
   */
  migrationId: number;
};

export type MigrationsDeleteArchiveForOrgVariables = {
  pathParams: MigrationsDeleteArchiveForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
 */
export const fetchMigrationsDeleteArchiveForOrg = (
  variables: MigrationsDeleteArchiveForOrgVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    MigrationsDeleteArchiveForOrgPathParams
  >({
    url: "/orgs/{org}/migrations/{migrationId}/archive",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
 */
export const useMigrationsDeleteArchiveForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotFound,
      MigrationsDeleteArchiveForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotFound,
    MigrationsDeleteArchiveForOrgVariables
  >(
    (variables: MigrationsDeleteArchiveForOrgVariables) =>
      fetchMigrationsDeleteArchiveForOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type MigrationsDownloadArchiveForOrgPathParams = {
  org: string;
  /*
   * migration_id parameter
   */
  migrationId: number;
};

export type MigrationsDownloadArchiveForOrgVariables = {
  pathParams: MigrationsDownloadArchiveForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Fetches the URL to a migration archive.
 */
export const fetchMigrationsDownloadArchiveForOrg = (
  variables: MigrationsDownloadArchiveForOrgVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    MigrationsDownloadArchiveForOrgPathParams
  >({
    url: "/orgs/{org}/migrations/{migrationId}/archive",
    method: "get",
    ...variables,
  });

/**
 * Fetches the URL to a migration archive.
 */
export const useMigrationsDownloadArchiveForOrg = (
  variables: MigrationsDownloadArchiveForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, Responses.NotFound, undefined>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, Responses.NotFound, undefined>(
    queryKeyFn({
      path: "/orgs/{org}/migrations/{migration_id}/archive",
      operationId: "migrationsDownloadArchiveForOrg",
      variables,
    }),
    () =>
      fetchMigrationsDownloadArchiveForOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MigrationsUnlockRepoForOrgPathParams = {
  org: string;
  /*
   * migration_id parameter
   */
  migrationId: number;
  /*
   * repo_name parameter
   */
  repoName: string;
};

export type MigrationsUnlockRepoForOrgVariables = {
  pathParams: MigrationsUnlockRepoForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/reference/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
 */
export const fetchMigrationsUnlockRepoForOrg = (
  variables: MigrationsUnlockRepoForOrgVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    MigrationsUnlockRepoForOrgPathParams
  >({
    url: "/orgs/{org}/migrations/{migrationId}/repos/{repoName}/lock",
    method: "delete",
    ...variables,
  });

/**
 * Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/reference/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
 */
export const useMigrationsUnlockRepoForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotFound,
      MigrationsUnlockRepoForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotFound,
    MigrationsUnlockRepoForOrgVariables
  >(
    (variables: MigrationsUnlockRepoForOrgVariables) =>
      fetchMigrationsUnlockRepoForOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type MigrationsListReposForOrgPathParams = {
  org: string;
  /*
   * migration_id parameter
   */
  migrationId: number;
};

export type MigrationsListReposForOrgQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type MigrationsListReposForOrgResponse = Schemas.MinimalRepository[];

export type MigrationsListReposForOrgVariables = {
  pathParams: MigrationsListReposForOrgPathParams;
  queryParams?: MigrationsListReposForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all the repositories for this organization migration.
 */
export const fetchMigrationsListReposForOrg = (
  variables: MigrationsListReposForOrgVariables
) =>
  githubFetch<
    MigrationsListReposForOrgResponse,
    undefined,
    {},
    MigrationsListReposForOrgQueryParams,
    MigrationsListReposForOrgPathParams
  >({
    url: "/orgs/{org}/migrations/{migrationId}/repositories",
    method: "get",
    ...variables,
  });

/**
 * List all the repositories for this organization migration.
 */
export const useMigrationsListReposForOrg = (
  variables: MigrationsListReposForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MigrationsListReposForOrgResponse,
      Responses.NotFound,
      MigrationsListReposForOrgResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    MigrationsListReposForOrgResponse,
    Responses.NotFound,
    MigrationsListReposForOrgResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/migrations/{migration_id}/repositories",
      operationId: "migrationsListReposForOrg",
      variables,
    }),
    () => fetchMigrationsListReposForOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsListOutsideCollaboratorsPathParams = {
  org: string;
};

export type OrgsListOutsideCollaboratorsQueryParams = {
  /*
   * Filter the list of outside collaborators. Can be one of:
   * \* `2fa_disabled`: Outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled.
   * \* `all`: All outside collaborators.
   *
   * @default all
   */
  filter?: "2fa_disabled" | "all";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListOutsideCollaboratorsResponse = Schemas.SimpleUser[];

export type OrgsListOutsideCollaboratorsVariables = {
  pathParams: OrgsListOutsideCollaboratorsPathParams;
  queryParams?: OrgsListOutsideCollaboratorsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all users who are outside collaborators of an organization.
 */
export const fetchOrgsListOutsideCollaborators = (
  variables: OrgsListOutsideCollaboratorsVariables
) =>
  githubFetch<
    OrgsListOutsideCollaboratorsResponse,
    undefined,
    {},
    OrgsListOutsideCollaboratorsQueryParams,
    OrgsListOutsideCollaboratorsPathParams
  >({ url: "/orgs/{org}/outside_collaborators", method: "get", ...variables });

/**
 * List all users who are outside collaborators of an organization.
 */
export const useOrgsListOutsideCollaborators = (
  variables: OrgsListOutsideCollaboratorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListOutsideCollaboratorsResponse,
      undefined,
      OrgsListOutsideCollaboratorsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListOutsideCollaboratorsResponse,
    undefined,
    OrgsListOutsideCollaboratorsResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/outside_collaborators",
      operationId: "orgsListOutsideCollaborators",
      variables,
    }),
    () =>
      fetchOrgsListOutsideCollaborators({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsRemoveOutsideCollaboratorPathParams = {
  org: string;
  username: string;
};

export type OrgsRemoveOutsideCollaboratorError = {
  documentation_url?: string;
  message?: string;
};

export type OrgsRemoveOutsideCollaboratorVariables = {
  pathParams: OrgsRemoveOutsideCollaboratorPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removing a user from this list will remove them from all the organization's repositories.
 */
export const fetchOrgsRemoveOutsideCollaborator = (
  variables: OrgsRemoveOutsideCollaboratorVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    OrgsRemoveOutsideCollaboratorPathParams
  >({
    url: "/orgs/{org}/outside_collaborators/{username}",
    method: "delete",
    ...variables,
  });

/**
 * Removing a user from this list will remove them from all the organization's repositories.
 */
export const useOrgsRemoveOutsideCollaborator = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrgsRemoveOutsideCollaboratorError,
      OrgsRemoveOutsideCollaboratorVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    OrgsRemoveOutsideCollaboratorError,
    OrgsRemoveOutsideCollaboratorVariables
  >(
    (variables: OrgsRemoveOutsideCollaboratorVariables) =>
      fetchOrgsRemoveOutsideCollaborator({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrgsConvertMemberToOutsideCollaboratorPathParams = {
  org: string;
  username: string;
};

export type OrgsConvertMemberToOutsideCollaboratorVariables = {
  pathParams: OrgsConvertMemberToOutsideCollaboratorPathParams;
} & GithubContext["fetcherOptions"];

/**
 * When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)".
 */
export const fetchOrgsConvertMemberToOutsideCollaborator = (
  variables: OrgsConvertMemberToOutsideCollaboratorVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    OrgsConvertMemberToOutsideCollaboratorPathParams
  >({
    url: "/orgs/{org}/outside_collaborators/{username}",
    method: "put",
    ...variables,
  });

/**
 * When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)".
 */
export const useOrgsConvertMemberToOutsideCollaborator = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | {
          documentation_url?: string;
          message?: string;
        }
      | Responses.NotFound,
      OrgsConvertMemberToOutsideCollaboratorVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | {
        documentation_url?: string;
        message?: string;
      }
    | Responses.NotFound,
    OrgsConvertMemberToOutsideCollaboratorVariables
  >(
    (variables: OrgsConvertMemberToOutsideCollaboratorVariables) =>
      fetchOrgsConvertMemberToOutsideCollaborator({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type PackagesDeletePackageForOrgPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  org: string;
};

export type PackagesDeletePackageForOrgVariables = {
  pathParams: PackagesDeletePackageForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 25 downloads. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` scope. In addition:
 * - If `package_type` is not `container`, your token must also include the `repo` scope.
 * - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
 */
export const fetchPackagesDeletePackageForOrg = (
  variables: PackagesDeletePackageForOrgVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    PackagesDeletePackageForOrgPathParams
  >({
    url: "/orgs/{org}/packages/{packageType}/{packageName}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 25 downloads. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` scope. In addition:
 * - If `package_type` is not `container`, your token must also include the `repo` scope.
 * - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
 */
export const usePackagesDeletePackageForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      PackagesDeletePackageForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.RequiresAuthentication | Responses.Forbidden | Responses.NotFound,
    PackagesDeletePackageForOrgVariables
  >(
    (variables: PackagesDeletePackageForOrgVariables) =>
      fetchPackagesDeletePackageForOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PackagesGetPackageForOrganizationPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  org: string;
};

export type PackagesGetPackageForOrganizationVariables = {
  pathParams: PackagesGetPackageForOrganizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific package in an organization.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesGetPackageForOrganization = (
  variables: PackagesGetPackageForOrganizationVariables
) =>
  githubFetch<
    Schemas.Package,
    undefined,
    {},
    {},
    PackagesGetPackageForOrganizationPathParams
  >({
    url: "/orgs/{org}/packages/{packageType}/{packageName}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific package in an organization.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesGetPackageForOrganization = (
  variables: PackagesGetPackageForOrganizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Package, undefined, Schemas.Package>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Package, undefined, Schemas.Package>(
    queryKeyFn({
      path: "/orgs/{org}/packages/{package_type}/{package_name}",
      operationId: "packagesGetPackageForOrganization",
      variables,
    }),
    () =>
      fetchPackagesGetPackageForOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PackagesRestorePackageForOrgPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  org: string;
};

export type PackagesRestorePackageForOrgQueryParams = {
  /*
   * package token
   */
  token?: string;
};

export type PackagesRestorePackageForOrgVariables = {
  pathParams: PackagesRestorePackageForOrgPathParams;
  queryParams?: PackagesRestorePackageForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Restores an entire package in an organization.
 *
 * You can restore a deleted package under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:write` scope. In addition:
 * - If `package_type` is not `container`, your token must also include the `repo` scope.
 * - If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.
 */
export const fetchPackagesRestorePackageForOrg = (
  variables: PackagesRestorePackageForOrgVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    PackagesRestorePackageForOrgQueryParams,
    PackagesRestorePackageForOrgPathParams
  >({
    url: "/orgs/{org}/packages/{packageType}/{packageName}/restore",
    method: "post",
    ...variables,
  });

/**
 * Restores an entire package in an organization.
 *
 * You can restore a deleted package under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:write` scope. In addition:
 * - If `package_type` is not `container`, your token must also include the `repo` scope.
 * - If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.
 */
export const usePackagesRestorePackageForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      PackagesRestorePackageForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.RequiresAuthentication | Responses.Forbidden | Responses.NotFound,
    PackagesRestorePackageForOrgVariables
  >(
    (variables: PackagesRestorePackageForOrgVariables) =>
      fetchPackagesRestorePackageForOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PackagesGetAllPackageVersionsForPackageOwnedByOrgPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  org: string;
};

export type PackagesGetAllPackageVersionsForPackageOwnedByOrgQueryParams = {
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * The state of the package, either active or deleted.
   *
   * @default active
   */
  state?: "active" | "deleted";
};

export type PackagesGetAllPackageVersionsForPackageOwnedByOrgResponse =
  Schemas.PackageVersion[];

export type PackagesGetAllPackageVersionsForPackageOwnedByOrgVariables = {
  pathParams: PackagesGetAllPackageVersionsForPackageOwnedByOrgPathParams;
  queryParams?: PackagesGetAllPackageVersionsForPackageOwnedByOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns all package versions for a package owned by an organization.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesGetAllPackageVersionsForPackageOwnedByOrg = (
  variables: PackagesGetAllPackageVersionsForPackageOwnedByOrgVariables
) =>
  githubFetch<
    PackagesGetAllPackageVersionsForPackageOwnedByOrgResponse,
    undefined,
    {},
    PackagesGetAllPackageVersionsForPackageOwnedByOrgQueryParams,
    PackagesGetAllPackageVersionsForPackageOwnedByOrgPathParams
  >({
    url: "/orgs/{org}/packages/{packageType}/{packageName}/versions",
    method: "get",
    ...variables,
  });

/**
 * Returns all package versions for a package owned by an organization.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesGetAllPackageVersionsForPackageOwnedByOrg = (
  variables: PackagesGetAllPackageVersionsForPackageOwnedByOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PackagesGetAllPackageVersionsForPackageOwnedByOrgResponse,
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      PackagesGetAllPackageVersionsForPackageOwnedByOrgResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    PackagesGetAllPackageVersionsForPackageOwnedByOrgResponse,
    Responses.RequiresAuthentication | Responses.Forbidden | Responses.NotFound,
    PackagesGetAllPackageVersionsForPackageOwnedByOrgResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/packages/{package_type}/{package_name}/versions",
      operationId: "packagesGetAllPackageVersionsForPackageOwnedByOrg",
      variables,
    }),
    () =>
      fetchPackagesGetAllPackageVersionsForPackageOwnedByOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PackagesDeletePackageVersionForOrgPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  org: string;
  /*
   * Unique identifier of the package version.
   */
  packageVersionId: number;
};

export type PackagesDeletePackageVersionForOrgVariables = {
  pathParams: PackagesDeletePackageVersionForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a specific package version in an organization. If the package is public and the package version has more than 25 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` scope. In addition:
 * - If `package_type` is not `container`, your token must also include the `repo` scope.
 * - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
 */
export const fetchPackagesDeletePackageVersionForOrg = (
  variables: PackagesDeletePackageVersionForOrgVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    PackagesDeletePackageVersionForOrgPathParams
  >({
    url: "/orgs/{org}/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a specific package version in an organization. If the package is public and the package version has more than 25 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` scope. In addition:
 * - If `package_type` is not `container`, your token must also include the `repo` scope.
 * - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
 */
export const usePackagesDeletePackageVersionForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      PackagesDeletePackageVersionForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.RequiresAuthentication | Responses.Forbidden | Responses.NotFound,
    PackagesDeletePackageVersionForOrgVariables
  >(
    (variables: PackagesDeletePackageVersionForOrgVariables) =>
      fetchPackagesDeletePackageVersionForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type PackagesGetPackageVersionForOrganizationPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  org: string;
  /*
   * Unique identifier of the package version.
   */
  packageVersionId: number;
};

export type PackagesGetPackageVersionForOrganizationVariables = {
  pathParams: PackagesGetPackageVersionForOrganizationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific package version in an organization.
 *
 * You must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesGetPackageVersionForOrganization = (
  variables: PackagesGetPackageVersionForOrganizationVariables
) =>
  githubFetch<
    Schemas.PackageVersion,
    undefined,
    {},
    {},
    PackagesGetPackageVersionForOrganizationPathParams
  >({
    url: "/orgs/{org}/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific package version in an organization.
 *
 * You must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesGetPackageVersionForOrganization = (
  variables: PackagesGetPackageVersionForOrganizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PackageVersion,
      undefined,
      Schemas.PackageVersion
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PackageVersion,
    undefined,
    Schemas.PackageVersion
  >(
    queryKeyFn({
      path: "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}",
      operationId: "packagesGetPackageVersionForOrganization",
      variables,
    }),
    () =>
      fetchPackagesGetPackageVersionForOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PackagesRestorePackageVersionForOrgPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  org: string;
  /*
   * Unique identifier of the package version.
   */
  packageVersionId: number;
};

export type PackagesRestorePackageVersionForOrgVariables = {
  pathParams: PackagesRestorePackageVersionForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Restores a specific package version in an organization.
 *
 * You can restore a deleted package under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:write` scope. In addition:
 * - If `package_type` is not `container`, your token must also include the `repo` scope.
 * - If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.
 */
export const fetchPackagesRestorePackageVersionForOrg = (
  variables: PackagesRestorePackageVersionForOrgVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    PackagesRestorePackageVersionForOrgPathParams
  >({
    url: "/orgs/{org}/packages/{packageType}/{packageName}/versions/{packageVersionId}/restore",
    method: "post",
    ...variables,
  });

/**
 * Restores a specific package version in an organization.
 *
 * You can restore a deleted package under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:write` scope. In addition:
 * - If `package_type` is not `container`, your token must also include the `repo` scope.
 * - If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.
 */
export const usePackagesRestorePackageVersionForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      PackagesRestorePackageVersionForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.RequiresAuthentication | Responses.Forbidden | Responses.NotFound,
    PackagesRestorePackageVersionForOrgVariables
  >(
    (variables: PackagesRestorePackageVersionForOrgVariables) =>
      fetchPackagesRestorePackageVersionForOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ProjectsListForOrgPathParams = {
  org: string;
};

export type ProjectsListForOrgQueryParams = {
  /*
   * Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ProjectsListForOrgResponse = Schemas.Project[];

export type ProjectsListForOrgVariables = {
  pathParams: ProjectsListForOrgPathParams;
  queryParams?: ProjectsListForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const fetchProjectsListForOrg = (
  variables: ProjectsListForOrgVariables
) =>
  githubFetch<
    ProjectsListForOrgResponse,
    undefined,
    {},
    ProjectsListForOrgQueryParams,
    ProjectsListForOrgPathParams
  >({ url: "/orgs/{org}/projects", method: "get", ...variables });

/**
 * Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const useProjectsListForOrg = (
  variables: ProjectsListForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectsListForOrgResponse,
      Responses.ValidationFailedSimple,
      ProjectsListForOrgResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ProjectsListForOrgResponse,
    Responses.ValidationFailedSimple,
    ProjectsListForOrgResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/projects",
      operationId: "projectsListForOrg",
      variables,
    }),
    () => fetchProjectsListForOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectsCreateForOrgPathParams = {
  org: string;
};

export type ProjectsCreateForOrgRequestBody = {
  /*
   * The description of the project.
   */
  body?: string;
  /*
   * The name of the project.
   */
  name: string;
};

export type ProjectsCreateForOrgVariables = {
  body: ProjectsCreateForOrgRequestBody;
  pathParams: ProjectsCreateForOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates an organization project board. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const fetchProjectsCreateForOrg = (
  variables: ProjectsCreateForOrgVariables
) =>
  githubFetch<
    Schemas.Project,
    ProjectsCreateForOrgRequestBody,
    {},
    {},
    ProjectsCreateForOrgPathParams
  >({ url: "/orgs/{org}/projects", method: "post", ...variables });

/**
 * Creates an organization project board. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const useProjectsCreateForOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Project,
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.Gone
      | Responses.ValidationFailedSimple,
      ProjectsCreateForOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Project,
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.Gone
    | Responses.ValidationFailedSimple,
    ProjectsCreateForOrgVariables
  >(
    (variables: ProjectsCreateForOrgVariables) =>
      fetchProjectsCreateForOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type OrgsListPublicMembersPathParams = {
  org: string;
};

export type OrgsListPublicMembersQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListPublicMembersResponse = Schemas.SimpleUser[];

export type OrgsListPublicMembersVariables = {
  pathParams: OrgsListPublicMembersPathParams;
  queryParams?: OrgsListPublicMembersQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Members of an organization can choose to have their membership publicized or not.
 */
export const fetchOrgsListPublicMembers = (
  variables: OrgsListPublicMembersVariables
) =>
  githubFetch<
    OrgsListPublicMembersResponse,
    undefined,
    {},
    OrgsListPublicMembersQueryParams,
    OrgsListPublicMembersPathParams
  >({ url: "/orgs/{org}/public_members", method: "get", ...variables });

/**
 * Members of an organization can choose to have their membership publicized or not.
 */
export const useOrgsListPublicMembers = (
  variables: OrgsListPublicMembersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListPublicMembersResponse,
      undefined,
      OrgsListPublicMembersResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListPublicMembersResponse,
    undefined,
    OrgsListPublicMembersResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/public_members",
      operationId: "orgsListPublicMembers",
      variables,
    }),
    () => fetchOrgsListPublicMembers({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsRemovePublicMembershipForAuthenticatedUserPathParams = {
  org: string;
  username: string;
};

export type OrgsRemovePublicMembershipForAuthenticatedUserVariables = {
  pathParams: OrgsRemovePublicMembershipForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsRemovePublicMembershipForAuthenticatedUser = (
  variables: OrgsRemovePublicMembershipForAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    OrgsRemovePublicMembershipForAuthenticatedUserPathParams
  >({
    url: "/orgs/{org}/public_members/{username}",
    method: "delete",
    ...variables,
  });

export const useOrgsRemovePublicMembershipForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      OrgsRemovePublicMembershipForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    OrgsRemovePublicMembershipForAuthenticatedUserVariables
  >(
    (variables: OrgsRemovePublicMembershipForAuthenticatedUserVariables) =>
      fetchOrgsRemovePublicMembershipForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type OrgsCheckPublicMembershipForUserPathParams = {
  org: string;
  username: string;
};

export type OrgsCheckPublicMembershipForUserVariables = {
  pathParams: OrgsCheckPublicMembershipForUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsCheckPublicMembershipForUser = (
  variables: OrgsCheckPublicMembershipForUserVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    OrgsCheckPublicMembershipForUserPathParams
  >({
    url: "/orgs/{org}/public_members/{username}",
    method: "get",
    ...variables,
  });

export const useOrgsCheckPublicMembershipForUser = (
  variables: OrgsCheckPublicMembershipForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, undefined, undefined>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, undefined, undefined>(
    queryKeyFn({
      path: "/orgs/{org}/public_members/{username}",
      operationId: "orgsCheckPublicMembershipForUser",
      variables,
    }),
    () =>
      fetchOrgsCheckPublicMembershipForUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsSetPublicMembershipForAuthenticatedUserPathParams = {
  org: string;
  username: string;
};

export type OrgsSetPublicMembershipForAuthenticatedUserVariables = {
  pathParams: OrgsSetPublicMembershipForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The user can publicize their own membership. (A user cannot publicize the membership for another user.)
 *
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const fetchOrgsSetPublicMembershipForAuthenticatedUser = (
  variables: OrgsSetPublicMembershipForAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    OrgsSetPublicMembershipForAuthenticatedUserPathParams
  >({
    url: "/orgs/{org}/public_members/{username}",
    method: "put",
    ...variables,
  });

/**
 * The user can publicize their own membership. (A user cannot publicize the membership for another user.)
 *
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const useOrgsSetPublicMembershipForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.Forbidden,
      OrgsSetPublicMembershipForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.Forbidden,
    OrgsSetPublicMembershipForAuthenticatedUserVariables
  >(
    (variables: OrgsSetPublicMembershipForAuthenticatedUserVariables) =>
      fetchOrgsSetPublicMembershipForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposListForOrgPathParams = {
  org: string;
};

export type ReposListForOrgQueryParams = {
  /*
   * Specifies the types of repositories you want returned. Can be one of `all`, `public`, `private`, `forks`, `sources`, `member`, `internal`. Note: For GitHub AE, can be one of `all`, `private`, `forks`, `sources`, `member`, `internal`. Default: `all`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `type` can also be `internal`.
   */
  type?:
    | "all"
    | "public"
    | "private"
    | "forks"
    | "sources"
    | "member"
    | "internal";
  /*
   * Can be one of `created`, `updated`, `pushed`, `full_name`.
   *
   * @default created
   */
  sort?: "created" | "updated" | "pushed" | "full_name";
  /*
   * Can be one of `asc` or `desc`. Default: when using `full_name`: `asc`, otherwise `desc`
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListForOrgResponse = Schemas.MinimalRepository[];

export type ReposListForOrgVariables = {
  pathParams: ReposListForOrgPathParams;
  queryParams?: ReposListForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists repositories for the specified organization.
 */
export const fetchReposListForOrg = (variables: ReposListForOrgVariables) =>
  githubFetch<
    ReposListForOrgResponse,
    undefined,
    {},
    ReposListForOrgQueryParams,
    ReposListForOrgPathParams
  >({ url: "/orgs/{org}/repos", method: "get", ...variables });

/**
 * Lists repositories for the specified organization.
 */
export const useReposListForOrg = (
  variables: ReposListForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListForOrgResponse,
      undefined,
      ReposListForOrgResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListForOrgResponse,
    undefined,
    ReposListForOrgResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/repos",
      operationId: "reposListForOrg",
      variables,
    }),
    () => fetchReposListForOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateInOrgPathParams = {
  org: string;
};

export type ReposCreateInOrgRequestBody = {
  /*
   * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
   *
   * @default true
   */
  allow_merge_commit?: boolean;
  /*
   * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
   *
   * @default true
   */
  allow_rebase_merge?: boolean;
  /*
   * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
   *
   * @default true
   */
  allow_squash_merge?: boolean;
  /*
   * Pass `true` to create an initial commit with empty README.
   *
   * @default false
   */
  auto_init?: boolean;
  /*
   * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
   *
   * @default false
   */
  delete_branch_on_merge?: boolean;
  /*
   * A short description of the repository.
   */
  description?: string;
  /*
   * Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".
   */
  gitignore_template?: string;
  /*
   * Either `true` to enable issues for this repository or `false` to disable them.
   *
   * @default true
   */
  has_issues?: boolean;
  /*
   * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
   *
   * @default true
   */
  has_projects?: boolean;
  /*
   * Either `true` to enable the wiki for this repository or `false` to disable it.
   *
   * @default true
   */
  has_wiki?: boolean;
  /*
   * A URL with more information about the repository.
   */
  homepage?: string;
  /*
   * Either `true` to make this repo available as a template repository or `false` to prevent it.
   *
   * @default false
   */
  is_template?: boolean;
  /*
   * Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".
   */
  license_template?: string;
  /*
   * The name of the repository.
   */
  name: string;
  /*
   * Whether the repository is private.
   *
   * @default false
   */
  private?: boolean;
  /*
   * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
   */
  team_id?: number;
  /*
   * Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see "[Creating an internal repository](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.
   * The `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.
   */
  visibility?: "public" | "private" | "visibility" | "internal";
};

export type ReposCreateInOrgVariables = {
  body: ReposCreateInOrgRequestBody;
  pathParams: ReposCreateInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
 * *   `repo` scope to create a private repository
 */
export const fetchReposCreateInOrg = (variables: ReposCreateInOrgVariables) =>
  githubFetch<
    Schemas.Repository,
    ReposCreateInOrgRequestBody,
    {},
    {},
    ReposCreateInOrgPathParams
  >({ url: "/orgs/{org}/repos", method: "post", ...variables });

/**
 * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
 * *   `repo` scope to create a private repository
 */
export const useReposCreateInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Repository,
      Responses.Forbidden | Responses.ValidationFailed,
      ReposCreateInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Repository,
    Responses.Forbidden | Responses.ValidationFailed,
    ReposCreateInOrgVariables
  >(
    (variables: ReposCreateInOrgVariables) =>
      fetchReposCreateInOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type BillingGetGithubActionsBillingOrgPathParams = {
  org: string;
};

export type BillingGetGithubActionsBillingOrgVariables = {
  pathParams: BillingGetGithubActionsBillingOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Access tokens must have the `repo` or `admin:org` scope.
 */
export const fetchBillingGetGithubActionsBillingOrg = (
  variables: BillingGetGithubActionsBillingOrgVariables
) =>
  githubFetch<
    Schemas.ActionsBillingUsage,
    undefined,
    {},
    {},
    BillingGetGithubActionsBillingOrgPathParams
  >({
    url: "/orgs/{org}/settings/billing/actions",
    method: "get",
    ...variables,
  });

/**
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Access tokens must have the `repo` or `admin:org` scope.
 */
export const useBillingGetGithubActionsBillingOrg = (
  variables: BillingGetGithubActionsBillingOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsBillingUsage,
      undefined,
      Schemas.ActionsBillingUsage
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsBillingUsage,
    undefined,
    Schemas.ActionsBillingUsage
  >(
    queryKeyFn({
      path: "/orgs/{org}/settings/billing/actions",
      operationId: "billingGetGithubActionsBillingOrg",
      variables,
    }),
    () =>
      fetchBillingGetGithubActionsBillingOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type BillingGetGithubPackagesBillingOrgPathParams = {
  org: string;
};

export type BillingGetGithubPackagesBillingOrgVariables = {
  pathParams: BillingGetGithubPackagesBillingOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the free and paid storage usued for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `repo` or `admin:org` scope.
 */
export const fetchBillingGetGithubPackagesBillingOrg = (
  variables: BillingGetGithubPackagesBillingOrgVariables
) =>
  githubFetch<
    Schemas.PackagesBillingUsage,
    undefined,
    {},
    {},
    BillingGetGithubPackagesBillingOrgPathParams
  >({
    url: "/orgs/{org}/settings/billing/packages",
    method: "get",
    ...variables,
  });

/**
 * Gets the free and paid storage usued for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `repo` or `admin:org` scope.
 */
export const useBillingGetGithubPackagesBillingOrg = (
  variables: BillingGetGithubPackagesBillingOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PackagesBillingUsage,
      undefined,
      Schemas.PackagesBillingUsage
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PackagesBillingUsage,
    undefined,
    Schemas.PackagesBillingUsage
  >(
    queryKeyFn({
      path: "/orgs/{org}/settings/billing/packages",
      operationId: "billingGetGithubPackagesBillingOrg",
      variables,
    }),
    () =>
      fetchBillingGetGithubPackagesBillingOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type BillingGetSharedStorageBillingOrgPathParams = {
  org: string;
};

export type BillingGetSharedStorageBillingOrgVariables = {
  pathParams: BillingGetSharedStorageBillingOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `repo` or `admin:org` scope.
 */
export const fetchBillingGetSharedStorageBillingOrg = (
  variables: BillingGetSharedStorageBillingOrgVariables
) =>
  githubFetch<
    Schemas.CombinedBillingUsage,
    undefined,
    {},
    {},
    BillingGetSharedStorageBillingOrgPathParams
  >({
    url: "/orgs/{org}/settings/billing/shared-storage",
    method: "get",
    ...variables,
  });

/**
 * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `repo` or `admin:org` scope.
 */
export const useBillingGetSharedStorageBillingOrg = (
  variables: BillingGetSharedStorageBillingOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CombinedBillingUsage,
      undefined,
      Schemas.CombinedBillingUsage
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CombinedBillingUsage,
    undefined,
    Schemas.CombinedBillingUsage
  >(
    queryKeyFn({
      path: "/orgs/{org}/settings/billing/shared-storage",
      operationId: "billingGetSharedStorageBillingOrg",
      variables,
    }),
    () =>
      fetchBillingGetSharedStorageBillingOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsListIdpGroupsForOrgPathParams = {
  org: string;
};

export type TeamsListIdpGroupsForOrgQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page token
   */
  page?: string;
};

export type TeamsListIdpGroupsForOrgVariables = {
  pathParams: TeamsListIdpGroupsForOrgPathParams;
  queryParams?: TeamsListIdpGroupsForOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * List IdP groups available in an organization. You can limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."
 *
 * The `per_page` parameter provides pagination for a list of IdP groups the authenticated user can access in an organization. For example, if the user `octocat` wants to see two groups per page in `octo-org` via cURL, it would look like this:
 */
export const fetchTeamsListIdpGroupsForOrg = (
  variables: TeamsListIdpGroupsForOrgVariables
) =>
  githubFetch<
    Schemas.GroupMapping,
    undefined,
    {},
    TeamsListIdpGroupsForOrgQueryParams,
    TeamsListIdpGroupsForOrgPathParams
  >({ url: "/orgs/{org}/team-sync/groups", method: "get", ...variables });

/**
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * List IdP groups available in an organization. You can limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."
 *
 * The `per_page` parameter provides pagination for a list of IdP groups the authenticated user can access in an organization. For example, if the user `octocat` wants to see two groups per page in `octo-org` via cURL, it would look like this:
 */
export const useTeamsListIdpGroupsForOrg = (
  variables: TeamsListIdpGroupsForOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GroupMapping,
      undefined,
      Schemas.GroupMapping
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.GroupMapping,
    undefined,
    Schemas.GroupMapping
  >(
    queryKeyFn({
      path: "/orgs/{org}/team-sync/groups",
      operationId: "teamsListIdpGroupsForOrg",
      variables,
    }),
    () => fetchTeamsListIdpGroupsForOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsListPathParams = {
  org: string;
};

export type TeamsListQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListResponse = Schemas.Team[];

export type TeamsListVariables = {
  pathParams: TeamsListPathParams;
  queryParams?: TeamsListQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all teams in an organization that are visible to the authenticated user.
 */
export const fetchTeamsList = (variables: TeamsListVariables) =>
  githubFetch<
    TeamsListResponse,
    undefined,
    {},
    TeamsListQueryParams,
    TeamsListPathParams
  >({ url: "/orgs/{org}/teams", method: "get", ...variables });

/**
 * Lists all teams in an organization that are visible to the authenticated user.
 */
export const useTeamsList = (
  variables: TeamsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListResponse,
      Responses.Forbidden,
      TeamsListResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListResponse,
    Responses.Forbidden,
    TeamsListResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams",
      operationId: "teamsList",
      variables,
    }),
    () => fetchTeamsList({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsCreatePathParams = {
  org: string;
};

export type TeamsCreateRequestBody = {
  /*
   * The description of the team.
   */
  description?: string;
  /*
   * List GitHub IDs for organization members who will become team maintainers.
   */
  maintainers?: string[];
  /*
   * The name of the team.
   */
  name: string;
  /*
   * The ID of a team to set as the parent team.
   */
  parent_team_id?: number;
  /*
   * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
   * \* `pull` - team members can pull, but not push to or administer newly-added repositories.
   * \* `push` - team members can pull and push, but not administer newly-added repositories.
   * \* `admin` - team members can pull, push and administer newly-added repositories.
   *
   * @default pull
   */
  permission?: "pull" | "push" | "admin";
  /*
   * The level of privacy this team should have. The options are:
   * **For a non-nested team:**
   * \* `secret` - only visible to organization owners and members of this team.
   * \* `closed` - visible to all members of this organization.
   * Default: `secret`
   * **For a parent or child team:**
   * \* `closed` - visible to all members of this organization.
   * Default for child team: `closed`
   */
  privacy?: "secret" | "closed";
  /*
   * The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
   */
  repo_names?: string[];
};

export type TeamsCreateVariables = {
  body: TeamsCreateRequestBody;
  pathParams: TeamsCreatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization)."
 *
 * When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)".
 */
export const fetchTeamsCreate = (variables: TeamsCreateVariables) =>
  githubFetch<
    Schemas.TeamFull,
    TeamsCreateRequestBody,
    {},
    {},
    TeamsCreatePathParams
  >({ url: "/orgs/{org}/teams", method: "post", ...variables });

/**
 * To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization)."
 *
 * When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)".
 */
export const useTeamsCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamFull,
      Responses.Forbidden | Responses.ValidationFailed,
      TeamsCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamFull,
    Responses.Forbidden | Responses.ValidationFailed,
    TeamsCreateVariables
  >(
    (variables: TeamsCreateVariables) =>
      fetchTeamsCreate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsDeleteInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
};

export type TeamsDeleteInOrgVariables = {
  pathParams: TeamsDeleteInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * To delete a team, the authenticated user must be an organization owner or team maintainer.
 *
 * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
 */
export const fetchTeamsDeleteInOrg = (variables: TeamsDeleteInOrgVariables) =>
  githubFetch<undefined, undefined, {}, {}, TeamsDeleteInOrgPathParams>({
    url: "/orgs/{org}/teams/{teamSlug}",
    method: "delete",
    ...variables,
  });

/**
 * To delete a team, the authenticated user must be an organization owner or team maintainer.
 *
 * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
 */
export const useTeamsDeleteInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      TeamsDeleteInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    TeamsDeleteInOrgVariables
  >(
    (variables: TeamsDeleteInOrgVariables) =>
      fetchTeamsDeleteInOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsGetByNamePathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
};

export type TeamsGetByNameVariables = {
  pathParams: TeamsGetByNamePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a team using the team's `slug`. GitHub generates the `slug` from the team `name`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
 */
export const fetchTeamsGetByName = (variables: TeamsGetByNameVariables) =>
  githubFetch<Schemas.TeamFull, undefined, {}, {}, TeamsGetByNamePathParams>({
    url: "/orgs/{org}/teams/{teamSlug}",
    method: "get",
    ...variables,
  });

/**
 * Gets a team using the team's `slug`. GitHub generates the `slug` from the team `name`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
 */
export const useTeamsGetByName = (
  variables: TeamsGetByNameVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamFull,
      Responses.NotFound,
      Schemas.TeamFull
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamFull,
    Responses.NotFound,
    Schemas.TeamFull
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}",
      operationId: "teamsGetByName",
      variables,
    }),
    () => fetchTeamsGetByName({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsUpdateInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
};

export type TeamsUpdateInOrgRequestBody = {
  /*
   * The description of the team.
   */
  description?: string;
  /*
   * The name of the team.
   */
  name?: string;
  /*
   * The ID of a team to set as the parent team.
   */
  parent_team_id?: number | null;
  /*
   * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
   * \* `pull` - team members can pull, but not push to or administer newly-added repositories.
   * \* `push` - team members can pull and push, but not administer newly-added repositories.
   * \* `admin` - team members can pull, push and administer newly-added repositories.
   *
   * @default pull
   */
  permission?: "pull" | "push" | "admin";
  /*
   * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:
   * **For a non-nested team:**
   * \* `secret` - only visible to organization owners and members of this team.
   * \* `closed` - visible to all members of this organization.
   * **For a parent or child team:**
   * \* `closed` - visible to all members of this organization.
   */
  privacy?: "secret" | "closed";
};

export type TeamsUpdateInOrgVariables = {
  body?: TeamsUpdateInOrgRequestBody;
  pathParams: TeamsUpdateInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
 */
export const fetchTeamsUpdateInOrg = (variables: TeamsUpdateInOrgVariables) =>
  githubFetch<
    Schemas.TeamFull,
    TeamsUpdateInOrgRequestBody,
    {},
    {},
    TeamsUpdateInOrgPathParams
  >({ url: "/orgs/{org}/teams/{teamSlug}", method: "patch", ...variables });

/**
 * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
 */
export const useTeamsUpdateInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamFull,
      undefined,
      TeamsUpdateInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamFull,
    undefined,
    TeamsUpdateInOrgVariables
  >(
    (variables: TeamsUpdateInOrgVariables) =>
      fetchTeamsUpdateInOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsListDiscussionsInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
};

export type TeamsListDiscussionsInOrgQueryParams = {
  /*
   * One of `asc` (ascending) or `desc` (descending).
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Pinned discussions only filter
   */
  pinned?: string;
};

export type TeamsListDiscussionsInOrgResponse = Schemas.TeamDiscussion[];

export type TeamsListDiscussionsInOrgVariables = {
  pathParams: TeamsListDiscussionsInOrgPathParams;
  queryParams?: TeamsListDiscussionsInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
 */
export const fetchTeamsListDiscussionsInOrg = (
  variables: TeamsListDiscussionsInOrgVariables
) =>
  githubFetch<
    TeamsListDiscussionsInOrgResponse,
    undefined,
    {},
    TeamsListDiscussionsInOrgQueryParams,
    TeamsListDiscussionsInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions",
    method: "get",
    ...variables,
  });

/**
 * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
 */
export const useTeamsListDiscussionsInOrg = (
  variables: TeamsListDiscussionsInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListDiscussionsInOrgResponse,
      undefined,
      TeamsListDiscussionsInOrgResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListDiscussionsInOrgResponse,
    undefined,
    TeamsListDiscussionsInOrgResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/discussions",
      operationId: "teamsListDiscussionsInOrg",
      variables,
    }),
    () => fetchTeamsListDiscussionsInOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsCreateDiscussionInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
};

export type TeamsCreateDiscussionInOrgRequestBody = {
  /*
   * The discussion post's body text.
   */
  body: string;
  /*
   * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
   *
   * @default false
   */
  private?: boolean;
  /*
   * The discussion post's title.
   */
  title: string;
};

export type TeamsCreateDiscussionInOrgVariables = {
  body: TeamsCreateDiscussionInOrgRequestBody;
  pathParams: TeamsCreateDiscussionInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
 */
export const fetchTeamsCreateDiscussionInOrg = (
  variables: TeamsCreateDiscussionInOrgVariables
) =>
  githubFetch<
    Schemas.TeamDiscussion,
    TeamsCreateDiscussionInOrgRequestBody,
    {},
    {},
    TeamsCreateDiscussionInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions",
    method: "post",
    ...variables,
  });

/**
 * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
 */
export const useTeamsCreateDiscussionInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamDiscussion,
      undefined,
      TeamsCreateDiscussionInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamDiscussion,
    undefined,
    TeamsCreateDiscussionInOrgVariables
  >(
    (variables: TeamsCreateDiscussionInOrgVariables) =>
      fetchTeamsCreateDiscussionInOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsDeleteDiscussionInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
};

export type TeamsDeleteDiscussionInOrgVariables = {
  pathParams: TeamsDeleteDiscussionInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 */
export const fetchTeamsDeleteDiscussionInOrg = (
  variables: TeamsDeleteDiscussionInOrgVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    TeamsDeleteDiscussionInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}",
    method: "delete",
    ...variables,
  });

/**
 * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 */
export const useTeamsDeleteDiscussionInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      TeamsDeleteDiscussionInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    TeamsDeleteDiscussionInOrgVariables
  >(
    (variables: TeamsDeleteDiscussionInOrgVariables) =>
      fetchTeamsDeleteDiscussionInOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsGetDiscussionInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
};

export type TeamsGetDiscussionInOrgVariables = {
  pathParams: TeamsGetDiscussionInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 */
export const fetchTeamsGetDiscussionInOrg = (
  variables: TeamsGetDiscussionInOrgVariables
) =>
  githubFetch<
    Schemas.TeamDiscussion,
    undefined,
    {},
    {},
    TeamsGetDiscussionInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}",
    method: "get",
    ...variables,
  });

/**
 * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 */
export const useTeamsGetDiscussionInOrg = (
  variables: TeamsGetDiscussionInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamDiscussion,
      undefined,
      Schemas.TeamDiscussion
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamDiscussion,
    undefined,
    Schemas.TeamDiscussion
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
      operationId: "teamsGetDiscussionInOrg",
      variables,
    }),
    () => fetchTeamsGetDiscussionInOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsUpdateDiscussionInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
};

export type TeamsUpdateDiscussionInOrgRequestBody = {
  /*
   * The discussion post's body text.
   */
  body?: string;
  /*
   * The discussion post's title.
   */
  title?: string;
};

export type TeamsUpdateDiscussionInOrgVariables = {
  body?: TeamsUpdateDiscussionInOrgRequestBody;
  pathParams: TeamsUpdateDiscussionInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 */
export const fetchTeamsUpdateDiscussionInOrg = (
  variables: TeamsUpdateDiscussionInOrgVariables
) =>
  githubFetch<
    Schemas.TeamDiscussion,
    TeamsUpdateDiscussionInOrgRequestBody,
    {},
    {},
    TeamsUpdateDiscussionInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}",
    method: "patch",
    ...variables,
  });

/**
 * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 */
export const useTeamsUpdateDiscussionInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamDiscussion,
      undefined,
      TeamsUpdateDiscussionInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamDiscussion,
    undefined,
    TeamsUpdateDiscussionInOrgVariables
  >(
    (variables: TeamsUpdateDiscussionInOrgVariables) =>
      fetchTeamsUpdateDiscussionInOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsListDiscussionCommentsInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
};

export type TeamsListDiscussionCommentsInOrgQueryParams = {
  /*
   * One of `asc` (ascending) or `desc` (descending).
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListDiscussionCommentsInOrgResponse =
  Schemas.TeamDiscussionComment[];

export type TeamsListDiscussionCommentsInOrgVariables = {
  pathParams: TeamsListDiscussionCommentsInOrgPathParams;
  queryParams?: TeamsListDiscussionCommentsInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
 */
export const fetchTeamsListDiscussionCommentsInOrg = (
  variables: TeamsListDiscussionCommentsInOrgVariables
) =>
  githubFetch<
    TeamsListDiscussionCommentsInOrgResponse,
    undefined,
    {},
    TeamsListDiscussionCommentsInOrgQueryParams,
    TeamsListDiscussionCommentsInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments",
    method: "get",
    ...variables,
  });

/**
 * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
 */
export const useTeamsListDiscussionCommentsInOrg = (
  variables: TeamsListDiscussionCommentsInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListDiscussionCommentsInOrgResponse,
      undefined,
      TeamsListDiscussionCommentsInOrgResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListDiscussionCommentsInOrgResponse,
    undefined,
    TeamsListDiscussionCommentsInOrgResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
      operationId: "teamsListDiscussionCommentsInOrg",
      variables,
    }),
    () =>
      fetchTeamsListDiscussionCommentsInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsCreateDiscussionCommentInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
};

export type TeamsCreateDiscussionCommentInOrgRequestBody = {
  /*
   * The discussion comment's body text.
   */
  body: string;
};

export type TeamsCreateDiscussionCommentInOrgVariables = {
  body: TeamsCreateDiscussionCommentInOrgRequestBody;
  pathParams: TeamsCreateDiscussionCommentInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
 */
export const fetchTeamsCreateDiscussionCommentInOrg = (
  variables: TeamsCreateDiscussionCommentInOrgVariables
) =>
  githubFetch<
    Schemas.TeamDiscussionComment,
    TeamsCreateDiscussionCommentInOrgRequestBody,
    {},
    {},
    TeamsCreateDiscussionCommentInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments",
    method: "post",
    ...variables,
  });

/**
 * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
 */
export const useTeamsCreateDiscussionCommentInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamDiscussionComment,
      undefined,
      TeamsCreateDiscussionCommentInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamDiscussionComment,
    undefined,
    TeamsCreateDiscussionCommentInOrgVariables
  >(
    (variables: TeamsCreateDiscussionCommentInOrgVariables) =>
      fetchTeamsCreateDiscussionCommentInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsDeleteDiscussionCommentInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
  commentNumber: number;
};

export type TeamsDeleteDiscussionCommentInOrgVariables = {
  pathParams: TeamsDeleteDiscussionCommentInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 */
export const fetchTeamsDeleteDiscussionCommentInOrg = (
  variables: TeamsDeleteDiscussionCommentInOrgVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    TeamsDeleteDiscussionCommentInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 */
export const useTeamsDeleteDiscussionCommentInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      TeamsDeleteDiscussionCommentInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    TeamsDeleteDiscussionCommentInOrgVariables
  >(
    (variables: TeamsDeleteDiscussionCommentInOrgVariables) =>
      fetchTeamsDeleteDiscussionCommentInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsGetDiscussionCommentInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
  commentNumber: number;
};

export type TeamsGetDiscussionCommentInOrgVariables = {
  pathParams: TeamsGetDiscussionCommentInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 */
export const fetchTeamsGetDiscussionCommentInOrg = (
  variables: TeamsGetDiscussionCommentInOrgVariables
) =>
  githubFetch<
    Schemas.TeamDiscussionComment,
    undefined,
    {},
    {},
    TeamsGetDiscussionCommentInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}",
    method: "get",
    ...variables,
  });

/**
 * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 */
export const useTeamsGetDiscussionCommentInOrg = (
  variables: TeamsGetDiscussionCommentInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamDiscussionComment,
      undefined,
      Schemas.TeamDiscussionComment
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamDiscussionComment,
    undefined,
    Schemas.TeamDiscussionComment
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
      operationId: "teamsGetDiscussionCommentInOrg",
      variables,
    }),
    () =>
      fetchTeamsGetDiscussionCommentInOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsUpdateDiscussionCommentInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
  commentNumber: number;
};

export type TeamsUpdateDiscussionCommentInOrgRequestBody = {
  /*
   * The discussion comment's body text.
   */
  body: string;
};

export type TeamsUpdateDiscussionCommentInOrgVariables = {
  body: TeamsUpdateDiscussionCommentInOrgRequestBody;
  pathParams: TeamsUpdateDiscussionCommentInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 */
export const fetchTeamsUpdateDiscussionCommentInOrg = (
  variables: TeamsUpdateDiscussionCommentInOrgVariables
) =>
  githubFetch<
    Schemas.TeamDiscussionComment,
    TeamsUpdateDiscussionCommentInOrgRequestBody,
    {},
    {},
    TeamsUpdateDiscussionCommentInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}",
    method: "patch",
    ...variables,
  });

/**
 * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 */
export const useTeamsUpdateDiscussionCommentInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamDiscussionComment,
      undefined,
      TeamsUpdateDiscussionCommentInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamDiscussionComment,
    undefined,
    TeamsUpdateDiscussionCommentInOrgVariables
  >(
    (variables: TeamsUpdateDiscussionCommentInOrgVariables) =>
      fetchTeamsUpdateDiscussionCommentInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReactionsListForTeamDiscussionCommentInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
  commentNumber: number;
};

export type ReactionsListForTeamDiscussionCommentInOrgQueryParams = {
  /*
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForTeamDiscussionCommentInOrgResponse =
  Schemas.Reaction[];

export type ReactionsListForTeamDiscussionCommentInOrgVariables = {
  pathParams: ReactionsListForTeamDiscussionCommentInOrgPathParams;
  queryParams?: ReactionsListForTeamDiscussionCommentInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
 */
export const fetchReactionsListForTeamDiscussionCommentInOrg = (
  variables: ReactionsListForTeamDiscussionCommentInOrgVariables
) =>
  githubFetch<
    ReactionsListForTeamDiscussionCommentInOrgResponse,
    undefined,
    {},
    ReactionsListForTeamDiscussionCommentInOrgQueryParams,
    ReactionsListForTeamDiscussionCommentInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}/reactions",
    method: "get",
    ...variables,
  });

/**
 * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
 */
export const useReactionsListForTeamDiscussionCommentInOrg = (
  variables: ReactionsListForTeamDiscussionCommentInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForTeamDiscussionCommentInOrgResponse,
      undefined,
      ReactionsListForTeamDiscussionCommentInOrgResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForTeamDiscussionCommentInOrgResponse,
    undefined,
    ReactionsListForTeamDiscussionCommentInOrgResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
      operationId: "reactionsListForTeamDiscussionCommentInOrg",
      variables,
    }),
    () =>
      fetchReactionsListForTeamDiscussionCommentInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReactionsCreateForTeamDiscussionCommentInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
  commentNumber: number;
};

export type ReactionsCreateForTeamDiscussionCommentInOrgRequestBody = {
  /*
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
};

export type ReactionsCreateForTeamDiscussionCommentInOrgVariables = {
  body: ReactionsCreateForTeamDiscussionCommentInOrgRequestBody;
  pathParams: ReactionsCreateForTeamDiscussionCommentInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
 */
export const fetchReactionsCreateForTeamDiscussionCommentInOrg = (
  variables: ReactionsCreateForTeamDiscussionCommentInOrgVariables
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForTeamDiscussionCommentInOrgRequestBody,
    {},
    {},
    ReactionsCreateForTeamDiscussionCommentInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}/reactions",
    method: "post",
    ...variables,
  });

/**
 * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
 */
export const useReactionsCreateForTeamDiscussionCommentInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      undefined,
      ReactionsCreateForTeamDiscussionCommentInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    undefined,
    ReactionsCreateForTeamDiscussionCommentInOrgVariables
  >(
    (variables: ReactionsCreateForTeamDiscussionCommentInOrgVariables) =>
      fetchReactionsCreateForTeamDiscussionCommentInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReactionsDeleteForTeamDiscussionCommentPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
  commentNumber: number;
  reactionId: number;
};

export type ReactionsDeleteForTeamDiscussionCommentVariables = {
  pathParams: ReactionsDeleteForTeamDiscussionCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
 *
 * Delete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchReactionsDeleteForTeamDiscussionComment = (
  variables: ReactionsDeleteForTeamDiscussionCommentVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ReactionsDeleteForTeamDiscussionCommentPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/comments/{commentNumber}/reactions/{reactionId}",
    method: "delete",
    ...variables,
  });

/**
 * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
 *
 * Delete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useReactionsDeleteForTeamDiscussionComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ReactionsDeleteForTeamDiscussionCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ReactionsDeleteForTeamDiscussionCommentVariables
  >(
    (variables: ReactionsDeleteForTeamDiscussionCommentVariables) =>
      fetchReactionsDeleteForTeamDiscussionComment({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReactionsListForTeamDiscussionInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
};

export type ReactionsListForTeamDiscussionInOrgQueryParams = {
  /*
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForTeamDiscussionInOrgResponse = Schemas.Reaction[];

export type ReactionsListForTeamDiscussionInOrgVariables = {
  pathParams: ReactionsListForTeamDiscussionInOrgPathParams;
  queryParams?: ReactionsListForTeamDiscussionInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
 */
export const fetchReactionsListForTeamDiscussionInOrg = (
  variables: ReactionsListForTeamDiscussionInOrgVariables
) =>
  githubFetch<
    ReactionsListForTeamDiscussionInOrgResponse,
    undefined,
    {},
    ReactionsListForTeamDiscussionInOrgQueryParams,
    ReactionsListForTeamDiscussionInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/reactions",
    method: "get",
    ...variables,
  });

/**
 * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
 */
export const useReactionsListForTeamDiscussionInOrg = (
  variables: ReactionsListForTeamDiscussionInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForTeamDiscussionInOrgResponse,
      undefined,
      ReactionsListForTeamDiscussionInOrgResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForTeamDiscussionInOrgResponse,
    undefined,
    ReactionsListForTeamDiscussionInOrgResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
      operationId: "reactionsListForTeamDiscussionInOrg",
      variables,
    }),
    () =>
      fetchReactionsListForTeamDiscussionInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReactionsCreateForTeamDiscussionInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
};

export type ReactionsCreateForTeamDiscussionInOrgRequestBody = {
  /*
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
};

export type ReactionsCreateForTeamDiscussionInOrgVariables = {
  body: ReactionsCreateForTeamDiscussionInOrgRequestBody;
  pathParams: ReactionsCreateForTeamDiscussionInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
 */
export const fetchReactionsCreateForTeamDiscussionInOrg = (
  variables: ReactionsCreateForTeamDiscussionInOrgVariables
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForTeamDiscussionInOrgRequestBody,
    {},
    {},
    ReactionsCreateForTeamDiscussionInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/reactions",
    method: "post",
    ...variables,
  });

/**
 * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
 */
export const useReactionsCreateForTeamDiscussionInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      undefined,
      ReactionsCreateForTeamDiscussionInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    undefined,
    ReactionsCreateForTeamDiscussionInOrgVariables
  >(
    (variables: ReactionsCreateForTeamDiscussionInOrgVariables) =>
      fetchReactionsCreateForTeamDiscussionInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReactionsDeleteForTeamDiscussionPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  discussionNumber: number;
  reactionId: number;
};

export type ReactionsDeleteForTeamDiscussionVariables = {
  pathParams: ReactionsDeleteForTeamDiscussionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
 *
 * Delete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchReactionsDeleteForTeamDiscussion = (
  variables: ReactionsDeleteForTeamDiscussionVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ReactionsDeleteForTeamDiscussionPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/discussions/{discussionNumber}/reactions/{reactionId}",
    method: "delete",
    ...variables,
  });

/**
 * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
 *
 * Delete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useReactionsDeleteForTeamDiscussion = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ReactionsDeleteForTeamDiscussionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ReactionsDeleteForTeamDiscussionVariables
  >(
    (variables: ReactionsDeleteForTeamDiscussionVariables) =>
      fetchReactionsDeleteForTeamDiscussion({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsListPendingInvitationsInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
};

export type TeamsListPendingInvitationsInOrgQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListPendingInvitationsInOrgResponse =
  Schemas.OrganizationInvitation[];

export type TeamsListPendingInvitationsInOrgVariables = {
  pathParams: TeamsListPendingInvitationsInOrgPathParams;
  queryParams?: TeamsListPendingInvitationsInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
 */
export const fetchTeamsListPendingInvitationsInOrg = (
  variables: TeamsListPendingInvitationsInOrgVariables
) =>
  githubFetch<
    TeamsListPendingInvitationsInOrgResponse,
    undefined,
    {},
    TeamsListPendingInvitationsInOrgQueryParams,
    TeamsListPendingInvitationsInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/invitations",
    method: "get",
    ...variables,
  });

/**
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
 */
export const useTeamsListPendingInvitationsInOrg = (
  variables: TeamsListPendingInvitationsInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListPendingInvitationsInOrgResponse,
      undefined,
      TeamsListPendingInvitationsInOrgResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListPendingInvitationsInOrgResponse,
    undefined,
    TeamsListPendingInvitationsInOrgResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/invitations",
      operationId: "teamsListPendingInvitationsInOrg",
      variables,
    }),
    () =>
      fetchTeamsListPendingInvitationsInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsListMembersInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
};

export type TeamsListMembersInOrgQueryParams = {
  /*
   * Filters members returned by their role in the team. Can be one of:
   * \* `member` - normal members of the team.
   * \* `maintainer` - team maintainers.
   * \* `all` - all members of the team.
   *
   * @default all
   */
  role?: "member" | "maintainer" | "all";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListMembersInOrgResponse = Schemas.SimpleUser[];

export type TeamsListMembersInOrgVariables = {
  pathParams: TeamsListMembersInOrgPathParams;
  queryParams?: TeamsListMembersInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Team members will include the members of child teams.
 *
 * To list members in a team, the team must be visible to the authenticated user.
 */
export const fetchTeamsListMembersInOrg = (
  variables: TeamsListMembersInOrgVariables
) =>
  githubFetch<
    TeamsListMembersInOrgResponse,
    undefined,
    {},
    TeamsListMembersInOrgQueryParams,
    TeamsListMembersInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/members",
    method: "get",
    ...variables,
  });

/**
 * Team members will include the members of child teams.
 *
 * To list members in a team, the team must be visible to the authenticated user.
 */
export const useTeamsListMembersInOrg = (
  variables: TeamsListMembersInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListMembersInOrgResponse,
      undefined,
      TeamsListMembersInOrgResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListMembersInOrgResponse,
    undefined,
    TeamsListMembersInOrgResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/members",
      operationId: "teamsListMembersInOrg",
      variables,
    }),
    () => fetchTeamsListMembersInOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsRemoveMembershipForUserInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  username: string;
};

export type TeamsRemoveMembershipForUserInOrgVariables = {
  pathParams: TeamsRemoveMembershipForUserInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 */
export const fetchTeamsRemoveMembershipForUserInOrg = (
  variables: TeamsRemoveMembershipForUserInOrgVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    TeamsRemoveMembershipForUserInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/memberships/{username}",
    method: "delete",
    ...variables,
  });

/**
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 */
export const useTeamsRemoveMembershipForUserInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      TeamsRemoveMembershipForUserInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    TeamsRemoveMembershipForUserInOrgVariables
  >(
    (variables: TeamsRemoveMembershipForUserInOrgVariables) =>
      fetchTeamsRemoveMembershipForUserInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsGetMembershipForUserInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  username: string;
};

export type TeamsGetMembershipForUserInOrgVariables = {
  pathParams: TeamsGetMembershipForUserInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Team members will include the members of child teams.
 *
 * To get a user's membership with a team, the team must be visible to the authenticated user.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 *
 * **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
 */
export const fetchTeamsGetMembershipForUserInOrg = (
  variables: TeamsGetMembershipForUserInOrgVariables
) =>
  githubFetch<
    Schemas.TeamMembership,
    undefined,
    {},
    {},
    TeamsGetMembershipForUserInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/memberships/{username}",
    method: "get",
    ...variables,
  });

/**
 * Team members will include the members of child teams.
 *
 * To get a user's membership with a team, the team must be visible to the authenticated user.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 *
 * **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
 */
export const useTeamsGetMembershipForUserInOrg = (
  variables: TeamsGetMembershipForUserInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamMembership,
      undefined,
      Schemas.TeamMembership
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamMembership,
    undefined,
    Schemas.TeamMembership
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/memberships/{username}",
      operationId: "teamsGetMembershipForUserInOrg",
      variables,
    }),
    () =>
      fetchTeamsGetMembershipForUserInOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsAddOrUpdateMembershipForUserInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  username: string;
};

export type TeamsAddOrUpdateMembershipForUserInOrgError = {
  errors?: {
    code?: string;
    field?: string;
    resource?: string;
  }[];
  message?: string;
};

export type TeamsAddOrUpdateMembershipForUserInOrgRequestBody = {
  /*
   * The role that this user should have in the team. Can be one of:
   * \* `member` - a normal member of the team.
   * \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
   *
   * @default member
   */
  role?: "member" | "maintainer";
};

export type TeamsAddOrUpdateMembershipForUserInOrgVariables = {
  body?: TeamsAddOrUpdateMembershipForUserInOrgRequestBody;
  pathParams: TeamsAddOrUpdateMembershipForUserInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
 *
 * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 */
export const fetchTeamsAddOrUpdateMembershipForUserInOrg = (
  variables: TeamsAddOrUpdateMembershipForUserInOrgVariables
) =>
  githubFetch<
    Schemas.TeamMembership,
    TeamsAddOrUpdateMembershipForUserInOrgRequestBody,
    {},
    {},
    TeamsAddOrUpdateMembershipForUserInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/memberships/{username}",
    method: "put",
    ...variables,
  });

/**
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
 *
 * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 */
export const useTeamsAddOrUpdateMembershipForUserInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamMembership,
      TeamsAddOrUpdateMembershipForUserInOrgError,
      TeamsAddOrUpdateMembershipForUserInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamMembership,
    TeamsAddOrUpdateMembershipForUserInOrgError,
    TeamsAddOrUpdateMembershipForUserInOrgVariables
  >(
    (variables: TeamsAddOrUpdateMembershipForUserInOrgVariables) =>
      fetchTeamsAddOrUpdateMembershipForUserInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsListProjectsInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
};

export type TeamsListProjectsInOrgQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListProjectsInOrgResponse = Schemas.TeamProject[];

export type TeamsListProjectsInOrgVariables = {
  pathParams: TeamsListProjectsInOrgPathParams;
  queryParams?: TeamsListProjectsInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the organization projects for a team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
 */
export const fetchTeamsListProjectsInOrg = (
  variables: TeamsListProjectsInOrgVariables
) =>
  githubFetch<
    TeamsListProjectsInOrgResponse,
    undefined,
    {},
    TeamsListProjectsInOrgQueryParams,
    TeamsListProjectsInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/projects",
    method: "get",
    ...variables,
  });

/**
 * Lists the organization projects for a team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
 */
export const useTeamsListProjectsInOrg = (
  variables: TeamsListProjectsInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListProjectsInOrgResponse,
      undefined,
      TeamsListProjectsInOrgResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListProjectsInOrgResponse,
    undefined,
    TeamsListProjectsInOrgResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/projects",
      operationId: "teamsListProjectsInOrg",
      variables,
    }),
    () => fetchTeamsListProjectsInOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsRemoveProjectInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  projectId: number;
};

export type TeamsRemoveProjectInOrgVariables = {
  pathParams: TeamsRemoveProjectInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 */
export const fetchTeamsRemoveProjectInOrg = (
  variables: TeamsRemoveProjectInOrgVariables
) =>
  githubFetch<undefined, undefined, {}, {}, TeamsRemoveProjectInOrgPathParams>({
    url: "/orgs/{org}/teams/{teamSlug}/projects/{projectId}",
    method: "delete",
    ...variables,
  });

/**
 * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 */
export const useTeamsRemoveProjectInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      TeamsRemoveProjectInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    TeamsRemoveProjectInOrgVariables
  >(
    (variables: TeamsRemoveProjectInOrgVariables) =>
      fetchTeamsRemoveProjectInOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsCheckPermissionsForProjectInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  projectId: number;
};

export type TeamsCheckPermissionsForProjectInOrgVariables = {
  pathParams: TeamsCheckPermissionsForProjectInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 */
export const fetchTeamsCheckPermissionsForProjectInOrg = (
  variables: TeamsCheckPermissionsForProjectInOrgVariables
) =>
  githubFetch<
    Schemas.TeamProject,
    undefined,
    {},
    {},
    TeamsCheckPermissionsForProjectInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/projects/{projectId}",
    method: "get",
    ...variables,
  });

/**
 * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 */
export const useTeamsCheckPermissionsForProjectInOrg = (
  variables: TeamsCheckPermissionsForProjectInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamProject,
      undefined,
      Schemas.TeamProject
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamProject,
    undefined,
    Schemas.TeamProject
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/projects/{project_id}",
      operationId: "teamsCheckPermissionsForProjectInOrg",
      variables,
    }),
    () =>
      fetchTeamsCheckPermissionsForProjectInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsAddOrUpdateProjectPermissionsInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  projectId: number;
};

export type TeamsAddOrUpdateProjectPermissionsInOrgError = {
  documentation_url?: string;
  message?: string;
};

export type TeamsAddOrUpdateProjectPermissionsInOrgVariables = {
  body?: {
    /*
     * The permission to grant to the team for this project. Can be one of:
     * \* `read` - team members can read, but not write to or administer this project.
     * \* `write` - team members can read and write, but not administer this project.
     * \* `admin` - team members can read, write and administer this project.
     * Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
     */
    permission?: "read" | "write" | "admin";
  } | null;
  pathParams: TeamsAddOrUpdateProjectPermissionsInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 */
export const fetchTeamsAddOrUpdateProjectPermissionsInOrg = (
  variables: TeamsAddOrUpdateProjectPermissionsInOrgVariables
) =>
  githubFetch<
    undefined,
    {
      /*
       * The permission to grant to the team for this project. Can be one of:
       * \* `read` - team members can read, but not write to or administer this project.
       * \* `write` - team members can read and write, but not administer this project.
       * \* `admin` - team members can read, write and administer this project.
       * Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
       */
      permission?: "read" | "write" | "admin";
    } | null,
    {},
    {},
    TeamsAddOrUpdateProjectPermissionsInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/projects/{projectId}",
    method: "put",
    ...variables,
  });

/**
 * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 */
export const useTeamsAddOrUpdateProjectPermissionsInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TeamsAddOrUpdateProjectPermissionsInOrgError,
      TeamsAddOrUpdateProjectPermissionsInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    TeamsAddOrUpdateProjectPermissionsInOrgError,
    TeamsAddOrUpdateProjectPermissionsInOrgVariables
  >(
    (variables: TeamsAddOrUpdateProjectPermissionsInOrgVariables) =>
      fetchTeamsAddOrUpdateProjectPermissionsInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsListReposInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
};

export type TeamsListReposInOrgQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListReposInOrgResponse = Schemas.MinimalRepository[];

export type TeamsListReposInOrgVariables = {
  pathParams: TeamsListReposInOrgPathParams;
  queryParams?: TeamsListReposInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists a team's repositories visible to the authenticated user.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
 */
export const fetchTeamsListReposInOrg = (
  variables: TeamsListReposInOrgVariables
) =>
  githubFetch<
    TeamsListReposInOrgResponse,
    undefined,
    {},
    TeamsListReposInOrgQueryParams,
    TeamsListReposInOrgPathParams
  >({ url: "/orgs/{org}/teams/{teamSlug}/repos", method: "get", ...variables });

/**
 * Lists a team's repositories visible to the authenticated user.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
 */
export const useTeamsListReposInOrg = (
  variables: TeamsListReposInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListReposInOrgResponse,
      undefined,
      TeamsListReposInOrgResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListReposInOrgResponse,
    undefined,
    TeamsListReposInOrgResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/repos",
      operationId: "teamsListReposInOrg",
      variables,
    }),
    () => fetchTeamsListReposInOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsRemoveRepoInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  owner: string;
  repo: string;
};

export type TeamsRemoveRepoInOrgVariables = {
  pathParams: TeamsRemoveRepoInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 */
export const fetchTeamsRemoveRepoInOrg = (
  variables: TeamsRemoveRepoInOrgVariables
) =>
  githubFetch<undefined, undefined, {}, {}, TeamsRemoveRepoInOrgPathParams>({
    url: "/orgs/{org}/teams/{teamSlug}/repos/{owner}/{repo}",
    method: "delete",
    ...variables,
  });

/**
 * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 */
export const useTeamsRemoveRepoInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      TeamsRemoveRepoInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    TeamsRemoveRepoInOrgVariables
  >(
    (variables: TeamsRemoveRepoInOrgVariables) =>
      fetchTeamsRemoveRepoInOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsCheckPermissionsForRepoInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  owner: string;
  repo: string;
};

export type TeamsCheckPermissionsForRepoInOrgVariables = {
  pathParams: TeamsCheckPermissionsForRepoInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
 *
 * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.
 *
 * If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 */
export const fetchTeamsCheckPermissionsForRepoInOrg = (
  variables: TeamsCheckPermissionsForRepoInOrgVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    TeamsCheckPermissionsForRepoInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/repos/{owner}/{repo}",
    method: "get",
    ...variables,
  });

/**
 * Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
 *
 * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.
 *
 * If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 */
export const useTeamsCheckPermissionsForRepoInOrg = (
  variables: TeamsCheckPermissionsForRepoInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, undefined, undefined>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, undefined, undefined>(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
      operationId: "teamsCheckPermissionsForRepoInOrg",
      variables,
    }),
    () =>
      fetchTeamsCheckPermissionsForRepoInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsAddOrUpdateRepoPermissionsInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
  owner: string;
  repo: string;
};

export type TeamsAddOrUpdateRepoPermissionsInOrgRequestBody = {
  /*
   * The permission to grant the team on this repository. Can be one of:
   * \* `pull` - team members can pull, but not push to or administer this repository.
   * \* `push` - team members can pull and push, but not administer this repository.
   * \* `admin` - team members can pull, push and administer this repository.
   * \* `maintain` - team members can manage the repository without access to sensitive or destructive actions. Recommended for project managers. Only applies to repositories owned by organizations.
   * \* `triage` - team members can proactively manage issues and pull requests without write access. Recommended for contributors who triage a repository. Only applies to repositories owned by organizations.
   *
   * If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
   */
  permission?: "pull" | "push" | "admin" | "maintain" | "triage";
};

export type TeamsAddOrUpdateRepoPermissionsInOrgVariables = {
  body?: TeamsAddOrUpdateRepoPermissionsInOrgRequestBody;
  pathParams: TeamsAddOrUpdateRepoPermissionsInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 *
 * For more information about the permission levels, see "[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
 */
export const fetchTeamsAddOrUpdateRepoPermissionsInOrg = (
  variables: TeamsAddOrUpdateRepoPermissionsInOrgVariables
) =>
  githubFetch<
    undefined,
    TeamsAddOrUpdateRepoPermissionsInOrgRequestBody,
    {},
    {},
    TeamsAddOrUpdateRepoPermissionsInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/repos/{owner}/{repo}",
    method: "put",
    ...variables,
  });

/**
 * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 *
 * For more information about the permission levels, see "[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
 */
export const useTeamsAddOrUpdateRepoPermissionsInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      TeamsAddOrUpdateRepoPermissionsInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    TeamsAddOrUpdateRepoPermissionsInOrgVariables
  >(
    (variables: TeamsAddOrUpdateRepoPermissionsInOrgVariables) =>
      fetchTeamsAddOrUpdateRepoPermissionsInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsListIdpGroupsInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
};

export type TeamsListIdpGroupsInOrgVariables = {
  pathParams: TeamsListIdpGroupsInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * List IdP groups connected to a team on GitHub.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
 */
export const fetchTeamsListIdpGroupsInOrg = (
  variables: TeamsListIdpGroupsInOrgVariables
) =>
  githubFetch<
    Schemas.GroupMapping,
    undefined,
    {},
    {},
    TeamsListIdpGroupsInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/team-sync/group-mappings",
    method: "get",
    ...variables,
  });

/**
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * List IdP groups connected to a team on GitHub.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
 */
export const useTeamsListIdpGroupsInOrg = (
  variables: TeamsListIdpGroupsInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GroupMapping,
      undefined,
      Schemas.GroupMapping
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.GroupMapping,
    undefined,
    Schemas.GroupMapping
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/team-sync/group-mappings",
      operationId: "teamsListIdpGroupsInOrg",
      variables,
    }),
    () => fetchTeamsListIdpGroupsInOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsCreateOrUpdateIdpGroupConnectionsInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
};

export type TeamsCreateOrUpdateIdpGroupConnectionsInOrgRequestBody = {
  /*
   * The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove.
   */
  groups: {
    /*
     * Description of the IdP group.
     */
    group_description: string;
    /*
     * ID of the IdP group.
     */
    group_id: string;
    /*
     * Name of the IdP group.
     */
    group_name: string;
  }[];
};

export type TeamsCreateOrUpdateIdpGroupConnectionsInOrgVariables = {
  body: TeamsCreateOrUpdateIdpGroupConnectionsInOrgRequestBody;
  pathParams: TeamsCreateOrUpdateIdpGroupConnectionsInOrgPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
 */
export const fetchTeamsCreateOrUpdateIdpGroupConnectionsInOrg = (
  variables: TeamsCreateOrUpdateIdpGroupConnectionsInOrgVariables
) =>
  githubFetch<
    Schemas.GroupMapping,
    TeamsCreateOrUpdateIdpGroupConnectionsInOrgRequestBody,
    {},
    {},
    TeamsCreateOrUpdateIdpGroupConnectionsInOrgPathParams
  >({
    url: "/orgs/{org}/teams/{teamSlug}/team-sync/group-mappings",
    method: "patch",
    ...variables,
  });

/**
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
 */
export const useTeamsCreateOrUpdateIdpGroupConnectionsInOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GroupMapping,
      undefined,
      TeamsCreateOrUpdateIdpGroupConnectionsInOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GroupMapping,
    undefined,
    TeamsCreateOrUpdateIdpGroupConnectionsInOrgVariables
  >(
    (variables: TeamsCreateOrUpdateIdpGroupConnectionsInOrgVariables) =>
      fetchTeamsCreateOrUpdateIdpGroupConnectionsInOrg({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsListChildInOrgPathParams = {
  org: string;
  /*
   * team_slug parameter
   */
  teamSlug: string;
};

export type TeamsListChildInOrgQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListChildInOrgResponse = Schemas.Team[];

export type TeamsListChildInOrgVariables = {
  pathParams: TeamsListChildInOrgPathParams;
  queryParams?: TeamsListChildInOrgQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the child teams of the team specified by `{team_slug}`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
 */
export const fetchTeamsListChildInOrg = (
  variables: TeamsListChildInOrgVariables
) =>
  githubFetch<
    TeamsListChildInOrgResponse,
    undefined,
    {},
    TeamsListChildInOrgQueryParams,
    TeamsListChildInOrgPathParams
  >({ url: "/orgs/{org}/teams/{teamSlug}/teams", method: "get", ...variables });

/**
 * Lists the child teams of the team specified by `{team_slug}`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
 */
export const useTeamsListChildInOrg = (
  variables: TeamsListChildInOrgVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListChildInOrgResponse,
      undefined,
      TeamsListChildInOrgResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListChildInOrgResponse,
    undefined,
    TeamsListChildInOrgResponse
  >(
    queryKeyFn({
      path: "/orgs/{org}/teams/{team_slug}/teams",
      operationId: "teamsListChildInOrg",
      variables,
    }),
    () => fetchTeamsListChildInOrg({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectsDeleteCardPathParams = {
  /*
   * card_id parameter
   */
  cardId: number;
};

export type ProjectsDeleteCardVariables = {
  pathParams: ProjectsDeleteCardPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsDeleteCard = (
  variables: ProjectsDeleteCardVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ProjectsDeleteCardPathParams>({
    url: "/projects/columns/cards/{cardId}",
    method: "delete",
    ...variables,
  });

export const useProjectsDeleteCard = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | {
          documentation_url?: string;
          errors?: string[];
          message?: string;
        }
      | Responses.NotFound,
      ProjectsDeleteCardVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | {
        documentation_url?: string;
        errors?: string[];
        message?: string;
      }
    | Responses.NotFound,
    ProjectsDeleteCardVariables
  >(
    (variables: ProjectsDeleteCardVariables) =>
      fetchProjectsDeleteCard({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectsGetCardPathParams = {
  /*
   * card_id parameter
   */
  cardId: number;
};

export type ProjectsGetCardVariables = {
  pathParams: ProjectsGetCardPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsGetCard = (variables: ProjectsGetCardVariables) =>
  githubFetch<
    Schemas.ProjectCard,
    undefined,
    {},
    {},
    ProjectsGetCardPathParams
  >({ url: "/projects/columns/cards/{cardId}", method: "get", ...variables });

export const useProjectsGetCard = (
  variables: ProjectsGetCardVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProjectCard,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      Schemas.ProjectCard
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ProjectCard,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound,
    Schemas.ProjectCard
  >(
    queryKeyFn({
      path: "/projects/columns/cards/{card_id}",
      operationId: "projectsGetCard",
      variables,
    }),
    () => fetchProjectsGetCard({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectsUpdateCardPathParams = {
  /*
   * card_id parameter
   */
  cardId: number;
};

export type ProjectsUpdateCardRequestBody = {
  /*
   * Whether or not the card is archived
   *
   * @example false
   */
  archived?: boolean;
  /*
   * The project card's note
   *
   * @example Update all gems
   */
  note?: string | null;
};

export type ProjectsUpdateCardVariables = {
  body?: ProjectsUpdateCardRequestBody;
  pathParams: ProjectsUpdateCardPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsUpdateCard = (
  variables: ProjectsUpdateCardVariables
) =>
  githubFetch<
    Schemas.ProjectCard,
    ProjectsUpdateCardRequestBody,
    {},
    {},
    ProjectsUpdateCardPathParams
  >({ url: "/projects/columns/cards/{cardId}", method: "patch", ...variables });

export const useProjectsUpdateCard = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProjectCard,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.ValidationFailedSimple,
      ProjectsUpdateCardVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ProjectCard,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.ValidationFailedSimple,
    ProjectsUpdateCardVariables
  >(
    (variables: ProjectsUpdateCardVariables) =>
      fetchProjectsUpdateCard({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectsMoveCardPathParams = {
  /*
   * card_id parameter
   */
  cardId: number;
};

export type ProjectsMoveCardRequestBody = {
  /*
   * The unique identifier of the column the card should be moved to
   *
   * @example 42
   */
  column_id?: number;
  /*
   * The position of the card in a column
   *
   * @example bottom
   * @pattern ^(?:top|bottom|after:\d+)$
   */
  position: string;
};

export type ProjectsMoveCardVariables = {
  body: ProjectsMoveCardRequestBody;
  pathParams: ProjectsMoveCardPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsMoveCard = (variables: ProjectsMoveCardVariables) =>
  githubFetch<
    {},
    ProjectsMoveCardRequestBody,
    {},
    {},
    ProjectsMoveCardPathParams
  >({
    url: "/projects/columns/cards/{cardId}/moves",
    method: "post",
    ...variables,
  });

export const useProjectsMoveCard = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      {},
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | {
          documentation_url?: string;
          errors?: {
            code?: string;
            field?: string;
            message?: string;
            resource?: string;
          }[];
          message?: string;
        }
      | Responses.ValidationFailed
      | {
          code?: string;
          documentation_url?: string;
          errors?: {
            code?: string;
            message?: string;
          }[];
          message?: string;
        },
      ProjectsMoveCardVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    {},
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | {
        documentation_url?: string;
        errors?: {
          code?: string;
          field?: string;
          message?: string;
          resource?: string;
        }[];
        message?: string;
      }
    | Responses.ValidationFailed
    | {
        code?: string;
        documentation_url?: string;
        errors?: {
          code?: string;
          message?: string;
        }[];
        message?: string;
      },
    ProjectsMoveCardVariables
  >(
    (variables: ProjectsMoveCardVariables) =>
      fetchProjectsMoveCard({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectsDeleteColumnPathParams = {
  /*
   * column_id parameter
   */
  columnId: number;
};

export type ProjectsDeleteColumnVariables = {
  pathParams: ProjectsDeleteColumnPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsDeleteColumn = (
  variables: ProjectsDeleteColumnVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ProjectsDeleteColumnPathParams>({
    url: "/projects/columns/{columnId}",
    method: "delete",
    ...variables,
  });

export const useProjectsDeleteColumn = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden,
      ProjectsDeleteColumnVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden,
    ProjectsDeleteColumnVariables
  >(
    (variables: ProjectsDeleteColumnVariables) =>
      fetchProjectsDeleteColumn({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectsGetColumnPathParams = {
  /*
   * column_id parameter
   */
  columnId: number;
};

export type ProjectsGetColumnVariables = {
  pathParams: ProjectsGetColumnPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsGetColumn = (variables: ProjectsGetColumnVariables) =>
  githubFetch<
    Schemas.ProjectColumn,
    undefined,
    {},
    {},
    ProjectsGetColumnPathParams
  >({ url: "/projects/columns/{columnId}", method: "get", ...variables });

export const useProjectsGetColumn = (
  variables: ProjectsGetColumnVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProjectColumn,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      Schemas.ProjectColumn
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ProjectColumn,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound,
    Schemas.ProjectColumn
  >(
    queryKeyFn({
      path: "/projects/columns/{column_id}",
      operationId: "projectsGetColumn",
      variables,
    }),
    () => fetchProjectsGetColumn({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectsUpdateColumnPathParams = {
  /*
   * column_id parameter
   */
  columnId: number;
};

export type ProjectsUpdateColumnRequestBody = {
  /*
   * Name of the project column
   *
   * @example Remaining tasks
   */
  name: string;
};

export type ProjectsUpdateColumnVariables = {
  body: ProjectsUpdateColumnRequestBody;
  pathParams: ProjectsUpdateColumnPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsUpdateColumn = (
  variables: ProjectsUpdateColumnVariables
) =>
  githubFetch<
    Schemas.ProjectColumn,
    ProjectsUpdateColumnRequestBody,
    {},
    {},
    ProjectsUpdateColumnPathParams
  >({ url: "/projects/columns/{columnId}", method: "patch", ...variables });

export const useProjectsUpdateColumn = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProjectColumn,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden,
      ProjectsUpdateColumnVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ProjectColumn,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden,
    ProjectsUpdateColumnVariables
  >(
    (variables: ProjectsUpdateColumnVariables) =>
      fetchProjectsUpdateColumn({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectsListCardsPathParams = {
  /*
   * column_id parameter
   */
  columnId: number;
};

export type ProjectsListCardsQueryParams = {
  /*
   * Filters the project cards that are returned by the card's state. Can be one of `all`,`archived`, or `not_archived`.
   *
   * @default not_archived
   */
  archived_state?: "all" | "archived" | "not_archived";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ProjectsListCardsResponse = Schemas.ProjectCard[];

export type ProjectsListCardsVariables = {
  pathParams: ProjectsListCardsPathParams;
  queryParams?: ProjectsListCardsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsListCards = (variables: ProjectsListCardsVariables) =>
  githubFetch<
    ProjectsListCardsResponse,
    undefined,
    {},
    ProjectsListCardsQueryParams,
    ProjectsListCardsPathParams
  >({ url: "/projects/columns/{columnId}/cards", method: "get", ...variables });

export const useProjectsListCards = (
  variables: ProjectsListCardsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectsListCardsResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden,
      ProjectsListCardsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ProjectsListCardsResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden,
    ProjectsListCardsResponse
  >(
    queryKeyFn({
      path: "/projects/columns/{column_id}/cards",
      operationId: "projectsListCards",
      variables,
    }),
    () => fetchProjectsListCards({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectsCreateCardPathParams = {
  /*
   * column_id parameter
   */
  columnId: number;
};

export type ProjectsCreateCardVariables = {
  body?:
    | {
        /*
         * The project card's note
         *
         * @example Update all gems
         */
        note: string | null;
      }
    | {
        /*
         * The unique identifier of the content associated with the card
         *
         * @example 42
         */
        content_id: number;
        /*
         * The piece of content associated with the card
         *
         * @example PullRequest
         */
        content_type: string;
      };
  pathParams: ProjectsCreateCardPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.
 *
 * Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const fetchProjectsCreateCard = (
  variables: ProjectsCreateCardVariables
) =>
  githubFetch<
    Schemas.ProjectCard,
    | {
        /*
         * The project card's note
         *
         * @example Update all gems
         */
        note: string | null;
      }
    | {
        /*
         * The unique identifier of the content associated with the card
         *
         * @example 42
         */
        content_id: number;
        /*
         * The piece of content associated with the card
         *
         * @example PullRequest
         */
        content_type: string;
      },
    {},
    {},
    ProjectsCreateCardPathParams
  >({
    url: "/projects/columns/{columnId}/cards",
    method: "post",
    ...variables,
  });

/**
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.
 *
 * Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const useProjectsCreateCard = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProjectCard,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | (Schemas.ValidationError | Schemas.ValidationErrorSimple)
      | {
          code?: string;
          documentation_url?: string;
          errors?: {
            code?: string;
            message?: string;
          }[];
          message?: string;
        },
      ProjectsCreateCardVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ProjectCard,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | (Schemas.ValidationError | Schemas.ValidationErrorSimple)
    | {
        code?: string;
        documentation_url?: string;
        errors?: {
          code?: string;
          message?: string;
        }[];
        message?: string;
      },
    ProjectsCreateCardVariables
  >(
    (variables: ProjectsCreateCardVariables) =>
      fetchProjectsCreateCard({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectsMoveColumnPathParams = {
  /*
   * column_id parameter
   */
  columnId: number;
};

export type ProjectsMoveColumnRequestBody = {
  /*
   * The position of the column in a project
   *
   * @example last
   * @pattern ^(?:first|last|after:\d+)$
   */
  position: string;
};

export type ProjectsMoveColumnVariables = {
  body: ProjectsMoveColumnRequestBody;
  pathParams: ProjectsMoveColumnPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsMoveColumn = (
  variables: ProjectsMoveColumnVariables
) =>
  githubFetch<
    {},
    ProjectsMoveColumnRequestBody,
    {},
    {},
    ProjectsMoveColumnPathParams
  >({
    url: "/projects/columns/{columnId}/moves",
    method: "post",
    ...variables,
  });

export const useProjectsMoveColumn = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      {},
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.ValidationFailedSimple,
      ProjectsMoveColumnVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    {},
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.ValidationFailedSimple,
    ProjectsMoveColumnVariables
  >(
    (variables: ProjectsMoveColumnVariables) =>
      fetchProjectsMoveColumn({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectsDeletePathParams = {
  projectId: number;
};

export type ProjectsDeleteVariables = {
  pathParams: ProjectsDeletePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
 */
export const fetchProjectsDelete = (variables: ProjectsDeleteVariables) =>
  githubFetch<undefined, undefined, {}, {}, ProjectsDeletePathParams>({
    url: "/projects/{projectId}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
 */
export const useProjectsDelete = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | {
          documentation_url?: string;
          errors?: string[];
          message?: string;
        }
      | Responses.NotFound
      | Responses.Gone,
      ProjectsDeleteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | {
        documentation_url?: string;
        errors?: string[];
        message?: string;
      }
    | Responses.NotFound
    | Responses.Gone,
    ProjectsDeleteVariables
  >(
    (variables: ProjectsDeleteVariables) =>
      fetchProjectsDelete({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectsGetPathParams = {
  projectId: number;
};

export type ProjectsGetVariables = {
  pathParams: ProjectsGetPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const fetchProjectsGet = (variables: ProjectsGetVariables) =>
  githubFetch<Schemas.Project, undefined, {}, {}, ProjectsGetPathParams>({
    url: "/projects/{projectId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const useProjectsGet = (
  variables: ProjectsGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Project,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden,
      Schemas.Project
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Project,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden,
    Schemas.Project
  >(
    queryKeyFn({
      path: "/projects/{project_id}",
      operationId: "projectsGet",
      variables,
    }),
    () => fetchProjectsGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectsUpdatePathParams = {
  projectId: number;
};

export type ProjectsUpdateRequestBody = {
  /*
   * Body of the project
   *
   * @example This project represents the sprint of the first week in January
   */
  body?: string | null;
  /*
   * Name of the project
   *
   * @example Week One Sprint
   */
  name?: string;
  /*
   * The baseline permission that all organization members have on this project
   */
  organization_permission?: "read" | "write" | "admin" | "none";
  /*
   * Whether or not this project can be seen by everyone.
   */
  private?: boolean;
  /*
   * State of the project; either 'open' or 'closed'
   *
   * @example open
   */
  state?: string;
};

export type ProjectsUpdateVariables = {
  body?: ProjectsUpdateRequestBody;
  pathParams: ProjectsUpdatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const fetchProjectsUpdate = (variables: ProjectsUpdateVariables) =>
  githubFetch<
    Schemas.Project,
    ProjectsUpdateRequestBody,
    {},
    {},
    ProjectsUpdatePathParams
  >({ url: "/projects/{projectId}", method: "patch", ...variables });

/**
 * Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const useProjectsUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Project,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | {
          documentation_url?: string;
          errors?: string[];
          message?: string;
        }
      | Responses.Gone
      | Responses.ValidationFailedSimple,
      ProjectsUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Project,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | {
        documentation_url?: string;
        errors?: string[];
        message?: string;
      }
    | Responses.Gone
    | Responses.ValidationFailedSimple,
    ProjectsUpdateVariables
  >(
    (variables: ProjectsUpdateVariables) =>
      fetchProjectsUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectsListCollaboratorsPathParams = {
  projectId: number;
};

export type ProjectsListCollaboratorsQueryParams = {
  /*
   * Filters the collaborators by their affiliation. Can be one of:
   * \* `outside`: Outside collaborators of a project that are not a member of the project's organization.
   * \* `direct`: Collaborators with permissions to a project, regardless of organization membership status.
   * \* `all`: All collaborators the authenticated user can see.
   *
   * @default all
   */
  affiliation?: "outside" | "direct" | "all";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ProjectsListCollaboratorsResponse = Schemas.SimpleUser[];

export type ProjectsListCollaboratorsVariables = {
  pathParams: ProjectsListCollaboratorsPathParams;
  queryParams?: ProjectsListCollaboratorsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
 */
export const fetchProjectsListCollaborators = (
  variables: ProjectsListCollaboratorsVariables
) =>
  githubFetch<
    ProjectsListCollaboratorsResponse,
    undefined,
    {},
    ProjectsListCollaboratorsQueryParams,
    ProjectsListCollaboratorsPathParams
  >({
    url: "/projects/{projectId}/collaborators",
    method: "get",
    ...variables,
  });

/**
 * Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
 */
export const useProjectsListCollaborators = (
  variables: ProjectsListCollaboratorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectsListCollaboratorsResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.PreviewHeaderMissing
      | Responses.ValidationFailed,
      ProjectsListCollaboratorsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ProjectsListCollaboratorsResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.PreviewHeaderMissing
    | Responses.ValidationFailed,
    ProjectsListCollaboratorsResponse
  >(
    queryKeyFn({
      path: "/projects/{project_id}/collaborators",
      operationId: "projectsListCollaborators",
      variables,
    }),
    () => fetchProjectsListCollaborators({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectsRemoveCollaboratorPathParams = {
  projectId: number;
  username: string;
};

export type ProjectsRemoveCollaboratorVariables = {
  pathParams: ProjectsRemoveCollaboratorPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
 */
export const fetchProjectsRemoveCollaborator = (
  variables: ProjectsRemoveCollaboratorVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ProjectsRemoveCollaboratorPathParams
  >({
    url: "/projects/{projectId}/collaborators/{username}",
    method: "delete",
    ...variables,
  });

/**
 * Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
 */
export const useProjectsRemoveCollaborator = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.PreviewHeaderMissing
      | Responses.ValidationFailed,
      ProjectsRemoveCollaboratorVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.PreviewHeaderMissing
    | Responses.ValidationFailed,
    ProjectsRemoveCollaboratorVariables
  >(
    (variables: ProjectsRemoveCollaboratorVariables) =>
      fetchProjectsRemoveCollaborator({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectsAddCollaboratorPathParams = {
  projectId: number;
  username: string;
};

export type ProjectsAddCollaboratorRequestBody = {
  /*
   * The permission to grant the collaborator.
   *
   * @default write
   * @example write
   */
  permission?: "read" | "write" | "admin";
};

export type ProjectsAddCollaboratorVariables = {
  body?: ProjectsAddCollaboratorRequestBody;
  pathParams: ProjectsAddCollaboratorPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
 */
export const fetchProjectsAddCollaborator = (
  variables: ProjectsAddCollaboratorVariables
) =>
  githubFetch<
    undefined,
    ProjectsAddCollaboratorRequestBody,
    {},
    {},
    ProjectsAddCollaboratorPathParams
  >({
    url: "/projects/{projectId}/collaborators/{username}",
    method: "put",
    ...variables,
  });

/**
 * Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
 */
export const useProjectsAddCollaborator = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.PreviewHeaderMissing
      | Responses.ValidationFailed,
      ProjectsAddCollaboratorVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.PreviewHeaderMissing
    | Responses.ValidationFailed,
    ProjectsAddCollaboratorVariables
  >(
    (variables: ProjectsAddCollaboratorVariables) =>
      fetchProjectsAddCollaborator({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProjectsGetPermissionForUserPathParams = {
  projectId: number;
  username: string;
};

export type ProjectsGetPermissionForUserVariables = {
  pathParams: ProjectsGetPermissionForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
 */
export const fetchProjectsGetPermissionForUser = (
  variables: ProjectsGetPermissionForUserVariables
) =>
  githubFetch<
    Schemas.RepositoryCollaboratorPermission,
    undefined,
    {},
    {},
    ProjectsGetPermissionForUserPathParams
  >({
    url: "/projects/{projectId}/collaborators/{username}/permission",
    method: "get",
    ...variables,
  });

/**
 * Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
 */
export const useProjectsGetPermissionForUser = (
  variables: ProjectsGetPermissionForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RepositoryCollaboratorPermission,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.PreviewHeaderMissing
      | Responses.ValidationFailed,
      Schemas.RepositoryCollaboratorPermission
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.RepositoryCollaboratorPermission,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.PreviewHeaderMissing
    | Responses.ValidationFailed,
    Schemas.RepositoryCollaboratorPermission
  >(
    queryKeyFn({
      path: "/projects/{project_id}/collaborators/{username}/permission",
      operationId: "projectsGetPermissionForUser",
      variables,
    }),
    () =>
      fetchProjectsGetPermissionForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectsListColumnsPathParams = {
  projectId: number;
};

export type ProjectsListColumnsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ProjectsListColumnsResponse = Schemas.ProjectColumn[];

export type ProjectsListColumnsVariables = {
  pathParams: ProjectsListColumnsPathParams;
  queryParams?: ProjectsListColumnsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsListColumns = (
  variables: ProjectsListColumnsVariables
) =>
  githubFetch<
    ProjectsListColumnsResponse,
    undefined,
    {},
    ProjectsListColumnsQueryParams,
    ProjectsListColumnsPathParams
  >({ url: "/projects/{projectId}/columns", method: "get", ...variables });

export const useProjectsListColumns = (
  variables: ProjectsListColumnsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectsListColumnsResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden,
      ProjectsListColumnsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ProjectsListColumnsResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden,
    ProjectsListColumnsResponse
  >(
    queryKeyFn({
      path: "/projects/{project_id}/columns",
      operationId: "projectsListColumns",
      variables,
    }),
    () => fetchProjectsListColumns({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectsCreateColumnPathParams = {
  projectId: number;
};

export type ProjectsCreateColumnRequestBody = {
  /*
   * Name of the project column
   *
   * @example Remaining tasks
   */
  name: string;
};

export type ProjectsCreateColumnVariables = {
  body: ProjectsCreateColumnRequestBody;
  pathParams: ProjectsCreateColumnPathParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsCreateColumn = (
  variables: ProjectsCreateColumnVariables
) =>
  githubFetch<
    Schemas.ProjectColumn,
    ProjectsCreateColumnRequestBody,
    {},
    {},
    ProjectsCreateColumnPathParams
  >({ url: "/projects/{projectId}/columns", method: "post", ...variables });

export const useProjectsCreateColumn = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProjectColumn,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.ValidationFailedSimple,
      ProjectsCreateColumnVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ProjectColumn,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.ValidationFailedSimple,
    ProjectsCreateColumnVariables
  >(
    (variables: ProjectsCreateColumnVariables) =>
      fetchProjectsCreateColumn({ ...fetcherOptions, ...variables }),
    options
  );
};

export type RateLimitGetVariables = GithubContext["fetcherOptions"];

/**
 * **Note:** Accessing this endpoint does not count against your REST API rate limit.
 *
 * **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
 */
export const fetchRateLimitGet = (variables: RateLimitGetVariables) =>
  githubFetch<Schemas.RateLimitOverview, undefined, {}, {}, {}>({
    url: "/rate_limit",
    method: "get",
    ...variables,
  });

/**
 * **Note:** Accessing this endpoint does not count against your REST API rate limit.
 *
 * **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
 */
export const useRateLimitGet = (
  variables: RateLimitGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RateLimitOverview,
      Responses.NotModified | Responses.NotFound,
      Schemas.RateLimitOverview
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.RateLimitOverview,
    Responses.NotModified | Responses.NotFound,
    Schemas.RateLimitOverview
  >(
    queryKeyFn({ path: "/rate_limit", operationId: "rateLimitGet", variables }),
    () => fetchRateLimitGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReactionsDeleteLegacyPathParams = {
  reactionId: number;
};

export type ReactionsDeleteLegacyVariables = {
  pathParams: ReactionsDeleteLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).
 *
 * OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments).
 */
export const fetchReactionsDeleteLegacy = (
  variables: ReactionsDeleteLegacyVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ReactionsDeleteLegacyPathParams>({
    url: "/reactions/{reactionId}",
    method: "delete",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).
 *
 * OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments).
 */
export const useReactionsDeleteLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.Gone
      | Responses.PreviewHeaderMissing,
      ReactionsDeleteLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.Gone
    | Responses.PreviewHeaderMissing,
    ReactionsDeleteLegacyVariables
  >(
    (variables: ReactionsDeleteLegacyVariables) =>
      fetchReactionsDeleteLegacy({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposDeletePathParams = {
  owner: string;
  repo: string;
};

export type ReposDeleteVariables = {
  pathParams: ReposDeletePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.
 *
 * If an organization owner has configured the organization to prevent members from deleting organization-owned
 * repositories, you will get a `403 Forbidden` response.
 */
export const fetchReposDelete = (variables: ReposDeleteVariables) =>
  githubFetch<undefined, undefined, {}, {}, ReposDeletePathParams>({
    url: "/repos/{owner}/{repo}",
    method: "delete",
    ...variables,
  });

/**
 * Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.
 *
 * If an organization owner has configured the organization to prevent members from deleting organization-owned
 * repositories, you will get a `403 Forbidden` response.
 */
export const useReposDelete = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | {
          documentation_url?: string;
          message?: string;
        }
      | Responses.NotFound,
      ReposDeleteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | {
        documentation_url?: string;
        message?: string;
      }
    | Responses.NotFound,
    ReposDeleteVariables
  >(
    (variables: ReposDeleteVariables) =>
      fetchReposDelete({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetVariables = {
  pathParams: ReposGetPathParams;
} & GithubContext["fetcherOptions"];

/**
 * When you pass the `scarlet-witch-preview` media type, requests to get a repository will also return the repository's code of conduct if it can be detected from the repository's code of conduct file.
 *
 * The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
 */
export const fetchReposGet = (variables: ReposGetVariables) =>
  githubFetch<Schemas.FullRepository, undefined, {}, {}, ReposGetPathParams>({
    url: "/repos/{owner}/{repo}",
    method: "get",
    ...variables,
  });

/**
 * When you pass the `scarlet-witch-preview` media type, requests to get a repository will also return the repository's code of conduct if it can be detected from the repository's code of conduct file.
 *
 * The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
 */
export const useReposGet = (
  variables: ReposGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.FullRepository,
      Responses.MovedPermanently | Responses.Forbidden | Responses.NotFound,
      Schemas.FullRepository
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.FullRepository,
    Responses.MovedPermanently | Responses.Forbidden | Responses.NotFound,
    Schemas.FullRepository
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}",
      operationId: "reposGet",
      variables,
    }),
    () => fetchReposGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposUpdatePathParams = {
  owner: string;
  repo: string;
};

export type ReposUpdateRequestBody = {
  /*
   * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
   *
   * @default true
   */
  allow_merge_commit?: boolean;
  /*
   * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
   *
   * @default true
   */
  allow_rebase_merge?: boolean;
  /*
   * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
   *
   * @default true
   */
  allow_squash_merge?: boolean;
  /*
   * `true` to archive this repository. **Note**: You cannot unarchive repositories through the API.
   *
   * @default false
   */
  archived?: boolean;
  /*
   * Updates the default branch for this repository.
   */
  default_branch?: string;
  /*
   * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
   *
   * @default false
   */
  delete_branch_on_merge?: boolean;
  /*
   * A short description of the repository.
   */
  description?: string;
  /*
   * Either `true` to enable issues for this repository or `false` to disable them.
   *
   * @default true
   */
  has_issues?: boolean;
  /*
   * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
   *
   * @default true
   */
  has_projects?: boolean;
  /*
   * Either `true` to enable the wiki for this repository or `false` to disable it.
   *
   * @default true
   */
  has_wiki?: boolean;
  /*
   * A URL with more information about the repository.
   */
  homepage?: string;
  /*
   * Either `true` to make this repo available as a template repository or `false` to prevent it.
   *
   * @default false
   */
  is_template?: boolean;
  /*
   * The name of the repository.
   */
  name?: string;
  /*
   * Either `true` to make the repository private or `false` to make it public. Default: `false`.
   * **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
   *
   * @default false
   */
  private?: boolean;
  /*
   * Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. The `visibility` parameter overrides the `private` parameter when you use both along with the `nebula-preview` preview header.
   */
  visibility?: "public" | "private" | "visibility" | "internal";
};

export type ReposUpdateVariables = {
  body?: ReposUpdateRequestBody;
  pathParams: ReposUpdatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/reference/repos#replace-all-repository-topics) endpoint.
 */
export const fetchReposUpdate = (variables: ReposUpdateVariables) =>
  githubFetch<
    Schemas.FullRepository,
    ReposUpdateRequestBody,
    {},
    {},
    ReposUpdatePathParams
  >({ url: "/repos/{owner}/{repo}", method: "patch", ...variables });

/**
 * **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/reference/repos#replace-all-repository-topics) endpoint.
 */
export const useReposUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FullRepository,
      Responses.Forbidden | Responses.NotFound | Responses.ValidationFailed,
      ReposUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.FullRepository,
    Responses.Forbidden | Responses.NotFound | Responses.ValidationFailed,
    ReposUpdateVariables
  >(
    (variables: ReposUpdateVariables) =>
      fetchReposUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsListArtifactsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type ActionsListArtifactsForRepoQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListArtifactsForRepoResponse = {
  artifacts: Schemas.Artifact[];
  total_count: number;
};

export type ActionsListArtifactsForRepoVariables = {
  pathParams: ActionsListArtifactsForRepoPathParams;
  queryParams?: ActionsListArtifactsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsListArtifactsForRepo = (
  variables: ActionsListArtifactsForRepoVariables
) =>
  githubFetch<
    ActionsListArtifactsForRepoResponse,
    undefined,
    {},
    ActionsListArtifactsForRepoQueryParams,
    ActionsListArtifactsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/artifacts",
    method: "get",
    ...variables,
  });

/**
 * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsListArtifactsForRepo = (
  variables: ActionsListArtifactsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListArtifactsForRepoResponse,
      undefined,
      ActionsListArtifactsForRepoResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListArtifactsForRepoResponse,
    undefined,
    ActionsListArtifactsForRepoResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/artifacts",
      operationId: "actionsListArtifactsForRepo",
      variables,
    }),
    () => fetchActionsListArtifactsForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsDeleteArtifactPathParams = {
  owner: string;
  repo: string;
  /*
   * artifact_id parameter
   */
  artifactId: number;
};

export type ActionsDeleteArtifactVariables = {
  pathParams: ActionsDeleteArtifactPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const fetchActionsDeleteArtifact = (
  variables: ActionsDeleteArtifactVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ActionsDeleteArtifactPathParams>({
    url: "/repos/{owner}/{repo}/actions/artifacts/{artifactId}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const useActionsDeleteArtifact = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsDeleteArtifactVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsDeleteArtifactVariables
  >(
    (variables: ActionsDeleteArtifactVariables) =>
      fetchActionsDeleteArtifact({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsGetArtifactPathParams = {
  owner: string;
  repo: string;
  /*
   * artifact_id parameter
   */
  artifactId: number;
};

export type ActionsGetArtifactVariables = {
  pathParams: ActionsGetArtifactPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetArtifact = (
  variables: ActionsGetArtifactVariables
) =>
  githubFetch<
    Schemas.Artifact,
    undefined,
    {},
    {},
    ActionsGetArtifactPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/artifacts/{artifactId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetArtifact = (
  variables: ActionsGetArtifactVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Artifact, undefined, Schemas.Artifact>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Artifact, undefined, Schemas.Artifact>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}",
      operationId: "actionsGetArtifact",
      variables,
    }),
    () => fetchActionsGetArtifact({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsDownloadArtifactPathParams = {
  owner: string;
  repo: string;
  /*
   * artifact_id parameter
   */
  artifactId: number;
  archiveFormat: string;
};

export type ActionsDownloadArtifactVariables = {
  pathParams: ActionsDownloadArtifactPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
 * the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
 * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
 * GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsDownloadArtifact = (
  variables: ActionsDownloadArtifactVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ActionsDownloadArtifactPathParams>({
    url: "/repos/{owner}/{repo}/actions/artifacts/{artifactId}/{archiveFormat}",
    method: "get",
    ...variables,
  });

/**
 * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
 * the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
 * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
 * GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsDownloadArtifact = (
  variables: ActionsDownloadArtifactVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, undefined, undefined>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, undefined, undefined>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}",
      operationId: "actionsDownloadArtifact",
      variables,
    }),
    () => fetchActionsDownloadArtifact({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsGetJobForWorkflowRunPathParams = {
  owner: string;
  repo: string;
  /*
   * job_id parameter
   */
  jobId: number;
};

export type ActionsGetJobForWorkflowRunVariables = {
  pathParams: ActionsGetJobForWorkflowRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetJobForWorkflowRun = (
  variables: ActionsGetJobForWorkflowRunVariables
) =>
  githubFetch<
    Schemas.Job,
    undefined,
    {},
    {},
    ActionsGetJobForWorkflowRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/jobs/{jobId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetJobForWorkflowRun = (
  variables: ActionsGetJobForWorkflowRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Job, undefined, Schemas.Job>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Job, undefined, Schemas.Job>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/jobs/{job_id}",
      operationId: "actionsGetJobForWorkflowRun",
      variables,
    }),
    () => fetchActionsGetJobForWorkflowRun({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsDownloadJobLogsForWorkflowRunPathParams = {
  owner: string;
  repo: string;
  /*
   * job_id parameter
   */
  jobId: number;
};

export type ActionsDownloadJobLogsForWorkflowRunVariables = {
  pathParams: ActionsDownloadJobLogsForWorkflowRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
 * for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
 * use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
 * have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsDownloadJobLogsForWorkflowRun = (
  variables: ActionsDownloadJobLogsForWorkflowRunVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ActionsDownloadJobLogsForWorkflowRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/jobs/{jobId}/logs",
    method: "get",
    ...variables,
  });

/**
 * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
 * for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
 * use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
 * have the `actions:read` permission to use this endpoint.
 */
export const useActionsDownloadJobLogsForWorkflowRun = (
  variables: ActionsDownloadJobLogsForWorkflowRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, undefined, undefined>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, undefined, undefined>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs",
      operationId: "actionsDownloadJobLogsForWorkflowRun",
      variables,
    }),
    () =>
      fetchActionsDownloadJobLogsForWorkflowRun({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsGetGithubActionsPermissionsRepositoryPathParams = {
  owner: string;
  repo: string;
};

export type ActionsGetGithubActionsPermissionsRepositoryVariables = {
  pathParams: ActionsGetGithubActionsPermissionsRepositoryPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const fetchActionsGetGithubActionsPermissionsRepository = (
  variables: ActionsGetGithubActionsPermissionsRepositoryVariables
) =>
  githubFetch<
    Schemas.ActionsRepositoryPermissions,
    undefined,
    {},
    {},
    ActionsGetGithubActionsPermissionsRepositoryPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/permissions",
    method: "get",
    ...variables,
  });

/**
 * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const useActionsGetGithubActionsPermissionsRepository = (
  variables: ActionsGetGithubActionsPermissionsRepositoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsRepositoryPermissions,
      undefined,
      Schemas.ActionsRepositoryPermissions
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsRepositoryPermissions,
    undefined,
    Schemas.ActionsRepositoryPermissions
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/permissions",
      operationId: "actionsGetGithubActionsPermissionsRepository",
      variables,
    }),
    () =>
      fetchActionsGetGithubActionsPermissionsRepository({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsSetGithubActionsPermissionsRepositoryPathParams = {
  owner: string;
  repo: string;
};

export type ActionsSetGithubActionsPermissionsRepositoryRequestBody = {
  allowed_actions?: Schemas.AllowedActions;
  enabled: Schemas.ActionsEnabled;
};

export type ActionsSetGithubActionsPermissionsRepositoryVariables = {
  body: ActionsSetGithubActionsPermissionsRepositoryRequestBody;
  pathParams: ActionsSetGithubActionsPermissionsRepositoryPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.
 *
 * If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as `allowed_actions` to `selected` actions, then you cannot override them for the repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const fetchActionsSetGithubActionsPermissionsRepository = (
  variables: ActionsSetGithubActionsPermissionsRepositoryVariables
) =>
  githubFetch<
    undefined,
    ActionsSetGithubActionsPermissionsRepositoryRequestBody,
    {},
    {},
    ActionsSetGithubActionsPermissionsRepositoryPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/permissions",
    method: "put",
    ...variables,
  });

/**
 * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.
 *
 * If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as `allowed_actions` to `selected` actions, then you cannot override them for the repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const useActionsSetGithubActionsPermissionsRepository = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsSetGithubActionsPermissionsRepositoryVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsSetGithubActionsPermissionsRepositoryVariables
  >(
    (variables: ActionsSetGithubActionsPermissionsRepositoryVariables) =>
      fetchActionsSetGithubActionsPermissionsRepository({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsGetAllowedActionsRepositoryPathParams = {
  owner: string;
  repo: string;
};

export type ActionsGetAllowedActionsRepositoryVariables = {
  pathParams: ActionsGetAllowedActionsRepositoryPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const fetchActionsGetAllowedActionsRepository = (
  variables: ActionsGetAllowedActionsRepositoryVariables
) =>
  githubFetch<
    Schemas.SelectedActions,
    undefined,
    {},
    {},
    ActionsGetAllowedActionsRepositoryPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/permissions/selected-actions",
    method: "get",
    ...variables,
  });

/**
 * Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const useActionsGetAllowedActionsRepository = (
  variables: ActionsGetAllowedActionsRepositoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SelectedActions,
      undefined,
      Schemas.SelectedActions
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.SelectedActions,
    undefined,
    Schemas.SelectedActions
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/permissions/selected-actions",
      operationId: "actionsGetAllowedActionsRepository",
      variables,
    }),
    () =>
      fetchActionsGetAllowedActionsRepository({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsSetAllowedActionsRepositoryPathParams = {
  owner: string;
  repo: string;
};

export type ActionsSetAllowedActionsRepositoryVariables = {
  body: Schemas.SelectedActions;
  pathParams: ActionsSetAllowedActionsRepositoryPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
 *
 * If the repository belongs to an organization or enterprise that has `selected` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.
 *
 * To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const fetchActionsSetAllowedActionsRepository = (
  variables: ActionsSetAllowedActionsRepositoryVariables
) =>
  githubFetch<
    undefined,
    Schemas.SelectedActions,
    {},
    {},
    ActionsSetAllowedActionsRepositoryPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/permissions/selected-actions",
    method: "put",
    ...variables,
  });

/**
 * Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
 *
 * If the repository belongs to an organization or enterprise that has `selected` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.
 *
 * To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const useActionsSetAllowedActionsRepository = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsSetAllowedActionsRepositoryVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsSetAllowedActionsRepositoryVariables
  >(
    (variables: ActionsSetAllowedActionsRepositoryVariables) =>
      fetchActionsSetAllowedActionsRepository({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsListSelfHostedRunnersForRepoPathParams = {
  owner: string;
  repo: string;
};

export type ActionsListSelfHostedRunnersForRepoQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListSelfHostedRunnersForRepoResponse = {
  runners: Schemas.Runner[];
  total_count: number;
};

export type ActionsListSelfHostedRunnersForRepoVariables = {
  pathParams: ActionsListSelfHostedRunnersForRepoPathParams;
  queryParams?: ActionsListSelfHostedRunnersForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.
 */
export const fetchActionsListSelfHostedRunnersForRepo = (
  variables: ActionsListSelfHostedRunnersForRepoVariables
) =>
  githubFetch<
    ActionsListSelfHostedRunnersForRepoResponse,
    undefined,
    {},
    ActionsListSelfHostedRunnersForRepoQueryParams,
    ActionsListSelfHostedRunnersForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runners",
    method: "get",
    ...variables,
  });

/**
 * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.
 */
export const useActionsListSelfHostedRunnersForRepo = (
  variables: ActionsListSelfHostedRunnersForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListSelfHostedRunnersForRepoResponse,
      undefined,
      ActionsListSelfHostedRunnersForRepoResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListSelfHostedRunnersForRepoResponse,
    undefined,
    ActionsListSelfHostedRunnersForRepoResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/runners",
      operationId: "actionsListSelfHostedRunnersForRepo",
      variables,
    }),
    () =>
      fetchActionsListSelfHostedRunnersForRepo({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsListRunnerApplicationsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type ActionsListRunnerApplicationsForRepoResponse =
  Schemas.RunnerApplication[];

export type ActionsListRunnerApplicationsForRepoVariables = {
  pathParams: ActionsListRunnerApplicationsForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 */
export const fetchActionsListRunnerApplicationsForRepo = (
  variables: ActionsListRunnerApplicationsForRepoVariables
) =>
  githubFetch<
    ActionsListRunnerApplicationsForRepoResponse,
    undefined,
    {},
    {},
    ActionsListRunnerApplicationsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runners/downloads",
    method: "get",
    ...variables,
  });

/**
 * Lists binaries for the runner application that you can download and run.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 */
export const useActionsListRunnerApplicationsForRepo = (
  variables: ActionsListRunnerApplicationsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRunnerApplicationsForRepoResponse,
      undefined,
      ActionsListRunnerApplicationsForRepoResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListRunnerApplicationsForRepoResponse,
    undefined,
    ActionsListRunnerApplicationsForRepoResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/runners/downloads",
      operationId: "actionsListRunnerApplicationsForRepo",
      variables,
    }),
    () =>
      fetchActionsListRunnerApplicationsForRepo({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsCreateRegistrationTokenForRepoPathParams = {
  owner: string;
  repo: string;
};

export type ActionsCreateRegistrationTokenForRepoVariables = {
  pathParams: ActionsCreateRegistrationTokenForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate
 * using an access token with the `repo` scope to use this endpoint.
 *
 * #### Example using registration token
 *
 * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
 *
 * ```
 * ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN
 * ```
 */
export const fetchActionsCreateRegistrationTokenForRepo = (
  variables: ActionsCreateRegistrationTokenForRepoVariables
) =>
  githubFetch<
    Schemas.AuthenticationToken,
    undefined,
    {},
    {},
    ActionsCreateRegistrationTokenForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runners/registration-token",
    method: "post",
    ...variables,
  });

/**
 * Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate
 * using an access token with the `repo` scope to use this endpoint.
 *
 * #### Example using registration token
 *
 * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
 *
 * ```
 * ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN
 * ```
 */
export const useActionsCreateRegistrationTokenForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AuthenticationToken,
      undefined,
      ActionsCreateRegistrationTokenForRepoVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.AuthenticationToken,
    undefined,
    ActionsCreateRegistrationTokenForRepoVariables
  >(
    (variables: ActionsCreateRegistrationTokenForRepoVariables) =>
      fetchActionsCreateRegistrationTokenForRepo({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsCreateRemoveTokenForRepoPathParams = {
  owner: string;
  repo: string;
};

export type ActionsCreateRemoveTokenForRepoVariables = {
  pathParams: ActionsCreateRemoveTokenForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 *
 * #### Example using remove token
 *
 * To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.
 *
 * ```
 * ./config.sh remove --token TOKEN
 * ```
 */
export const fetchActionsCreateRemoveTokenForRepo = (
  variables: ActionsCreateRemoveTokenForRepoVariables
) =>
  githubFetch<
    Schemas.AuthenticationToken,
    undefined,
    {},
    {},
    ActionsCreateRemoveTokenForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runners/remove-token",
    method: "post",
    ...variables,
  });

/**
 * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.
 * You must authenticate using an access token with the `repo` scope to use this endpoint.
 *
 * #### Example using remove token
 *
 * To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.
 *
 * ```
 * ./config.sh remove --token TOKEN
 * ```
 */
export const useActionsCreateRemoveTokenForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AuthenticationToken,
      undefined,
      ActionsCreateRemoveTokenForRepoVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.AuthenticationToken,
    undefined,
    ActionsCreateRemoveTokenForRepoVariables
  >(
    (variables: ActionsCreateRemoveTokenForRepoVariables) =>
      fetchActionsCreateRemoveTokenForRepo({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsDeleteSelfHostedRunnerFromRepoPathParams = {
  owner: string;
  repo: string;
  /*
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type ActionsDeleteSelfHostedRunnerFromRepoVariables = {
  pathParams: ActionsDeleteSelfHostedRunnerFromRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
 *
 * You must authenticate using an access token with the `repo`
 * scope to use this endpoint.
 */
export const fetchActionsDeleteSelfHostedRunnerFromRepo = (
  variables: ActionsDeleteSelfHostedRunnerFromRepoVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ActionsDeleteSelfHostedRunnerFromRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runners/{runnerId}",
    method: "delete",
    ...variables,
  });

/**
 * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
 *
 * You must authenticate using an access token with the `repo`
 * scope to use this endpoint.
 */
export const useActionsDeleteSelfHostedRunnerFromRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsDeleteSelfHostedRunnerFromRepoVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsDeleteSelfHostedRunnerFromRepoVariables
  >(
    (variables: ActionsDeleteSelfHostedRunnerFromRepoVariables) =>
      fetchActionsDeleteSelfHostedRunnerFromRepo({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsGetSelfHostedRunnerForRepoPathParams = {
  owner: string;
  repo: string;
  /*
   * Unique identifier of the self-hosted runner.
   */
  runnerId: number;
};

export type ActionsGetSelfHostedRunnerForRepoVariables = {
  pathParams: ActionsGetSelfHostedRunnerForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific self-hosted runner configured in a repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint.
 */
export const fetchActionsGetSelfHostedRunnerForRepo = (
  variables: ActionsGetSelfHostedRunnerForRepoVariables
) =>
  githubFetch<
    Schemas.Runner,
    undefined,
    {},
    {},
    ActionsGetSelfHostedRunnerForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runners/{runnerId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific self-hosted runner configured in a repository.
 *
 * You must authenticate using an access token with the `repo` scope to use this
 * endpoint.
 */
export const useActionsGetSelfHostedRunnerForRepo = (
  variables: ActionsGetSelfHostedRunnerForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Runner, undefined, Schemas.Runner>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Runner, undefined, Schemas.Runner>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/runners/{runner_id}",
      operationId: "actionsGetSelfHostedRunnerForRepo",
      variables,
    }),
    () =>
      fetchActionsGetSelfHostedRunnerForRepo({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsListWorkflowRunsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type ActionsListWorkflowRunsForRepoQueryParams = {
  /*
   * Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
   */
  actor?: string;
  /*
   * Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
   */
  branch?: string;
  /*
   * Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
   */
  event?: string;
  /*
   * Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see "[Create a check run](https://docs.github.com/rest/reference/checks#create-a-check-run)."
   */
  status?:
    | "completed"
    | "action_required"
    | "cancelled"
    | "failure"
    | "neutral"
    | "skipped"
    | "stale"
    | "success"
    | "timed_out"
    | "in_progress"
    | "queued"
    | "requested"
    | "waiting";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListWorkflowRunsForRepoResponse = {
  total_count: number;
  workflow_runs: Schemas.WorkflowRun[];
};

export type ActionsListWorkflowRunsForRepoVariables = {
  pathParams: ActionsListWorkflowRunsForRepoPathParams;
  queryParams?: ActionsListWorkflowRunsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsListWorkflowRunsForRepo = (
  variables: ActionsListWorkflowRunsForRepoVariables
) =>
  githubFetch<
    ActionsListWorkflowRunsForRepoResponse,
    undefined,
    {},
    ActionsListWorkflowRunsForRepoQueryParams,
    ActionsListWorkflowRunsForRepoPathParams
  >({ url: "/repos/{owner}/{repo}/actions/runs", method: "get", ...variables });

/**
 * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsListWorkflowRunsForRepo = (
  variables: ActionsListWorkflowRunsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListWorkflowRunsForRepoResponse,
      undefined,
      ActionsListWorkflowRunsForRepoResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListWorkflowRunsForRepoResponse,
    undefined,
    ActionsListWorkflowRunsForRepoResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/runs",
      operationId: "actionsListWorkflowRunsForRepo",
      variables,
    }),
    () =>
      fetchActionsListWorkflowRunsForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsDeleteWorkflowRunPathParams = {
  owner: string;
  repo: string;
  /*
   * The id of the workflow run
   */
  runId: number;
};

export type ActionsDeleteWorkflowRunVariables = {
  pathParams: ActionsDeleteWorkflowRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
 * private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use
 * this endpoint.
 */
export const fetchActionsDeleteWorkflowRun = (
  variables: ActionsDeleteWorkflowRunVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ActionsDeleteWorkflowRunPathParams>(
    {
      url: "/repos/{owner}/{repo}/actions/runs/{runId}",
      method: "delete",
      ...variables,
    }
  );

/**
 * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
 * private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use
 * this endpoint.
 */
export const useActionsDeleteWorkflowRun = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsDeleteWorkflowRunVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsDeleteWorkflowRunVariables
  >(
    (variables: ActionsDeleteWorkflowRunVariables) =>
      fetchActionsDeleteWorkflowRun({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsGetWorkflowRunPathParams = {
  owner: string;
  repo: string;
  /*
   * The id of the workflow run
   */
  runId: number;
};

export type ActionsGetWorkflowRunVariables = {
  pathParams: ActionsGetWorkflowRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetWorkflowRun = (
  variables: ActionsGetWorkflowRunVariables
) =>
  githubFetch<
    Schemas.WorkflowRun,
    undefined,
    {},
    {},
    ActionsGetWorkflowRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetWorkflowRun = (
  variables: ActionsGetWorkflowRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WorkflowRun,
      undefined,
      Schemas.WorkflowRun
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.WorkflowRun,
    undefined,
    Schemas.WorkflowRun
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}",
      operationId: "actionsGetWorkflowRun",
      variables,
    }),
    () => fetchActionsGetWorkflowRun({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsGetReviewsForRunPathParams = {
  owner: string;
  repo: string;
  /*
   * The id of the workflow run
   */
  runId: number;
};

export type ActionsGetReviewsForRunResponse = Schemas.EnvironmentApprovals[];

export type ActionsGetReviewsForRunVariables = {
  pathParams: ActionsGetReviewsForRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetReviewsForRun = (
  variables: ActionsGetReviewsForRunVariables
) =>
  githubFetch<
    ActionsGetReviewsForRunResponse,
    undefined,
    {},
    {},
    ActionsGetReviewsForRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/approvals",
    method: "get",
    ...variables,
  });

/**
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetReviewsForRun = (
  variables: ActionsGetReviewsForRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsGetReviewsForRunResponse,
      undefined,
      ActionsGetReviewsForRunResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsGetReviewsForRunResponse,
    undefined,
    ActionsGetReviewsForRunResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}/approvals",
      operationId: "actionsGetReviewsForRun",
      variables,
    }),
    () => fetchActionsGetReviewsForRun({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsListWorkflowRunArtifactsPathParams = {
  owner: string;
  repo: string;
  /*
   * The id of the workflow run
   */
  runId: number;
};

export type ActionsListWorkflowRunArtifactsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListWorkflowRunArtifactsResponse = {
  artifacts: Schemas.Artifact[];
  total_count: number;
};

export type ActionsListWorkflowRunArtifactsVariables = {
  pathParams: ActionsListWorkflowRunArtifactsPathParams;
  queryParams?: ActionsListWorkflowRunArtifactsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsListWorkflowRunArtifacts = (
  variables: ActionsListWorkflowRunArtifactsVariables
) =>
  githubFetch<
    ActionsListWorkflowRunArtifactsResponse,
    undefined,
    {},
    ActionsListWorkflowRunArtifactsQueryParams,
    ActionsListWorkflowRunArtifactsPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/artifacts",
    method: "get",
    ...variables,
  });

/**
 * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsListWorkflowRunArtifacts = (
  variables: ActionsListWorkflowRunArtifactsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListWorkflowRunArtifactsResponse,
      undefined,
      ActionsListWorkflowRunArtifactsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListWorkflowRunArtifactsResponse,
    undefined,
    ActionsListWorkflowRunArtifactsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
      operationId: "actionsListWorkflowRunArtifacts",
      variables,
    }),
    () =>
      fetchActionsListWorkflowRunArtifacts({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsCancelWorkflowRunPathParams = {
  owner: string;
  repo: string;
  /*
   * The id of the workflow run
   */
  runId: number;
};

export type ActionsCancelWorkflowRunVariables = {
  pathParams: ActionsCancelWorkflowRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const fetchActionsCancelWorkflowRun = (
  variables: ActionsCancelWorkflowRunVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ActionsCancelWorkflowRunPathParams>(
    {
      url: "/repos/{owner}/{repo}/actions/runs/{runId}/cancel",
      method: "post",
      ...variables,
    }
  );

/**
 * Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const useActionsCancelWorkflowRun = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsCancelWorkflowRunVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsCancelWorkflowRunVariables
  >(
    (variables: ActionsCancelWorkflowRunVariables) =>
      fetchActionsCancelWorkflowRun({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsListJobsForWorkflowRunPathParams = {
  owner: string;
  repo: string;
  /*
   * The id of the workflow run
   */
  runId: number;
};

export type ActionsListJobsForWorkflowRunQueryParams = {
  /*
   * Filters jobs by their `completed_at` timestamp. Can be one of:
   * \* `latest`: Returns jobs from the most recent execution of the workflow run.
   * \* `all`: Returns all jobs for a workflow run, including from old executions of the workflow run.
   *
   * @default latest
   */
  filter?: "latest" | "all";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListJobsForWorkflowRunResponse = {
  jobs: Schemas.Job[];
  total_count: number;
};

export type ActionsListJobsForWorkflowRunVariables = {
  pathParams: ActionsListJobsForWorkflowRunPathParams;
  queryParams?: ActionsListJobsForWorkflowRunQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 */
export const fetchActionsListJobsForWorkflowRun = (
  variables: ActionsListJobsForWorkflowRunVariables
) =>
  githubFetch<
    ActionsListJobsForWorkflowRunResponse,
    undefined,
    {},
    ActionsListJobsForWorkflowRunQueryParams,
    ActionsListJobsForWorkflowRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/jobs",
    method: "get",
    ...variables,
  });

/**
 * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 */
export const useActionsListJobsForWorkflowRun = (
  variables: ActionsListJobsForWorkflowRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListJobsForWorkflowRunResponse,
      undefined,
      ActionsListJobsForWorkflowRunResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListJobsForWorkflowRunResponse,
    undefined,
    ActionsListJobsForWorkflowRunResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
      operationId: "actionsListJobsForWorkflowRun",
      variables,
    }),
    () =>
      fetchActionsListJobsForWorkflowRun({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsDeleteWorkflowRunLogsPathParams = {
  owner: string;
  repo: string;
  /*
   * The id of the workflow run
   */
  runId: number;
};

export type ActionsDeleteWorkflowRunLogsVariables = {
  pathParams: ActionsDeleteWorkflowRunLogsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const fetchActionsDeleteWorkflowRunLogs = (
  variables: ActionsDeleteWorkflowRunLogsVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ActionsDeleteWorkflowRunLogsPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/logs",
    method: "delete",
    ...variables,
  });

/**
 * Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const useActionsDeleteWorkflowRunLogs = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsDeleteWorkflowRunLogsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsDeleteWorkflowRunLogsVariables
  >(
    (variables: ActionsDeleteWorkflowRunLogsVariables) =>
      fetchActionsDeleteWorkflowRunLogs({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsDownloadWorkflowRunLogsPathParams = {
  owner: string;
  repo: string;
  /*
   * The id of the workflow run
   */
  runId: number;
};

export type ActionsDownloadWorkflowRunLogsVariables = {
  pathParams: ActionsDownloadWorkflowRunLogsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
 * `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
 * this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
 * the `actions:read` permission to use this endpoint.
 */
export const fetchActionsDownloadWorkflowRunLogs = (
  variables: ActionsDownloadWorkflowRunLogsVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ActionsDownloadWorkflowRunLogsPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/logs",
    method: "get",
    ...variables,
  });

/**
 * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
 * `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
 * this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
 * the `actions:read` permission to use this endpoint.
 */
export const useActionsDownloadWorkflowRunLogs = (
  variables: ActionsDownloadWorkflowRunLogsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, undefined, undefined>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, undefined, undefined>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}/logs",
      operationId: "actionsDownloadWorkflowRunLogs",
      variables,
    }),
    () =>
      fetchActionsDownloadWorkflowRunLogs({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsGetPendingDeploymentsForRunPathParams = {
  owner: string;
  repo: string;
  /*
   * The id of the workflow run
   */
  runId: number;
};

export type ActionsGetPendingDeploymentsForRunResponse =
  Schemas.PendingDeployment[];

export type ActionsGetPendingDeploymentsForRunVariables = {
  pathParams: ActionsGetPendingDeploymentsForRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Get all deployment environments for a workflow run that are waiting for protection rules to pass.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetPendingDeploymentsForRun = (
  variables: ActionsGetPendingDeploymentsForRunVariables
) =>
  githubFetch<
    ActionsGetPendingDeploymentsForRunResponse,
    undefined,
    {},
    {},
    ActionsGetPendingDeploymentsForRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/pending_deployments",
    method: "get",
    ...variables,
  });

/**
 * Get all deployment environments for a workflow run that are waiting for protection rules to pass.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetPendingDeploymentsForRun = (
  variables: ActionsGetPendingDeploymentsForRunVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsGetPendingDeploymentsForRunResponse,
      undefined,
      ActionsGetPendingDeploymentsForRunResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsGetPendingDeploymentsForRunResponse,
    undefined,
    ActionsGetPendingDeploymentsForRunResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments",
      operationId: "actionsGetPendingDeploymentsForRun",
      variables,
    }),
    () =>
      fetchActionsGetPendingDeploymentsForRun({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsReviewPendingDeploymentsForRunPathParams = {
  owner: string;
  repo: string;
  /*
   * The id of the workflow run
   */
  runId: number;
};

export type ActionsReviewPendingDeploymentsForRunResponse =
  Schemas.Deployment[];

export type ActionsReviewPendingDeploymentsForRunRequestBody = {
  /*
   * A comment to accompany the deployment review
   *
   * @example Ship it!
   */
  comment: string;
  /*
   * The list of environment ids to approve or reject
   *
   * @example 161171787
   * @example 161171795
   */
  environment_ids: number[];
  /*
   * Whether to approve or reject deployment to the specified environments. Must be one of: `approved` or `rejected`
   *
   * @example approved
   */
  state: "approved" | "rejected";
};

export type ActionsReviewPendingDeploymentsForRunVariables = {
  body: ActionsReviewPendingDeploymentsForRunRequestBody;
  pathParams: ActionsReviewPendingDeploymentsForRunPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Approve or reject pending deployments that are waiting on approval by a required reviewer.
 *
 * Anyone with read access to the repository contents and deployments can use this endpoint.
 */
export const fetchActionsReviewPendingDeploymentsForRun = (
  variables: ActionsReviewPendingDeploymentsForRunVariables
) =>
  githubFetch<
    ActionsReviewPendingDeploymentsForRunResponse,
    ActionsReviewPendingDeploymentsForRunRequestBody,
    {},
    {},
    ActionsReviewPendingDeploymentsForRunPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/pending_deployments",
    method: "post",
    ...variables,
  });

/**
 * Approve or reject pending deployments that are waiting on approval by a required reviewer.
 *
 * Anyone with read access to the repository contents and deployments can use this endpoint.
 */
export const useActionsReviewPendingDeploymentsForRun = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ActionsReviewPendingDeploymentsForRunResponse,
      undefined,
      ActionsReviewPendingDeploymentsForRunVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ActionsReviewPendingDeploymentsForRunResponse,
    undefined,
    ActionsReviewPendingDeploymentsForRunVariables
  >(
    (variables: ActionsReviewPendingDeploymentsForRunVariables) =>
      fetchActionsReviewPendingDeploymentsForRun({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActionsReRunWorkflowPathParams = {
  owner: string;
  repo: string;
  /*
   * The id of the workflow run
   */
  runId: number;
};

export type ActionsReRunWorkflowVariables = {
  pathParams: ActionsReRunWorkflowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const fetchActionsReRunWorkflow = (
  variables: ActionsReRunWorkflowVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ActionsReRunWorkflowPathParams>({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/rerun",
    method: "post",
    ...variables,
  });

/**
 * Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const useActionsReRunWorkflow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsReRunWorkflowVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsReRunWorkflowVariables
  >(
    (variables: ActionsReRunWorkflowVariables) =>
      fetchActionsReRunWorkflow({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsGetWorkflowRunUsagePathParams = {
  owner: string;
  repo: string;
  /*
   * The id of the workflow run
   */
  runId: number;
};

export type ActionsGetWorkflowRunUsageVariables = {
  pathParams: ActionsGetWorkflowRunUsagePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetWorkflowRunUsage = (
  variables: ActionsGetWorkflowRunUsageVariables
) =>
  githubFetch<
    Schemas.WorkflowRunUsage,
    undefined,
    {},
    {},
    ActionsGetWorkflowRunUsagePathParams
  >({
    url: "/repos/{owner}/{repo}/actions/runs/{runId}/timing",
    method: "get",
    ...variables,
  });

/**
 * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetWorkflowRunUsage = (
  variables: ActionsGetWorkflowRunUsageVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WorkflowRunUsage,
      undefined,
      Schemas.WorkflowRunUsage
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.WorkflowRunUsage,
    undefined,
    Schemas.WorkflowRunUsage
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}/timing",
      operationId: "actionsGetWorkflowRunUsage",
      variables,
    }),
    () => fetchActionsGetWorkflowRunUsage({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsListRepoSecretsPathParams = {
  owner: string;
  repo: string;
};

export type ActionsListRepoSecretsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListRepoSecretsResponse = {
  secrets: Schemas.ActionsSecret[];
  total_count: number;
};

export type ActionsListRepoSecretsVariables = {
  pathParams: ActionsListRepoSecretsPathParams;
  queryParams?: ActionsListRepoSecretsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const fetchActionsListRepoSecrets = (
  variables: ActionsListRepoSecretsVariables
) =>
  githubFetch<
    ActionsListRepoSecretsResponse,
    undefined,
    {},
    ActionsListRepoSecretsQueryParams,
    ActionsListRepoSecretsPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/secrets",
    method: "get",
    ...variables,
  });

/**
 * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useActionsListRepoSecrets = (
  variables: ActionsListRepoSecretsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRepoSecretsResponse,
      undefined,
      ActionsListRepoSecretsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListRepoSecretsResponse,
    undefined,
    ActionsListRepoSecretsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/secrets",
      operationId: "actionsListRepoSecrets",
      variables,
    }),
    () => fetchActionsListRepoSecrets({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsGetRepoPublicKeyPathParams = {
  owner: string;
  repo: string;
};

export type ActionsGetRepoPublicKeyVariables = {
  pathParams: ActionsGetRepoPublicKeyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const fetchActionsGetRepoPublicKey = (
  variables: ActionsGetRepoPublicKeyVariables
) =>
  githubFetch<
    Schemas.ActionsPublicKey,
    undefined,
    {},
    {},
    ActionsGetRepoPublicKeyPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/secrets/public-key",
    method: "get",
    ...variables,
  });

/**
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useActionsGetRepoPublicKey = (
  variables: ActionsGetRepoPublicKeyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsPublicKey,
      undefined,
      Schemas.ActionsPublicKey
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsPublicKey,
    undefined,
    Schemas.ActionsPublicKey
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/secrets/public-key",
      operationId: "actionsGetRepoPublicKey",
      variables,
    }),
    () => fetchActionsGetRepoPublicKey({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsDeleteRepoSecretPathParams = {
  owner: string;
  repo: string;
  /*
   * secret_name parameter
   */
  secretName: string;
};

export type ActionsDeleteRepoSecretVariables = {
  pathParams: ActionsDeleteRepoSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const fetchActionsDeleteRepoSecret = (
  variables: ActionsDeleteRepoSecretVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ActionsDeleteRepoSecretPathParams>({
    url: "/repos/{owner}/{repo}/actions/secrets/{secretName}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useActionsDeleteRepoSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsDeleteRepoSecretVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsDeleteRepoSecretVariables
  >(
    (variables: ActionsDeleteRepoSecretVariables) =>
      fetchActionsDeleteRepoSecret({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsGetRepoSecretPathParams = {
  owner: string;
  repo: string;
  /*
   * secret_name parameter
   */
  secretName: string;
};

export type ActionsGetRepoSecretVariables = {
  pathParams: ActionsGetRepoSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const fetchActionsGetRepoSecret = (
  variables: ActionsGetRepoSecretVariables
) =>
  githubFetch<
    Schemas.ActionsSecret,
    undefined,
    {},
    {},
    ActionsGetRepoSecretPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/secrets/{secretName}",
    method: "get",
    ...variables,
  });

/**
 * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useActionsGetRepoSecret = (
  variables: ActionsGetRepoSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsSecret,
      undefined,
      Schemas.ActionsSecret
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsSecret,
    undefined,
    Schemas.ActionsSecret
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/secrets/{secret_name}",
      operationId: "actionsGetRepoSecret",
      variables,
    }),
    () => fetchActionsGetRepoSecret({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsCreateOrUpdateRepoSecretPathParams = {
  owner: string;
  repo: string;
  /*
   * secret_name parameter
   */
  secretName: string;
};

export type ActionsCreateOrUpdateRepoSecretRequestBody = {
  /*
   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/actions#get-a-repository-public-key) endpoint.
   *
   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
   */
  encrypted_value?: string;
  /*
   * ID of the key you used to encrypt the secret.
   */
  key_id?: string;
};

export type ActionsCreateOrUpdateRepoSecretVariables = {
  body?: ActionsCreateOrUpdateRepoSecretRequestBody;
  pathParams: ActionsCreateOrUpdateRepoSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
 * this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * ```
 * const sodium = require('tweetsodium');
 *
 * const key = "base64-encoded-public-key";
 * const value = "plain-text-secret";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * ```
 *
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const fetchActionsCreateOrUpdateRepoSecret = (
  variables: ActionsCreateOrUpdateRepoSecretVariables
) =>
  githubFetch<
    undefined,
    ActionsCreateOrUpdateRepoSecretRequestBody,
    {},
    {},
    ActionsCreateOrUpdateRepoSecretPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/secrets/{secretName}",
    method: "put",
    ...variables,
  });

/**
 * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
 * this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * ```
 * const sodium = require('tweetsodium');
 *
 * const key = "base64-encoded-public-key";
 * const value = "plain-text-secret";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * ```
 *
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const useActionsCreateOrUpdateRepoSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsCreateOrUpdateRepoSecretVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsCreateOrUpdateRepoSecretVariables
  >(
    (variables: ActionsCreateOrUpdateRepoSecretVariables) =>
      fetchActionsCreateOrUpdateRepoSecret({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsListRepoWorkflowsPathParams = {
  owner: string;
  repo: string;
};

export type ActionsListRepoWorkflowsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListRepoWorkflowsResponse = {
  total_count: number;
  workflows: Schemas.Workflow[];
};

export type ActionsListRepoWorkflowsVariables = {
  pathParams: ActionsListRepoWorkflowsPathParams;
  queryParams?: ActionsListRepoWorkflowsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsListRepoWorkflows = (
  variables: ActionsListRepoWorkflowsVariables
) =>
  githubFetch<
    ActionsListRepoWorkflowsResponse,
    undefined,
    {},
    ActionsListRepoWorkflowsQueryParams,
    ActionsListRepoWorkflowsPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/workflows",
    method: "get",
    ...variables,
  });

/**
 * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsListRepoWorkflows = (
  variables: ActionsListRepoWorkflowsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListRepoWorkflowsResponse,
      undefined,
      ActionsListRepoWorkflowsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListRepoWorkflowsResponse,
    undefined,
    ActionsListRepoWorkflowsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/workflows",
      operationId: "actionsListRepoWorkflows",
      variables,
    }),
    () => fetchActionsListRepoWorkflows({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsGetWorkflowPathParams = {
  owner: string;
  repo: string;
  /*
   * The ID of the workflow. You can also pass the workflow file name as a string.
   */
  workflowId: number | string;
};

export type ActionsGetWorkflowVariables = {
  pathParams: ActionsGetWorkflowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetWorkflow = (
  variables: ActionsGetWorkflowVariables
) =>
  githubFetch<
    Schemas.Workflow,
    undefined,
    {},
    {},
    ActionsGetWorkflowPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/workflows/{workflowId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetWorkflow = (
  variables: ActionsGetWorkflowVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Workflow, undefined, Schemas.Workflow>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Workflow, undefined, Schemas.Workflow>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}",
      operationId: "actionsGetWorkflow",
      variables,
    }),
    () => fetchActionsGetWorkflow({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsDisableWorkflowPathParams = {
  owner: string;
  repo: string;
  /*
   * The ID of the workflow. You can also pass the workflow file name as a string.
   */
  workflowId: number | string;
};

export type ActionsDisableWorkflowVariables = {
  pathParams: ActionsDisableWorkflowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const fetchActionsDisableWorkflow = (
  variables: ActionsDisableWorkflowVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ActionsDisableWorkflowPathParams>({
    url: "/repos/{owner}/{repo}/actions/workflows/{workflowId}/disable",
    method: "put",
    ...variables,
  });

/**
 * Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const useActionsDisableWorkflow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsDisableWorkflowVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsDisableWorkflowVariables
  >(
    (variables: ActionsDisableWorkflowVariables) =>
      fetchActionsDisableWorkflow({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsCreateWorkflowDispatchPathParams = {
  owner: string;
  repo: string;
  /*
   * The ID of the workflow. You can also pass the workflow file name as a string.
   */
  workflowId: number | string;
};

export type ActionsCreateWorkflowDispatchRequestBody = {
  /*
   * Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.
   *
   * @maxProperties 10
   */
  inputs?: {
    [key: string]: string;
  };
  /*
   * The git reference for the workflow. The reference can be a branch or tag name.
   */
  ref: string;
};

export type ActionsCreateWorkflowDispatchVariables = {
  body: ActionsCreateWorkflowDispatchRequestBody;
  pathParams: ActionsCreateWorkflowDispatchPathParams;
} & GithubContext["fetcherOptions"];

/**
 * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
 *
 * You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)."
 */
export const fetchActionsCreateWorkflowDispatch = (
  variables: ActionsCreateWorkflowDispatchVariables
) =>
  githubFetch<
    undefined,
    ActionsCreateWorkflowDispatchRequestBody,
    {},
    {},
    ActionsCreateWorkflowDispatchPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/workflows/{workflowId}/dispatches",
    method: "post",
    ...variables,
  });

/**
 * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
 *
 * You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)."
 */
export const useActionsCreateWorkflowDispatch = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsCreateWorkflowDispatchVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsCreateWorkflowDispatchVariables
  >(
    (variables: ActionsCreateWorkflowDispatchVariables) =>
      fetchActionsCreateWorkflowDispatch({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsEnableWorkflowPathParams = {
  owner: string;
  repo: string;
  /*
   * The ID of the workflow. You can also pass the workflow file name as a string.
   */
  workflowId: number | string;
};

export type ActionsEnableWorkflowVariables = {
  pathParams: ActionsEnableWorkflowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const fetchActionsEnableWorkflow = (
  variables: ActionsEnableWorkflowVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ActionsEnableWorkflowPathParams>({
    url: "/repos/{owner}/{repo}/actions/workflows/{workflowId}/enable",
    method: "put",
    ...variables,
  });

/**
 * Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
 *
 * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const useActionsEnableWorkflow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsEnableWorkflowVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsEnableWorkflowVariables
  >(
    (variables: ActionsEnableWorkflowVariables) =>
      fetchActionsEnableWorkflow({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsListWorkflowRunsPathParams = {
  owner: string;
  repo: string;
  /*
   * The ID of the workflow. You can also pass the workflow file name as a string.
   */
  workflowId: number | string;
};

export type ActionsListWorkflowRunsQueryParams = {
  /*
   * Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
   */
  actor?: string;
  /*
   * Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
   */
  branch?: string;
  /*
   * Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
   */
  event?: string;
  /*
   * Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see "[Create a check run](https://docs.github.com/rest/reference/checks#create-a-check-run)."
   */
  status?:
    | "completed"
    | "action_required"
    | "cancelled"
    | "failure"
    | "neutral"
    | "skipped"
    | "stale"
    | "success"
    | "timed_out"
    | "in_progress"
    | "queued"
    | "requested"
    | "waiting";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListWorkflowRunsResponse = {
  total_count: number;
  workflow_runs: Schemas.WorkflowRun[];
};

export type ActionsListWorkflowRunsVariables = {
  pathParams: ActionsListWorkflowRunsPathParams;
  queryParams?: ActionsListWorkflowRunsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
 */
export const fetchActionsListWorkflowRuns = (
  variables: ActionsListWorkflowRunsVariables
) =>
  githubFetch<
    ActionsListWorkflowRunsResponse,
    undefined,
    {},
    ActionsListWorkflowRunsQueryParams,
    ActionsListWorkflowRunsPathParams
  >({
    url: "/repos/{owner}/{repo}/actions/workflows/{workflowId}/runs",
    method: "get",
    ...variables,
  });

/**
 * List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
 */
export const useActionsListWorkflowRuns = (
  variables: ActionsListWorkflowRunsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListWorkflowRunsResponse,
      undefined,
      ActionsListWorkflowRunsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListWorkflowRunsResponse,
    undefined,
    ActionsListWorkflowRunsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
      operationId: "actionsListWorkflowRuns",
      variables,
    }),
    () => fetchActionsListWorkflowRuns({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsGetWorkflowUsagePathParams = {
  owner: string;
  repo: string;
  /*
   * The ID of the workflow. You can also pass the workflow file name as a string.
   */
  workflowId: number | string;
};

export type ActionsGetWorkflowUsageVariables = {
  pathParams: ActionsGetWorkflowUsagePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchActionsGetWorkflowUsage = (
  variables: ActionsGetWorkflowUsageVariables
) =>
  githubFetch<
    Schemas.WorkflowUsage,
    undefined,
    {},
    {},
    ActionsGetWorkflowUsagePathParams
  >({
    url: "/repos/{owner}/{repo}/actions/workflows/{workflowId}/timing",
    method: "get",
    ...variables,
  });

/**
 * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useActionsGetWorkflowUsage = (
  variables: ActionsGetWorkflowUsageVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WorkflowUsage,
      undefined,
      Schemas.WorkflowUsage
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.WorkflowUsage,
    undefined,
    Schemas.WorkflowUsage
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing",
      operationId: "actionsGetWorkflowUsage",
      variables,
    }),
    () => fetchActionsGetWorkflowUsage({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesListAssigneesPathParams = {
  owner: string;
  repo: string;
};

export type IssuesListAssigneesQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListAssigneesResponse = Schemas.SimpleUser[];

export type IssuesListAssigneesVariables = {
  pathParams: IssuesListAssigneesPathParams;
  queryParams?: IssuesListAssigneesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
 */
export const fetchIssuesListAssignees = (
  variables: IssuesListAssigneesVariables
) =>
  githubFetch<
    IssuesListAssigneesResponse,
    undefined,
    {},
    IssuesListAssigneesQueryParams,
    IssuesListAssigneesPathParams
  >({ url: "/repos/{owner}/{repo}/assignees", method: "get", ...variables });

/**
 * Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
 */
export const useIssuesListAssignees = (
  variables: IssuesListAssigneesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListAssigneesResponse,
      Responses.NotFound,
      IssuesListAssigneesResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListAssigneesResponse,
    Responses.NotFound,
    IssuesListAssigneesResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/assignees",
      operationId: "issuesListAssignees",
      variables,
    }),
    () => fetchIssuesListAssignees({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesCheckUserCanBeAssignedPathParams = {
  owner: string;
  repo: string;
  assignee: string;
};

export type IssuesCheckUserCanBeAssignedVariables = {
  pathParams: IssuesCheckUserCanBeAssignedPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Checks if a user has permission to be assigned to an issue in this repository.
 *
 * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
 *
 * Otherwise a `404` status code is returned.
 */
export const fetchIssuesCheckUserCanBeAssigned = (
  variables: IssuesCheckUserCanBeAssignedVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    IssuesCheckUserCanBeAssignedPathParams
  >({
    url: "/repos/{owner}/{repo}/assignees/{assignee}",
    method: "get",
    ...variables,
  });

/**
 * Checks if a user has permission to be assigned to an issue in this repository.
 *
 * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
 *
 * Otherwise a `404` status code is returned.
 */
export const useIssuesCheckUserCanBeAssigned = (
  variables: IssuesCheckUserCanBeAssignedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, Schemas.BasicError, undefined>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, Schemas.BasicError, undefined>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/assignees/{assignee}",
      operationId: "issuesCheckUserCanBeAssigned",
      variables,
    }),
    () =>
      fetchIssuesCheckUserCanBeAssigned({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposDisableAutomatedSecurityFixesPathParams = {
  owner: string;
  repo: string;
};

export type ReposDisableAutomatedSecurityFixesVariables = {
  pathParams: ReposDisableAutomatedSecurityFixesPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)".
 */
export const fetchReposDisableAutomatedSecurityFixes = (
  variables: ReposDisableAutomatedSecurityFixesVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ReposDisableAutomatedSecurityFixesPathParams
  >({
    url: "/repos/{owner}/{repo}/automated-security-fixes",
    method: "delete",
    ...variables,
  });

/**
 * Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)".
 */
export const useReposDisableAutomatedSecurityFixes = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ReposDisableAutomatedSecurityFixesVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ReposDisableAutomatedSecurityFixesVariables
  >(
    (variables: ReposDisableAutomatedSecurityFixesVariables) =>
      fetchReposDisableAutomatedSecurityFixes({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposEnableAutomatedSecurityFixesPathParams = {
  owner: string;
  repo: string;
};

export type ReposEnableAutomatedSecurityFixesVariables = {
  pathParams: ReposEnableAutomatedSecurityFixesPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)".
 */
export const fetchReposEnableAutomatedSecurityFixes = (
  variables: ReposEnableAutomatedSecurityFixesVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ReposEnableAutomatedSecurityFixesPathParams
  >({
    url: "/repos/{owner}/{repo}/automated-security-fixes",
    method: "put",
    ...variables,
  });

/**
 * Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)".
 */
export const useReposEnableAutomatedSecurityFixes = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ReposEnableAutomatedSecurityFixesVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ReposEnableAutomatedSecurityFixesVariables
  >(
    (variables: ReposEnableAutomatedSecurityFixesVariables) =>
      fetchReposEnableAutomatedSecurityFixes({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposListBranchesPathParams = {
  owner: string;
  repo: string;
};

export type ReposListBranchesQueryParams = {
  /*
   * Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.
   */
  protected?: boolean;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListBranchesResponse = Schemas.ShortBranch[];

export type ReposListBranchesVariables = {
  pathParams: ReposListBranchesPathParams;
  queryParams?: ReposListBranchesQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposListBranches = (variables: ReposListBranchesVariables) =>
  githubFetch<
    ReposListBranchesResponse,
    undefined,
    {},
    ReposListBranchesQueryParams,
    ReposListBranchesPathParams
  >({ url: "/repos/{owner}/{repo}/branches", method: "get", ...variables });

export const useReposListBranches = (
  variables: ReposListBranchesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListBranchesResponse,
      Responses.NotFound,
      ReposListBranchesResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListBranchesResponse,
    Responses.NotFound,
    ReposListBranchesResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/branches",
      operationId: "reposListBranches",
      variables,
    }),
    () => fetchReposListBranches({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetBranchPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposGetBranchVariables = {
  pathParams: ReposGetBranchPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposGetBranch = (variables: ReposGetBranchVariables) =>
  githubFetch<
    Schemas.BranchWithProtection,
    undefined,
    {},
    {},
    ReposGetBranchPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}",
    method: "get",
    ...variables,
  });

export const useReposGetBranch = (
  variables: ReposGetBranchVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.BranchWithProtection,
      Responses.NotFound | Responses.PreviewHeaderMissing,
      Schemas.BranchWithProtection
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.BranchWithProtection,
    Responses.NotFound | Responses.PreviewHeaderMissing,
    Schemas.BranchWithProtection
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/branches/{branch}",
      operationId: "reposGetBranch",
      variables,
    }),
    () => fetchReposGetBranch({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposDeleteBranchProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposDeleteBranchProtectionVariables = {
  pathParams: ReposDeleteBranchProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposDeleteBranchProtection = (
  variables: ReposDeleteBranchProtectionVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ReposDeleteBranchProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection",
    method: "delete",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposDeleteBranchProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.Forbidden,
      ReposDeleteBranchProtectionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.Forbidden,
    ReposDeleteBranchProtectionVariables
  >(
    (variables: ReposDeleteBranchProtectionVariables) =>
      fetchReposDeleteBranchProtection({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetBranchProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposGetBranchProtectionVariables = {
  pathParams: ReposGetBranchProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposGetBranchProtection = (
  variables: ReposGetBranchProtectionVariables
) =>
  githubFetch<
    Schemas.BranchProtection,
    undefined,
    {},
    {},
    ReposGetBranchProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection",
    method: "get",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposGetBranchProtection = (
  variables: ReposGetBranchProtectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.BranchProtection,
      Responses.NotFound,
      Schemas.BranchProtection
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.BranchProtection,
    Responses.NotFound,
    Schemas.BranchProtection
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/branches/{branch}/protection",
      operationId: "reposGetBranchProtection",
      variables,
    }),
    () => fetchReposGetBranchProtection({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposUpdateBranchProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposUpdateBranchProtectionRequestBody = {
  /*
   * Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.
   */
  allow_deletions?: boolean;
  /*
   * Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."
   */
  allow_force_pushes?: boolean | null;
  /*
   * Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.
   */
  enforce_admins: boolean | null;
  /*
   * Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://help.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.
   */
  required_linear_history?: boolean;
  /*
   * Require at least one approving review on a pull request, before merging. Set to `null` to disable.
   */
  required_pull_request_reviews: {
    /*
     * Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
     */
    dismiss_stale_reviews?: boolean;
    /*
     * Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
     */
    dismissal_restrictions?: {
      /*
       * The list of team `slug`s with dismissal access
       */
      teams?: string[];
      /*
       * The list of user `login`s with dismissal access
       */
      users?: string[];
    };
    /*
     * Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) review them.
     */
    require_code_owner_reviews?: boolean;
    /*
     * Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6.
     */
    required_approving_review_count?: number;
  } | null;
  /*
   * Require status checks to pass before merging. Set to `null` to disable.
   */
  required_status_checks: {
    /*
     * The list of status checks to require in order to merge into this branch
     */
    contexts: string[];
    /*
     * Require branches to be up to date before merging.
     */
    strict: boolean;
  } | null;
  /*
   * Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
   */
  restrictions: {
    /*
     * The list of app `slug`s with push access
     */
    apps?: string[];
    /*
     * The list of team `slug`s with push access
     */
    teams: string[];
    /*
     * The list of user `login`s with push access
     */
    users: string[];
  } | null;
};

export type ReposUpdateBranchProtectionVariables = {
  body: ReposUpdateBranchProtectionRequestBody;
  pathParams: ReposUpdateBranchProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Protecting a branch requires admin or owner permissions to the repository.
 *
 * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
 *
 * **Note**: The list of users, apps, and teams in total is limited to 100 items.
 */
export const fetchReposUpdateBranchProtection = (
  variables: ReposUpdateBranchProtectionVariables
) =>
  githubFetch<
    Schemas.ProtectedBranch,
    ReposUpdateBranchProtectionRequestBody,
    {},
    {},
    ReposUpdateBranchProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection",
    method: "put",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Protecting a branch requires admin or owner permissions to the repository.
 *
 * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
 *
 * **Note**: The list of users, apps, and teams in total is limited to 100 items.
 */
export const useReposUpdateBranchProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProtectedBranch,
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.PreviewHeaderMissing
      | Responses.ValidationFailedSimple,
      ReposUpdateBranchProtectionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ProtectedBranch,
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.PreviewHeaderMissing
    | Responses.ValidationFailedSimple,
    ReposUpdateBranchProtectionVariables
  >(
    (variables: ReposUpdateBranchProtectionVariables) =>
      fetchReposUpdateBranchProtection({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposDeleteAdminBranchProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposDeleteAdminBranchProtectionVariables = {
  pathParams: ReposDeleteAdminBranchProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const fetchReposDeleteAdminBranchProtection = (
  variables: ReposDeleteAdminBranchProtectionVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ReposDeleteAdminBranchProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
    method: "delete",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const useReposDeleteAdminBranchProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotFound,
      ReposDeleteAdminBranchProtectionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotFound,
    ReposDeleteAdminBranchProtectionVariables
  >(
    (variables: ReposDeleteAdminBranchProtectionVariables) =>
      fetchReposDeleteAdminBranchProtection({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposGetAdminBranchProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposGetAdminBranchProtectionVariables = {
  pathParams: ReposGetAdminBranchProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposGetAdminBranchProtection = (
  variables: ReposGetAdminBranchProtectionVariables
) =>
  githubFetch<
    Schemas.ProtectedBranchAdminEnforced,
    undefined,
    {},
    {},
    ReposGetAdminBranchProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
    method: "get",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposGetAdminBranchProtection = (
  variables: ReposGetAdminBranchProtectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProtectedBranchAdminEnforced,
      undefined,
      Schemas.ProtectedBranchAdminEnforced
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ProtectedBranchAdminEnforced,
    undefined,
    Schemas.ProtectedBranchAdminEnforced
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
      operationId: "reposGetAdminBranchProtection",
      variables,
    }),
    () =>
      fetchReposGetAdminBranchProtection({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposSetAdminBranchProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposSetAdminBranchProtectionVariables = {
  pathParams: ReposSetAdminBranchProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const fetchReposSetAdminBranchProtection = (
  variables: ReposSetAdminBranchProtectionVariables
) =>
  githubFetch<
    Schemas.ProtectedBranchAdminEnforced,
    undefined,
    {},
    {},
    ReposSetAdminBranchProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
    method: "post",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const useReposSetAdminBranchProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProtectedBranchAdminEnforced,
      undefined,
      ReposSetAdminBranchProtectionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ProtectedBranchAdminEnforced,
    undefined,
    ReposSetAdminBranchProtectionVariables
  >(
    (variables: ReposSetAdminBranchProtectionVariables) =>
      fetchReposSetAdminBranchProtection({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposDeletePullRequestReviewProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposDeletePullRequestReviewProtectionVariables = {
  pathParams: ReposDeletePullRequestReviewProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposDeletePullRequestReviewProtection = (
  variables: ReposDeletePullRequestReviewProtectionVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ReposDeletePullRequestReviewProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
    method: "delete",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposDeletePullRequestReviewProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotFound,
      ReposDeletePullRequestReviewProtectionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotFound,
    ReposDeletePullRequestReviewProtectionVariables
  >(
    (variables: ReposDeletePullRequestReviewProtectionVariables) =>
      fetchReposDeletePullRequestReviewProtection({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposGetPullRequestReviewProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposGetPullRequestReviewProtectionVariables = {
  pathParams: ReposGetPullRequestReviewProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposGetPullRequestReviewProtection = (
  variables: ReposGetPullRequestReviewProtectionVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ReposGetPullRequestReviewProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
    method: "get",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposGetPullRequestReviewProtection = (
  variables: ReposGetPullRequestReviewProtectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, undefined, undefined>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, undefined, undefined>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
      operationId: "reposGetPullRequestReviewProtection",
      variables,
    }),
    () =>
      fetchReposGetPullRequestReviewProtection({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposUpdatePullRequestReviewProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposUpdatePullRequestReviewProtectionRequestBody = {
  /*
   * Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
   */
  dismiss_stale_reviews?: boolean;
  /*
   * Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
   */
  dismissal_restrictions?: {
    /*
     * The list of team `slug`s with dismissal access
     */
    teams?: string[];
    /*
     * The list of user `login`s with dismissal access
     */
    users?: string[];
  };
  /*
   * Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) have reviewed.
   */
  require_code_owner_reviews?: boolean;
  /*
   * Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6.
   */
  required_approving_review_count?: number;
};

export type ReposUpdatePullRequestReviewProtectionVariables = {
  body?: ReposUpdatePullRequestReviewProtectionRequestBody;
  pathParams: ReposUpdatePullRequestReviewProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 *
 * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
 */
export const fetchReposUpdatePullRequestReviewProtection = (
  variables: ReposUpdatePullRequestReviewProtectionVariables
) =>
  githubFetch<
    Schemas.ProtectedBranchPullRequestReview,
    ReposUpdatePullRequestReviewProtectionRequestBody,
    {},
    {},
    ReposUpdatePullRequestReviewProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
    method: "patch",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 *
 * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
 */
export const useReposUpdatePullRequestReviewProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProtectedBranchPullRequestReview,
      Responses.ValidationFailed,
      ReposUpdatePullRequestReviewProtectionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ProtectedBranchPullRequestReview,
    Responses.ValidationFailed,
    ReposUpdatePullRequestReviewProtectionVariables
  >(
    (variables: ReposUpdatePullRequestReviewProtectionVariables) =>
      fetchReposUpdatePullRequestReviewProtection({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposDeleteCommitSignatureProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposDeleteCommitSignatureProtectionVariables = {
  pathParams: ReposDeleteCommitSignatureProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
 */
export const fetchReposDeleteCommitSignatureProtection = (
  variables: ReposDeleteCommitSignatureProtectionVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ReposDeleteCommitSignatureProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
    method: "delete",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
 */
export const useReposDeleteCommitSignatureProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotFound,
      ReposDeleteCommitSignatureProtectionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotFound,
    ReposDeleteCommitSignatureProtectionVariables
  >(
    (variables: ReposDeleteCommitSignatureProtectionVariables) =>
      fetchReposDeleteCommitSignatureProtection({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposGetCommitSignatureProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposGetCommitSignatureProtectionVariables = {
  pathParams: ReposGetCommitSignatureProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.
 *
 * **Note**: You must enable branch protection to require signed commits.
 */
export const fetchReposGetCommitSignatureProtection = (
  variables: ReposGetCommitSignatureProtectionVariables
) =>
  githubFetch<
    Schemas.ProtectedBranchAdminEnforced,
    undefined,
    {},
    {},
    ReposGetCommitSignatureProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
    method: "get",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.
 *
 * **Note**: You must enable branch protection to require signed commits.
 */
export const useReposGetCommitSignatureProtection = (
  variables: ReposGetCommitSignatureProtectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProtectedBranchAdminEnforced,
      Responses.NotFound,
      Schemas.ProtectedBranchAdminEnforced
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ProtectedBranchAdminEnforced,
    Responses.NotFound,
    Schemas.ProtectedBranchAdminEnforced
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
      operationId: "reposGetCommitSignatureProtection",
      variables,
    }),
    () =>
      fetchReposGetCommitSignatureProtection({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateCommitSignatureProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposCreateCommitSignatureProtectionVariables = {
  pathParams: ReposCreateCommitSignatureProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
 */
export const fetchReposCreateCommitSignatureProtection = (
  variables: ReposCreateCommitSignatureProtectionVariables
) =>
  githubFetch<
    Schemas.ProtectedBranchAdminEnforced,
    undefined,
    {},
    {},
    ReposCreateCommitSignatureProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
    method: "post",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
 */
export const useReposCreateCommitSignatureProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProtectedBranchAdminEnforced,
      Responses.NotFound,
      ReposCreateCommitSignatureProtectionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ProtectedBranchAdminEnforced,
    Responses.NotFound,
    ReposCreateCommitSignatureProtectionVariables
  >(
    (variables: ReposCreateCommitSignatureProtectionVariables) =>
      fetchReposCreateCommitSignatureProtection({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposRemoveStatusCheckProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposRemoveStatusCheckProtectionVariables = {
  pathParams: ReposRemoveStatusCheckProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposRemoveStatusCheckProtection = (
  variables: ReposRemoveStatusCheckProtectionVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ReposRemoveStatusCheckProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
    method: "delete",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposRemoveStatusCheckProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ReposRemoveStatusCheckProtectionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ReposRemoveStatusCheckProtectionVariables
  >(
    (variables: ReposRemoveStatusCheckProtectionVariables) =>
      fetchReposRemoveStatusCheckProtection({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposGetStatusChecksProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposGetStatusChecksProtectionVariables = {
  pathParams: ReposGetStatusChecksProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposGetStatusChecksProtection = (
  variables: ReposGetStatusChecksProtectionVariables
) =>
  githubFetch<
    Schemas.StatusCheckPolicy,
    undefined,
    {},
    {},
    ReposGetStatusChecksProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
    method: "get",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposGetStatusChecksProtection = (
  variables: ReposGetStatusChecksProtectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.StatusCheckPolicy,
      Responses.NotFound,
      Schemas.StatusCheckPolicy
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.StatusCheckPolicy,
    Responses.NotFound,
    Schemas.StatusCheckPolicy
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
      operationId: "reposGetStatusChecksProtection",
      variables,
    }),
    () =>
      fetchReposGetStatusChecksProtection({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposUpdateStatusCheckProtectionPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposUpdateStatusCheckProtectionRequestBody = {
  /*
   * The list of status checks to require in order to merge into this branch
   */
  contexts?: string[];
  /*
   * Require branches to be up to date before merging.
   */
  strict?: boolean;
};

export type ReposUpdateStatusCheckProtectionVariables = {
  body?: ReposUpdateStatusCheckProtectionRequestBody;
  pathParams: ReposUpdateStatusCheckProtectionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const fetchReposUpdateStatusCheckProtection = (
  variables: ReposUpdateStatusCheckProtectionVariables
) =>
  githubFetch<
    Schemas.StatusCheckPolicy,
    ReposUpdateStatusCheckProtectionRequestBody,
    {},
    {},
    ReposUpdateStatusCheckProtectionPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
    method: "patch",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const useReposUpdateStatusCheckProtection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.StatusCheckPolicy,
      Responses.NotFound | Responses.ValidationFailed,
      ReposUpdateStatusCheckProtectionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.StatusCheckPolicy,
    Responses.NotFound | Responses.ValidationFailed,
    ReposUpdateStatusCheckProtectionVariables
  >(
    (variables: ReposUpdateStatusCheckProtectionVariables) =>
      fetchReposUpdateStatusCheckProtection({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposRemoveStatusCheckContextsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposRemoveStatusCheckContextsResponse = string[];

export type ReposRemoveStatusCheckContextsRequestBody = {
  /*
   * contexts parameter
   */
  contexts: string[];
};

export type ReposRemoveStatusCheckContextsVariables = {
  body: ReposRemoveStatusCheckContextsRequestBody;
  pathParams: ReposRemoveStatusCheckContextsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposRemoveStatusCheckContexts = (
  variables: ReposRemoveStatusCheckContextsVariables
) =>
  githubFetch<
    ReposRemoveStatusCheckContextsResponse,
    ReposRemoveStatusCheckContextsRequestBody,
    {},
    {},
    ReposRemoveStatusCheckContextsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
    method: "delete",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposRemoveStatusCheckContexts = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposRemoveStatusCheckContextsResponse,
      Responses.NotFound | Responses.ValidationFailed,
      ReposRemoveStatusCheckContextsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposRemoveStatusCheckContextsResponse,
    Responses.NotFound | Responses.ValidationFailed,
    ReposRemoveStatusCheckContextsVariables
  >(
    (variables: ReposRemoveStatusCheckContextsVariables) =>
      fetchReposRemoveStatusCheckContexts({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetAllStatusCheckContextsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposGetAllStatusCheckContextsResponse = string[];

export type ReposGetAllStatusCheckContextsVariables = {
  pathParams: ReposGetAllStatusCheckContextsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposGetAllStatusCheckContexts = (
  variables: ReposGetAllStatusCheckContextsVariables
) =>
  githubFetch<
    ReposGetAllStatusCheckContextsResponse,
    undefined,
    {},
    {},
    ReposGetAllStatusCheckContextsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
    method: "get",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposGetAllStatusCheckContexts = (
  variables: ReposGetAllStatusCheckContextsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetAllStatusCheckContextsResponse,
      Responses.NotFound,
      ReposGetAllStatusCheckContextsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetAllStatusCheckContextsResponse,
    Responses.NotFound,
    ReposGetAllStatusCheckContextsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
      operationId: "reposGetAllStatusCheckContexts",
      variables,
    }),
    () =>
      fetchReposGetAllStatusCheckContexts({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposAddStatusCheckContextsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposAddStatusCheckContextsResponse = string[];

export type ReposAddStatusCheckContextsRequestBody = {
  /*
   * contexts parameter
   */
  contexts: string[];
};

export type ReposAddStatusCheckContextsVariables = {
  body: ReposAddStatusCheckContextsRequestBody;
  pathParams: ReposAddStatusCheckContextsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposAddStatusCheckContexts = (
  variables: ReposAddStatusCheckContextsVariables
) =>
  githubFetch<
    ReposAddStatusCheckContextsResponse,
    ReposAddStatusCheckContextsRequestBody,
    {},
    {},
    ReposAddStatusCheckContextsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
    method: "post",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposAddStatusCheckContexts = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposAddStatusCheckContextsResponse,
      Responses.Forbidden | Responses.NotFound | Responses.ValidationFailed,
      ReposAddStatusCheckContextsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposAddStatusCheckContextsResponse,
    Responses.Forbidden | Responses.NotFound | Responses.ValidationFailed,
    ReposAddStatusCheckContextsVariables
  >(
    (variables: ReposAddStatusCheckContextsVariables) =>
      fetchReposAddStatusCheckContexts({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposSetStatusCheckContextsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposSetStatusCheckContextsResponse = string[];

export type ReposSetStatusCheckContextsRequestBody = {
  /*
   * contexts parameter
   */
  contexts: string[];
};

export type ReposSetStatusCheckContextsVariables = {
  body: ReposSetStatusCheckContextsRequestBody;
  pathParams: ReposSetStatusCheckContextsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchReposSetStatusCheckContexts = (
  variables: ReposSetStatusCheckContextsVariables
) =>
  githubFetch<
    ReposSetStatusCheckContextsResponse,
    ReposSetStatusCheckContextsRequestBody,
    {},
    {},
    ReposSetStatusCheckContextsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
    method: "put",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const useReposSetStatusCheckContexts = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposSetStatusCheckContextsResponse,
      Responses.NotFound | Responses.ValidationFailed,
      ReposSetStatusCheckContextsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposSetStatusCheckContextsResponse,
    Responses.NotFound | Responses.ValidationFailed,
    ReposSetStatusCheckContextsVariables
  >(
    (variables: ReposSetStatusCheckContextsVariables) =>
      fetchReposSetStatusCheckContexts({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposDeleteAccessRestrictionsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposDeleteAccessRestrictionsVariables = {
  pathParams: ReposDeleteAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Disables the ability to restrict who can push to this branch.
 */
export const fetchReposDeleteAccessRestrictions = (
  variables: ReposDeleteAccessRestrictionsVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ReposDeleteAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
    method: "delete",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Disables the ability to restrict who can push to this branch.
 */
export const useReposDeleteAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ReposDeleteAccessRestrictionsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ReposDeleteAccessRestrictionsVariables
  >(
    (variables: ReposDeleteAccessRestrictionsVariables) =>
      fetchReposDeleteAccessRestrictions({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetAccessRestrictionsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposGetAccessRestrictionsVariables = {
  pathParams: ReposGetAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists who has access to this protected branch.
 *
 * **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
 */
export const fetchReposGetAccessRestrictions = (
  variables: ReposGetAccessRestrictionsVariables
) =>
  githubFetch<
    Schemas.BranchRestrictionPolicy,
    undefined,
    {},
    {},
    ReposGetAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
    method: "get",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists who has access to this protected branch.
 *
 * **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
 */
export const useReposGetAccessRestrictions = (
  variables: ReposGetAccessRestrictionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.BranchRestrictionPolicy,
      Responses.NotFound,
      Schemas.BranchRestrictionPolicy
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.BranchRestrictionPolicy,
    Responses.NotFound,
    Schemas.BranchRestrictionPolicy
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
      operationId: "reposGetAccessRestrictions",
      variables,
    }),
    () => fetchReposGetAccessRestrictions({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposRemoveAppAccessRestrictionsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposRemoveAppAccessRestrictionsResponse = Schemas.Integration[];

export type ReposRemoveAppAccessRestrictionsRequestBody = {
  /*
   * apps parameter
   */
  apps: string[];
};

export type ReposRemoveAppAccessRestrictionsVariables = {
  body: ReposRemoveAppAccessRestrictionsRequestBody;
  pathParams: ReposRemoveAppAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 *
 * | Type    | Description                                                                                                                                                |
 * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const fetchReposRemoveAppAccessRestrictions = (
  variables: ReposRemoveAppAccessRestrictionsVariables
) =>
  githubFetch<
    ReposRemoveAppAccessRestrictionsResponse,
    ReposRemoveAppAccessRestrictionsRequestBody,
    {},
    {},
    ReposRemoveAppAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
    method: "delete",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 *
 * | Type    | Description                                                                                                                                                |
 * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const useReposRemoveAppAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposRemoveAppAccessRestrictionsResponse,
      Responses.ValidationFailed,
      ReposRemoveAppAccessRestrictionsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposRemoveAppAccessRestrictionsResponse,
    Responses.ValidationFailed,
    ReposRemoveAppAccessRestrictionsVariables
  >(
    (variables: ReposRemoveAppAccessRestrictionsVariables) =>
      fetchReposRemoveAppAccessRestrictions({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposGetAppsWithAccessToProtectedBranchPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposGetAppsWithAccessToProtectedBranchResponse =
  Schemas.Integration[];

export type ReposGetAppsWithAccessToProtectedBranchVariables = {
  pathParams: ReposGetAppsWithAccessToProtectedBranchPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 */
export const fetchReposGetAppsWithAccessToProtectedBranch = (
  variables: ReposGetAppsWithAccessToProtectedBranchVariables
) =>
  githubFetch<
    ReposGetAppsWithAccessToProtectedBranchResponse,
    undefined,
    {},
    {},
    ReposGetAppsWithAccessToProtectedBranchPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
    method: "get",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 */
export const useReposGetAppsWithAccessToProtectedBranch = (
  variables: ReposGetAppsWithAccessToProtectedBranchVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetAppsWithAccessToProtectedBranchResponse,
      Responses.NotFound,
      ReposGetAppsWithAccessToProtectedBranchResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetAppsWithAccessToProtectedBranchResponse,
    Responses.NotFound,
    ReposGetAppsWithAccessToProtectedBranchResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
      operationId: "reposGetAppsWithAccessToProtectedBranch",
      variables,
    }),
    () =>
      fetchReposGetAppsWithAccessToProtectedBranch({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposAddAppAccessRestrictionsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposAddAppAccessRestrictionsResponse = Schemas.Integration[];

export type ReposAddAppAccessRestrictionsRequestBody = {
  /*
   * apps parameter
   */
  apps: string[];
};

export type ReposAddAppAccessRestrictionsVariables = {
  body: ReposAddAppAccessRestrictionsRequestBody;
  pathParams: ReposAddAppAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 *
 * | Type    | Description                                                                                                                                                |
 * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const fetchReposAddAppAccessRestrictions = (
  variables: ReposAddAppAccessRestrictionsVariables
) =>
  githubFetch<
    ReposAddAppAccessRestrictionsResponse,
    ReposAddAppAccessRestrictionsRequestBody,
    {},
    {},
    ReposAddAppAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
    method: "post",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 *
 * | Type    | Description                                                                                                                                                |
 * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const useReposAddAppAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposAddAppAccessRestrictionsResponse,
      Responses.ValidationFailed,
      ReposAddAppAccessRestrictionsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposAddAppAccessRestrictionsResponse,
    Responses.ValidationFailed,
    ReposAddAppAccessRestrictionsVariables
  >(
    (variables: ReposAddAppAccessRestrictionsVariables) =>
      fetchReposAddAppAccessRestrictions({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposSetAppAccessRestrictionsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposSetAppAccessRestrictionsResponse = Schemas.Integration[];

export type ReposSetAppAccessRestrictionsRequestBody = {
  /*
   * apps parameter
   */
  apps: string[];
};

export type ReposSetAppAccessRestrictionsVariables = {
  body: ReposSetAppAccessRestrictionsRequestBody;
  pathParams: ReposSetAppAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 *
 * | Type    | Description                                                                                                                                                |
 * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const fetchReposSetAppAccessRestrictions = (
  variables: ReposSetAppAccessRestrictionsVariables
) =>
  githubFetch<
    ReposSetAppAccessRestrictionsResponse,
    ReposSetAppAccessRestrictionsRequestBody,
    {},
    {},
    ReposSetAppAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
    method: "put",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 *
 * | Type    | Description                                                                                                                                                |
 * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const useReposSetAppAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposSetAppAccessRestrictionsResponse,
      Responses.ValidationFailed,
      ReposSetAppAccessRestrictionsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposSetAppAccessRestrictionsResponse,
    Responses.ValidationFailed,
    ReposSetAppAccessRestrictionsVariables
  >(
    (variables: ReposSetAppAccessRestrictionsVariables) =>
      fetchReposSetAppAccessRestrictions({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposRemoveTeamAccessRestrictionsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposRemoveTeamAccessRestrictionsResponse = Schemas.Team[];

export type ReposRemoveTeamAccessRestrictionsRequestBody = {
  /*
   * teams parameter
   */
  teams: string[];
};

export type ReposRemoveTeamAccessRestrictionsVariables = {
  body: ReposRemoveTeamAccessRestrictionsRequestBody;
  pathParams: ReposRemoveTeamAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removes the ability of a team to push to this branch. You can also remove push access for child teams.
 *
 * | Type    | Description                                                                                                                                         |
 * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const fetchReposRemoveTeamAccessRestrictions = (
  variables: ReposRemoveTeamAccessRestrictionsVariables
) =>
  githubFetch<
    ReposRemoveTeamAccessRestrictionsResponse,
    ReposRemoveTeamAccessRestrictionsRequestBody,
    {},
    {},
    ReposRemoveTeamAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
    method: "delete",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removes the ability of a team to push to this branch. You can also remove push access for child teams.
 *
 * | Type    | Description                                                                                                                                         |
 * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const useReposRemoveTeamAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposRemoveTeamAccessRestrictionsResponse,
      Responses.ValidationFailed,
      ReposRemoveTeamAccessRestrictionsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposRemoveTeamAccessRestrictionsResponse,
    Responses.ValidationFailed,
    ReposRemoveTeamAccessRestrictionsVariables
  >(
    (variables: ReposRemoveTeamAccessRestrictionsVariables) =>
      fetchReposRemoveTeamAccessRestrictions({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposGetTeamsWithAccessToProtectedBranchPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposGetTeamsWithAccessToProtectedBranchResponse = Schemas.Team[];

export type ReposGetTeamsWithAccessToProtectedBranchVariables = {
  pathParams: ReposGetTeamsWithAccessToProtectedBranchPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the teams who have push access to this branch. The list includes child teams.
 */
export const fetchReposGetTeamsWithAccessToProtectedBranch = (
  variables: ReposGetTeamsWithAccessToProtectedBranchVariables
) =>
  githubFetch<
    ReposGetTeamsWithAccessToProtectedBranchResponse,
    undefined,
    {},
    {},
    ReposGetTeamsWithAccessToProtectedBranchPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
    method: "get",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the teams who have push access to this branch. The list includes child teams.
 */
export const useReposGetTeamsWithAccessToProtectedBranch = (
  variables: ReposGetTeamsWithAccessToProtectedBranchVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetTeamsWithAccessToProtectedBranchResponse,
      Responses.NotFound,
      ReposGetTeamsWithAccessToProtectedBranchResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetTeamsWithAccessToProtectedBranchResponse,
    Responses.NotFound,
    ReposGetTeamsWithAccessToProtectedBranchResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
      operationId: "reposGetTeamsWithAccessToProtectedBranch",
      variables,
    }),
    () =>
      fetchReposGetTeamsWithAccessToProtectedBranch({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposAddTeamAccessRestrictionsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposAddTeamAccessRestrictionsResponse = Schemas.Team[];

export type ReposAddTeamAccessRestrictionsRequestBody = {
  /*
   * teams parameter
   */
  teams: string[];
};

export type ReposAddTeamAccessRestrictionsVariables = {
  body: ReposAddTeamAccessRestrictionsRequestBody;
  pathParams: ReposAddTeamAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Grants the specified teams push access for this branch. You can also give push access to child teams.
 *
 * | Type    | Description                                                                                                                                |
 * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
 * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const fetchReposAddTeamAccessRestrictions = (
  variables: ReposAddTeamAccessRestrictionsVariables
) =>
  githubFetch<
    ReposAddTeamAccessRestrictionsResponse,
    ReposAddTeamAccessRestrictionsRequestBody,
    {},
    {},
    ReposAddTeamAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
    method: "post",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Grants the specified teams push access for this branch. You can also give push access to child teams.
 *
 * | Type    | Description                                                                                                                                |
 * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
 * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const useReposAddTeamAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposAddTeamAccessRestrictionsResponse,
      Responses.ValidationFailed,
      ReposAddTeamAccessRestrictionsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposAddTeamAccessRestrictionsResponse,
    Responses.ValidationFailed,
    ReposAddTeamAccessRestrictionsVariables
  >(
    (variables: ReposAddTeamAccessRestrictionsVariables) =>
      fetchReposAddTeamAccessRestrictions({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposSetTeamAccessRestrictionsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposSetTeamAccessRestrictionsResponse = Schemas.Team[];

export type ReposSetTeamAccessRestrictionsRequestBody = {
  /*
   * teams parameter
   */
  teams: string[];
};

export type ReposSetTeamAccessRestrictionsVariables = {
  body: ReposSetTeamAccessRestrictionsRequestBody;
  pathParams: ReposSetTeamAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
 *
 * | Type    | Description                                                                                                                                |
 * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
 * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const fetchReposSetTeamAccessRestrictions = (
  variables: ReposSetTeamAccessRestrictionsVariables
) =>
  githubFetch<
    ReposSetTeamAccessRestrictionsResponse,
    ReposSetTeamAccessRestrictionsRequestBody,
    {},
    {},
    ReposSetTeamAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
    method: "put",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
 *
 * | Type    | Description                                                                                                                                |
 * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
 * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const useReposSetTeamAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposSetTeamAccessRestrictionsResponse,
      Responses.ValidationFailed,
      ReposSetTeamAccessRestrictionsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposSetTeamAccessRestrictionsResponse,
    Responses.ValidationFailed,
    ReposSetTeamAccessRestrictionsVariables
  >(
    (variables: ReposSetTeamAccessRestrictionsVariables) =>
      fetchReposSetTeamAccessRestrictions({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposRemoveUserAccessRestrictionsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposRemoveUserAccessRestrictionsResponse = Schemas.SimpleUser[];

export type ReposRemoveUserAccessRestrictionsRequestBody = {
  /*
   * users parameter
   */
  users: string[];
};

export type ReposRemoveUserAccessRestrictionsVariables = {
  body: ReposRemoveUserAccessRestrictionsRequestBody;
  pathParams: ReposRemoveUserAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removes the ability of a user to push to this branch.
 *
 * | Type    | Description                                                                                                                                   |
 * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const fetchReposRemoveUserAccessRestrictions = (
  variables: ReposRemoveUserAccessRestrictionsVariables
) =>
  githubFetch<
    ReposRemoveUserAccessRestrictionsResponse,
    ReposRemoveUserAccessRestrictionsRequestBody,
    {},
    {},
    ReposRemoveUserAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
    method: "delete",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Removes the ability of a user to push to this branch.
 *
 * | Type    | Description                                                                                                                                   |
 * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const useReposRemoveUserAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposRemoveUserAccessRestrictionsResponse,
      Responses.ValidationFailed,
      ReposRemoveUserAccessRestrictionsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposRemoveUserAccessRestrictionsResponse,
    Responses.ValidationFailed,
    ReposRemoveUserAccessRestrictionsVariables
  >(
    (variables: ReposRemoveUserAccessRestrictionsVariables) =>
      fetchReposRemoveUserAccessRestrictions({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposGetUsersWithAccessToProtectedBranchPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposGetUsersWithAccessToProtectedBranchResponse =
  Schemas.SimpleUser[];

export type ReposGetUsersWithAccessToProtectedBranchVariables = {
  pathParams: ReposGetUsersWithAccessToProtectedBranchPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the people who have push access to this branch.
 */
export const fetchReposGetUsersWithAccessToProtectedBranch = (
  variables: ReposGetUsersWithAccessToProtectedBranchVariables
) =>
  githubFetch<
    ReposGetUsersWithAccessToProtectedBranchResponse,
    undefined,
    {},
    {},
    ReposGetUsersWithAccessToProtectedBranchPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
    method: "get",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists the people who have push access to this branch.
 */
export const useReposGetUsersWithAccessToProtectedBranch = (
  variables: ReposGetUsersWithAccessToProtectedBranchVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetUsersWithAccessToProtectedBranchResponse,
      Responses.NotFound,
      ReposGetUsersWithAccessToProtectedBranchResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetUsersWithAccessToProtectedBranchResponse,
    Responses.NotFound,
    ReposGetUsersWithAccessToProtectedBranchResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
      operationId: "reposGetUsersWithAccessToProtectedBranch",
      variables,
    }),
    () =>
      fetchReposGetUsersWithAccessToProtectedBranch({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposAddUserAccessRestrictionsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposAddUserAccessRestrictionsResponse = Schemas.SimpleUser[];

export type ReposAddUserAccessRestrictionsRequestBody = {
  /*
   * users parameter
   */
  users: string[];
};

export type ReposAddUserAccessRestrictionsVariables = {
  body: ReposAddUserAccessRestrictionsRequestBody;
  pathParams: ReposAddUserAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Grants the specified people push access for this branch.
 *
 * | Type    | Description                                                                                                                   |
 * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const fetchReposAddUserAccessRestrictions = (
  variables: ReposAddUserAccessRestrictionsVariables
) =>
  githubFetch<
    ReposAddUserAccessRestrictionsResponse,
    ReposAddUserAccessRestrictionsRequestBody,
    {},
    {},
    ReposAddUserAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
    method: "post",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Grants the specified people push access for this branch.
 *
 * | Type    | Description                                                                                                                   |
 * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const useReposAddUserAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposAddUserAccessRestrictionsResponse,
      Responses.ValidationFailed,
      ReposAddUserAccessRestrictionsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposAddUserAccessRestrictionsResponse,
    Responses.ValidationFailed,
    ReposAddUserAccessRestrictionsVariables
  >(
    (variables: ReposAddUserAccessRestrictionsVariables) =>
      fetchReposAddUserAccessRestrictions({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposSetUserAccessRestrictionsPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposSetUserAccessRestrictionsResponse = Schemas.SimpleUser[];

export type ReposSetUserAccessRestrictionsRequestBody = {
  /*
   * users parameter
   */
  users: string[];
};

export type ReposSetUserAccessRestrictionsVariables = {
  body: ReposSetUserAccessRestrictionsRequestBody;
  pathParams: ReposSetUserAccessRestrictionsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
 *
 * | Type    | Description                                                                                                                   |
 * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const fetchReposSetUserAccessRestrictions = (
  variables: ReposSetUserAccessRestrictionsVariables
) =>
  githubFetch<
    ReposSetUserAccessRestrictionsResponse,
    ReposSetUserAccessRestrictionsRequestBody,
    {},
    {},
    ReposSetUserAccessRestrictionsPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
    method: "put",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
 *
 * | Type    | Description                                                                                                                   |
 * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
 * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const useReposSetUserAccessRestrictions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      ReposSetUserAccessRestrictionsResponse,
      Responses.ValidationFailed,
      ReposSetUserAccessRestrictionsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    ReposSetUserAccessRestrictionsResponse,
    Responses.ValidationFailed,
    ReposSetUserAccessRestrictionsVariables
  >(
    (variables: ReposSetUserAccessRestrictionsVariables) =>
      fetchReposSetUserAccessRestrictions({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposRenameBranchPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the branch.
   */
  branch: string;
};

export type ReposRenameBranchRequestBody = {
  /*
   * The new name of the branch.
   */
  new_name: string;
};

export type ReposRenameBranchVariables = {
  body: ReposRenameBranchRequestBody;
  pathParams: ReposRenameBranchPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Renames a branch in a repository.
 *
 * **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".
 *
 * The permissions required to use this endpoint depends on whether you are renaming the default branch.
 *
 * To rename a non-default branch:
 *
 * * Users must have push access.
 * * GitHub Apps must have the `contents:write` repository permission.
 *
 * To rename the default branch:
 *
 * * Users must have admin or owner permissions.
 * * GitHub Apps must have the `administration:write` repository permission.
 */
export const fetchReposRenameBranch = (variables: ReposRenameBranchVariables) =>
  githubFetch<
    Schemas.BranchWithProtection,
    ReposRenameBranchRequestBody,
    {},
    {},
    ReposRenameBranchPathParams
  >({
    url: "/repos/{owner}/{repo}/branches/{branch}/rename",
    method: "post",
    ...variables,
  });

/**
 * Renames a branch in a repository.
 *
 * **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".
 *
 * The permissions required to use this endpoint depends on whether you are renaming the default branch.
 *
 * To rename a non-default branch:
 *
 * * Users must have push access.
 * * GitHub Apps must have the `contents:write` repository permission.
 *
 * To rename the default branch:
 *
 * * Users must have admin or owner permissions.
 * * GitHub Apps must have the `administration:write` repository permission.
 */
export const useReposRenameBranch = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.BranchWithProtection,
      Responses.Forbidden | Responses.NotFound | Responses.ValidationFailed,
      ReposRenameBranchVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.BranchWithProtection,
    Responses.Forbidden | Responses.NotFound | Responses.ValidationFailed,
    ReposRenameBranchVariables
  >(
    (variables: ReposRenameBranchVariables) =>
      fetchReposRenameBranch({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ChecksCreatePathParams = {
  owner: string;
  repo: string;
};

export type ChecksCreateVariables = {
  body:
    | ({
        status: "completed";
      } & {
        [key: string]: any;
      })
    | ({
        status?: "queued" | "in_progress";
      } & {
        [key: string]: any;
      });
  pathParams: ChecksCreatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.
 *
 * In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
 */
export const fetchChecksCreate = (variables: ChecksCreateVariables) =>
  githubFetch<
    Schemas.CheckRun,
    | ({
        status: "completed";
      } & {
        [key: string]: any;
      })
    | ({
        status?: "queued" | "in_progress";
      } & {
        [key: string]: any;
      }),
    {},
    {},
    ChecksCreatePathParams
  >({ url: "/repos/{owner}/{repo}/check-runs", method: "post", ...variables });

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.
 *
 * In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
 */
export const useChecksCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CheckRun,
      undefined,
      ChecksCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CheckRun,
    undefined,
    ChecksCreateVariables
  >(
    (variables: ChecksCreateVariables) =>
      fetchChecksCreate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ChecksGetPathParams = {
  owner: string;
  repo: string;
  /*
   * check_run_id parameter
   */
  checkRunId: number;
};

export type ChecksGetVariables = {
  pathParams: ChecksGetPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const fetchChecksGet = (variables: ChecksGetVariables) =>
  githubFetch<Schemas.CheckRun, undefined, {}, {}, ChecksGetPathParams>({
    url: "/repos/{owner}/{repo}/check-runs/{checkRunId}",
    method: "get",
    ...variables,
  });

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const useChecksGet = (
  variables: ChecksGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.CheckRun, undefined, Schemas.CheckRun>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.CheckRun, undefined, Schemas.CheckRun>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/check-runs/{check_run_id}",
      operationId: "checksGet",
      variables,
    }),
    () => fetchChecksGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ChecksUpdatePathParams = {
  owner: string;
  repo: string;
  /*
   * check_run_id parameter
   */
  checkRunId: number;
};

export type ChecksUpdateVariables = {
  body?:
    | ({
        status?: "completed";
      } & {
        [key: string]: any;
      })
    | ({
        status?: "queued" | "in_progress";
      } & {
        [key: string]: any;
      });
  pathParams: ChecksUpdatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.
 */
export const fetchChecksUpdate = (variables: ChecksUpdateVariables) =>
  githubFetch<
    Schemas.CheckRun,
    | ({
        status?: "completed";
      } & {
        [key: string]: any;
      })
    | ({
        status?: "queued" | "in_progress";
      } & {
        [key: string]: any;
      }),
    {},
    {},
    ChecksUpdatePathParams
  >({
    url: "/repos/{owner}/{repo}/check-runs/{checkRunId}",
    method: "patch",
    ...variables,
  });

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.
 */
export const useChecksUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CheckRun,
      undefined,
      ChecksUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CheckRun,
    undefined,
    ChecksUpdateVariables
  >(
    (variables: ChecksUpdateVariables) =>
      fetchChecksUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ChecksListAnnotationsPathParams = {
  owner: string;
  repo: string;
  /*
   * check_run_id parameter
   */
  checkRunId: number;
};

export type ChecksListAnnotationsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ChecksListAnnotationsResponse = Schemas.CheckAnnotation[];

export type ChecksListAnnotationsVariables = {
  pathParams: ChecksListAnnotationsPathParams;
  queryParams?: ChecksListAnnotationsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.
 */
export const fetchChecksListAnnotations = (
  variables: ChecksListAnnotationsVariables
) =>
  githubFetch<
    ChecksListAnnotationsResponse,
    undefined,
    {},
    ChecksListAnnotationsQueryParams,
    ChecksListAnnotationsPathParams
  >({
    url: "/repos/{owner}/{repo}/check-runs/{checkRunId}/annotations",
    method: "get",
    ...variables,
  });

/**
 * Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.
 */
export const useChecksListAnnotations = (
  variables: ChecksListAnnotationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ChecksListAnnotationsResponse,
      undefined,
      ChecksListAnnotationsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ChecksListAnnotationsResponse,
    undefined,
    ChecksListAnnotationsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
      operationId: "checksListAnnotations",
      variables,
    }),
    () => fetchChecksListAnnotations({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ChecksCreateSuitePathParams = {
  owner: string;
  repo: string;
};

export type ChecksCreateSuiteRequestBody = {
  /*
   * The sha of the head commit.
   */
  head_sha: string;
};

export type ChecksCreateSuiteVariables = {
  body: ChecksCreateSuiteRequestBody;
  pathParams: ChecksCreateSuitePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
 *
 * By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites.
 */
export const fetchChecksCreateSuite = (variables: ChecksCreateSuiteVariables) =>
  githubFetch<
    Schemas.CheckSuite,
    ChecksCreateSuiteRequestBody,
    {},
    {},
    ChecksCreateSuitePathParams
  >({
    url: "/repos/{owner}/{repo}/check-suites",
    method: "post",
    ...variables,
  });

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
 *
 * By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites.
 */
export const useChecksCreateSuite = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CheckSuite,
      undefined,
      ChecksCreateSuiteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CheckSuite,
    undefined,
    ChecksCreateSuiteVariables
  >(
    (variables: ChecksCreateSuiteVariables) =>
      fetchChecksCreateSuite({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ChecksSetSuitesPreferencesPathParams = {
  owner: string;
  repo: string;
};

export type ChecksSetSuitesPreferencesRequestBody = {
  /*
   * Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the [`auto_trigger_checks` object](https://docs.github.com/rest/reference/checks#auto_trigger_checks-object) description for details.
   */
  auto_trigger_checks?: {
    /*
     * The `id` of the GitHub App.
     */
    app_id: number;
    /*
     * Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.
     *
     * @default true
     */
    setting: boolean;
  }[];
};

export type ChecksSetSuitesPreferencesVariables = {
  body?: ChecksSetSuitesPreferencesRequestBody;
  pathParams: ChecksSetSuitesPreferencesPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
 */
export const fetchChecksSetSuitesPreferences = (
  variables: ChecksSetSuitesPreferencesVariables
) =>
  githubFetch<
    Schemas.CheckSuitePreference,
    ChecksSetSuitesPreferencesRequestBody,
    {},
    {},
    ChecksSetSuitesPreferencesPathParams
  >({
    url: "/repos/{owner}/{repo}/check-suites/preferences",
    method: "patch",
    ...variables,
  });

/**
 * Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
 */
export const useChecksSetSuitesPreferences = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CheckSuitePreference,
      undefined,
      ChecksSetSuitesPreferencesVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CheckSuitePreference,
    undefined,
    ChecksSetSuitesPreferencesVariables
  >(
    (variables: ChecksSetSuitesPreferencesVariables) =>
      fetchChecksSetSuitesPreferences({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ChecksGetSuitePathParams = {
  owner: string;
  repo: string;
  /*
   * check_suite_id parameter
   */
  checkSuiteId: number;
};

export type ChecksGetSuiteVariables = {
  pathParams: ChecksGetSuitePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
 *
 * Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
 */
export const fetchChecksGetSuite = (variables: ChecksGetSuiteVariables) =>
  githubFetch<Schemas.CheckSuite, undefined, {}, {}, ChecksGetSuitePathParams>({
    url: "/repos/{owner}/{repo}/check-suites/{checkSuiteId}",
    method: "get",
    ...variables,
  });

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
 *
 * Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
 */
export const useChecksGetSuite = (
  variables: ChecksGetSuiteVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CheckSuite,
      undefined,
      Schemas.CheckSuite
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.CheckSuite, undefined, Schemas.CheckSuite>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/check-suites/{check_suite_id}",
      operationId: "checksGetSuite",
      variables,
    }),
    () => fetchChecksGetSuite({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ChecksListForSuitePathParams = {
  owner: string;
  repo: string;
  /*
   * check_suite_id parameter
   */
  checkSuiteId: number;
};

export type ChecksListForSuiteQueryParams = {
  /*
   * Returns check runs with the specified `name`.
   */
  check_name?: string;
  /*
   * Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.
   */
  status?: "queued" | "in_progress" | "completed";
  /*
   * Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.
   *
   * @default latest
   */
  filter?: "latest" | "all";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ChecksListForSuiteResponse = {
  check_runs: Schemas.CheckRun[];
  total_count: number;
};

export type ChecksListForSuiteVariables = {
  pathParams: ChecksListForSuitePathParams;
  queryParams?: ChecksListForSuiteQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const fetchChecksListForSuite = (
  variables: ChecksListForSuiteVariables
) =>
  githubFetch<
    ChecksListForSuiteResponse,
    undefined,
    {},
    ChecksListForSuiteQueryParams,
    ChecksListForSuitePathParams
  >({
    url: "/repos/{owner}/{repo}/check-suites/{checkSuiteId}/check-runs",
    method: "get",
    ...variables,
  });

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const useChecksListForSuite = (
  variables: ChecksListForSuiteVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ChecksListForSuiteResponse,
      undefined,
      ChecksListForSuiteResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ChecksListForSuiteResponse,
    undefined,
    ChecksListForSuiteResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
      operationId: "checksListForSuite",
      variables,
    }),
    () => fetchChecksListForSuite({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ChecksRerequestSuitePathParams = {
  owner: string;
  repo: string;
  /*
   * check_suite_id parameter
   */
  checkSuiteId: number;
};

export type ChecksRerequestSuiteVariables = {
  pathParams: ChecksRerequestSuitePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
 *
 * To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
 */
export const fetchChecksRerequestSuite = (
  variables: ChecksRerequestSuiteVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ChecksRerequestSuitePathParams>({
    url: "/repos/{owner}/{repo}/check-suites/{checkSuiteId}/rerequest",
    method: "post",
    ...variables,
  });

/**
 * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
 *
 * To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
 */
export const useChecksRerequestSuite = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ChecksRerequestSuiteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ChecksRerequestSuiteVariables
  >(
    (variables: ChecksRerequestSuiteVariables) =>
      fetchChecksRerequestSuite({ ...fetcherOptions, ...variables }),
    options
  );
};

export type CodeScanningListAlertsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type CodeScanningListAlertsForRepoQueryParams = {
  /*
   * The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
   */
  tool_name?: Schemas.CodeScanningAnalysisToolName;
  /*
   * The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
   */
  tool_guid?: Schemas.CodeScanningAnalysisToolGuid;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
   */
  ref?: Schemas.CodeScanningRef;
  /*
   * Set to `open`, `fixed`, or `dismissed` to list code scanning alerts in a specific state.
   */
  state?: Schemas.CodeScanningAlertState;
};

export type CodeScanningListAlertsForRepoResponse =
  Schemas.CodeScanningAlertItems[];

export type CodeScanningListAlertsForRepoVariables = {
  pathParams: CodeScanningListAlertsForRepoPathParams;
  queryParams?: CodeScanningListAlertsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all open code scanning alerts for the default branch (usually `main`
 * or `master`). You must use an access token with the `security_events` scope to use
 * this endpoint. GitHub Apps must have the `security_events` read permission to use
 * this endpoint.
 *
 * The response includes a `most_recent_instance` object.
 * This provides details of the most recent instance of this alert
 * for the default branch or for the specified Git reference
 * (if you used `ref` in the request).
 */
export const fetchCodeScanningListAlertsForRepo = (
  variables: CodeScanningListAlertsForRepoVariables
) =>
  githubFetch<
    CodeScanningListAlertsForRepoResponse,
    undefined,
    {},
    CodeScanningListAlertsForRepoQueryParams,
    CodeScanningListAlertsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/alerts",
    method: "get",
    ...variables,
  });

/**
 * Lists all open code scanning alerts for the default branch (usually `main`
 * or `master`). You must use an access token with the `security_events` scope to use
 * this endpoint. GitHub Apps must have the `security_events` read permission to use
 * this endpoint.
 *
 * The response includes a `most_recent_instance` object.
 * This provides details of the most recent instance of this alert
 * for the default branch or for the specified Git reference
 * (if you used `ref` in the request).
 */
export const useCodeScanningListAlertsForRepo = (
  variables: CodeScanningListAlertsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodeScanningListAlertsForRepoResponse,
      | Responses.CodeScanningForbiddenRead
      | Responses.NotFound
      | Responses.ServiceUnavailable,
      CodeScanningListAlertsForRepoResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    CodeScanningListAlertsForRepoResponse,
    | Responses.CodeScanningForbiddenRead
    | Responses.NotFound
    | Responses.ServiceUnavailable,
    CodeScanningListAlertsForRepoResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/code-scanning/alerts",
      operationId: "codeScanningListAlertsForRepo",
      variables,
    }),
    () =>
      fetchCodeScanningListAlertsForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CodeScanningGetAlertPathParams = {
  owner: string;
  repo: string;
  /*
   * The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
   */
  alertNumber: Schemas.AlertNumber;
};

export type CodeScanningGetAlertVariables = {
  pathParams: CodeScanningGetAlertPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
 *
 * **Deprecation notice**:
 * The instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by `instances_url`.
 */
export const fetchCodeScanningGetAlert = (
  variables: CodeScanningGetAlertVariables
) =>
  githubFetch<
    Schemas.CodeScanningAlert,
    undefined,
    {},
    {},
    CodeScanningGetAlertPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/alerts/{alertNumber}",
    method: "get",
    ...variables,
  });

/**
 * Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
 *
 * **Deprecation notice**:
 * The instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by `instances_url`.
 */
export const useCodeScanningGetAlert = (
  variables: CodeScanningGetAlertVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeScanningAlert,
      | Responses.CodeScanningForbiddenRead
      | Responses.NotFound
      | Responses.ServiceUnavailable,
      Schemas.CodeScanningAlert
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CodeScanningAlert,
    | Responses.CodeScanningForbiddenRead
    | Responses.NotFound
    | Responses.ServiceUnavailable,
    Schemas.CodeScanningAlert
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
      operationId: "codeScanningGetAlert",
      variables,
    }),
    () => fetchCodeScanningGetAlert({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CodeScanningUpdateAlertPathParams = {
  owner: string;
  repo: string;
  /*
   * The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
   */
  alertNumber: Schemas.AlertNumber;
};

export type CodeScanningUpdateAlertRequestBody = {
  dismissed_reason?: Schemas.CodeScanningAlertDismissedReason;
  state: Schemas.CodeScanningAlertSetState;
};

export type CodeScanningUpdateAlertVariables = {
  body: CodeScanningUpdateAlertRequestBody;
  pathParams: CodeScanningUpdateAlertPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.
 */
export const fetchCodeScanningUpdateAlert = (
  variables: CodeScanningUpdateAlertVariables
) =>
  githubFetch<
    Schemas.CodeScanningAlert,
    CodeScanningUpdateAlertRequestBody,
    {},
    {},
    CodeScanningUpdateAlertPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/alerts/{alertNumber}",
    method: "patch",
    ...variables,
  });

/**
 * Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.
 */
export const useCodeScanningUpdateAlert = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CodeScanningAlert,
      | Responses.CodeScanningForbiddenWrite
      | Responses.NotFound
      | Responses.ServiceUnavailable,
      CodeScanningUpdateAlertVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CodeScanningAlert,
    | Responses.CodeScanningForbiddenWrite
    | Responses.NotFound
    | Responses.ServiceUnavailable,
    CodeScanningUpdateAlertVariables
  >(
    (variables: CodeScanningUpdateAlertVariables) =>
      fetchCodeScanningUpdateAlert({ ...fetcherOptions, ...variables }),
    options
  );
};

export type CodeScanningListAlertsInstancesPathParams = {
  owner: string;
  repo: string;
  /*
   * The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
   */
  alertNumber: Schemas.AlertNumber;
};

export type CodeScanningListAlertsInstancesQueryParams = {
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
   */
  ref?: Schemas.CodeScanningRef;
};

export type CodeScanningListAlertsInstancesResponse =
  Schemas.CodeScanningAlertInstance[];

export type CodeScanningListAlertsInstancesVariables = {
  pathParams: CodeScanningListAlertsInstancesPathParams;
  queryParams?: CodeScanningListAlertsInstancesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all instances of the specified code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
 */
export const fetchCodeScanningListAlertsInstances = (
  variables: CodeScanningListAlertsInstancesVariables
) =>
  githubFetch<
    CodeScanningListAlertsInstancesResponse,
    undefined,
    {},
    CodeScanningListAlertsInstancesQueryParams,
    CodeScanningListAlertsInstancesPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/alerts/{alertNumber}/instances",
    method: "get",
    ...variables,
  });

/**
 * Lists all instances of the specified code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
 */
export const useCodeScanningListAlertsInstances = (
  variables: CodeScanningListAlertsInstancesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodeScanningListAlertsInstancesResponse,
      | Responses.CodeScanningForbiddenRead
      | Responses.NotFound
      | Responses.ServiceUnavailable,
      CodeScanningListAlertsInstancesResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    CodeScanningListAlertsInstancesResponse,
    | Responses.CodeScanningForbiddenRead
    | Responses.NotFound
    | Responses.ServiceUnavailable,
    CodeScanningListAlertsInstancesResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
      operationId: "codeScanningListAlertsInstances",
      variables,
    }),
    () =>
      fetchCodeScanningListAlertsInstances({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CodeScanningListRecentAnalysesPathParams = {
  owner: string;
  repo: string;
};

export type CodeScanningListRecentAnalysesQueryParams = {
  /*
   * The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
   */
  tool_name?: Schemas.CodeScanningAnalysisToolName;
  /*
   * The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
   */
  tool_guid?: Schemas.CodeScanningAnalysisToolGuid;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
   */
  ref?: Schemas.CodeScanningRef;
  /*
   * Filter analyses belonging to the same SARIF upload.
   */
  sarif_id?: Schemas.CodeScanningAnalysisSarifId;
};

export type CodeScanningListRecentAnalysesResponse =
  Schemas.CodeScanningAnalysis[];

export type CodeScanningListRecentAnalysesVariables = {
  pathParams: CodeScanningListRecentAnalysesPathParams;
  queryParams?: CodeScanningListRecentAnalysesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the details of all code scanning analyses for a repository,
 * starting with the most recent.
 * The response is paginated and you can use the `page` and `per_page` parameters
 * to list the analyses you're interested in.
 * By default 30 analyses are listed per page.
 *
 * The `rules_count` field in the response give the number of rules
 * that were run in the analysis.
 * For very old analyses this data is not available,
 * and `0` is returned in this field.
 *
 * You must use an access token with the `security_events` scope to use this endpoint.
 * GitHub Apps must have the `security_events` read permission to use this endpoint.
 *
 * **Deprecation notice**:
 * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
 */
export const fetchCodeScanningListRecentAnalyses = (
  variables: CodeScanningListRecentAnalysesVariables
) =>
  githubFetch<
    CodeScanningListRecentAnalysesResponse,
    undefined,
    {},
    CodeScanningListRecentAnalysesQueryParams,
    CodeScanningListRecentAnalysesPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/analyses",
    method: "get",
    ...variables,
  });

/**
 * Lists the details of all code scanning analyses for a repository,
 * starting with the most recent.
 * The response is paginated and you can use the `page` and `per_page` parameters
 * to list the analyses you're interested in.
 * By default 30 analyses are listed per page.
 *
 * The `rules_count` field in the response give the number of rules
 * that were run in the analysis.
 * For very old analyses this data is not available,
 * and `0` is returned in this field.
 *
 * You must use an access token with the `security_events` scope to use this endpoint.
 * GitHub Apps must have the `security_events` read permission to use this endpoint.
 *
 * **Deprecation notice**:
 * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
 */
export const useCodeScanningListRecentAnalyses = (
  variables: CodeScanningListRecentAnalysesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CodeScanningListRecentAnalysesResponse,
      | Responses.CodeScanningForbiddenRead
      | Responses.NotFound
      | Responses.ServiceUnavailable,
      CodeScanningListRecentAnalysesResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    CodeScanningListRecentAnalysesResponse,
    | Responses.CodeScanningForbiddenRead
    | Responses.NotFound
    | Responses.ServiceUnavailable,
    CodeScanningListRecentAnalysesResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/code-scanning/analyses",
      operationId: "codeScanningListRecentAnalyses",
      variables,
    }),
    () =>
      fetchCodeScanningListRecentAnalyses({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CodeScanningDeleteAnalysisPathParams = {
  owner: string;
  repo: string;
  /*
   * The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.
   */
  analysisId: number;
};

export type CodeScanningDeleteAnalysisQueryParams = {
  /*
   * Allow deletion if the specified analysis is the last in a set. The parameter can be used without a value as the parameter value is not considered. If you attempt to delete the final analysis in a set without using this parameter you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.`
   */
  confirm_delete?: string | null;
};

export type CodeScanningDeleteAnalysisVariables = {
  pathParams: CodeScanningDeleteAnalysisPathParams;
  queryParams?: CodeScanningDeleteAnalysisQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a specified code scanning analysis from a repository. For
 * private repositories, you must use an access token with the `repo` scope. For public repositories,
 * you must use an access token with `public_repo` and `repo:security_events` scopes.
 * GitHub Apps must have the `security_events` write permission to use this endpoint.
 *
 * You can delete one analysis at a time.
 * To delete a series of analyses, start with the most recent analysis and work backwards.
 * Conceptually, the process is similar to the undo function in a text editor.
 *
 * When you list the analyses for a repository,
 * one or more will be identified as deletable in the response:
 *
 * ```
 * "deletable": true
 * ```
 *
 * An analysis is deletable when it's the most recent in a set of analyses.
 * Typically, a repository will have multiple sets of analyses
 * for each enabled code scanning tool,
 * where a set is determined by a unique combination of analysis values:
 *
 * * `ref`
 * * `tool`
 * * `analysis_key`
 * * `environment`
 *
 * If you attempt to delete an analysis that is not the most recent in a set,
 * you'll get a 400 response with the message:
 *
 * ```
 * Analysis specified is not deletable.
 * ```
 *
 * The response from a successful `DELETE` operation provides you with
 * two alternative URLs for deleting the next analysis in the set
 * (see the example default response below).
 * Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis
 * in the set. This is a useful option if you want to preserve at least one analysis
 * for the specified tool in your repository.
 * Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool.
 * When you delete the last analysis in a set the value of `next_analysis_url` and `confirm_delete_url`
 * in the 200 response is `null`.
 *
 * As an example of the deletion process,
 * let's imagine that you added a workflow that configured a particular code scanning tool
 * to analyze the code in a repository. This tool has added 15 analyses:
 * 10 on the default branch, and another 5 on a topic branch.
 * You therefore have two separate sets of analyses for this tool.
 * You've now decided that you want to remove all of the analyses for the tool.
 * To do this you must make 15 separate deletion requests.
 * To start, you must find the deletable analysis for one of the sets,
 * step through deleting the analyses in that set,
 * and then repeat the process for the second set.
 * The procedure therefore consists of a nested loop:
 *
 * **Outer loop**:
 * * List the analyses for the repository, filtered by tool.
 * * Parse this list to find a deletable analysis. If found:
 *
 *   **Inner loop**:
 *   * Delete the identified analysis.
 *   * Parse the response for the value of `next_analysis_url` and, if found, use this in the next iteration.
 *
 * The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `next_analysis_url` value. Alternatively, you could use the `confirm_delete_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
 */
export const fetchCodeScanningDeleteAnalysis = (
  variables: CodeScanningDeleteAnalysisVariables
) =>
  githubFetch<
    Schemas.CodeScanningAnalysisDeletion,
    undefined,
    {},
    CodeScanningDeleteAnalysisQueryParams,
    CodeScanningDeleteAnalysisPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/analyses/{analysisId}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a specified code scanning analysis from a repository. For
 * private repositories, you must use an access token with the `repo` scope. For public repositories,
 * you must use an access token with `public_repo` and `repo:security_events` scopes.
 * GitHub Apps must have the `security_events` write permission to use this endpoint.
 *
 * You can delete one analysis at a time.
 * To delete a series of analyses, start with the most recent analysis and work backwards.
 * Conceptually, the process is similar to the undo function in a text editor.
 *
 * When you list the analyses for a repository,
 * one or more will be identified as deletable in the response:
 *
 * ```
 * "deletable": true
 * ```
 *
 * An analysis is deletable when it's the most recent in a set of analyses.
 * Typically, a repository will have multiple sets of analyses
 * for each enabled code scanning tool,
 * where a set is determined by a unique combination of analysis values:
 *
 * * `ref`
 * * `tool`
 * * `analysis_key`
 * * `environment`
 *
 * If you attempt to delete an analysis that is not the most recent in a set,
 * you'll get a 400 response with the message:
 *
 * ```
 * Analysis specified is not deletable.
 * ```
 *
 * The response from a successful `DELETE` operation provides you with
 * two alternative URLs for deleting the next analysis in the set
 * (see the example default response below).
 * Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis
 * in the set. This is a useful option if you want to preserve at least one analysis
 * for the specified tool in your repository.
 * Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool.
 * When you delete the last analysis in a set the value of `next_analysis_url` and `confirm_delete_url`
 * in the 200 response is `null`.
 *
 * As an example of the deletion process,
 * let's imagine that you added a workflow that configured a particular code scanning tool
 * to analyze the code in a repository. This tool has added 15 analyses:
 * 10 on the default branch, and another 5 on a topic branch.
 * You therefore have two separate sets of analyses for this tool.
 * You've now decided that you want to remove all of the analyses for the tool.
 * To do this you must make 15 separate deletion requests.
 * To start, you must find the deletable analysis for one of the sets,
 * step through deleting the analyses in that set,
 * and then repeat the process for the second set.
 * The procedure therefore consists of a nested loop:
 *
 * **Outer loop**:
 * * List the analyses for the repository, filtered by tool.
 * * Parse this list to find a deletable analysis. If found:
 *
 *   **Inner loop**:
 *   * Delete the identified analysis.
 *   * Parse the response for the value of `next_analysis_url` and, if found, use this in the next iteration.
 *
 * The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `next_analysis_url` value. Alternatively, you could use the `confirm_delete_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
 */
export const useCodeScanningDeleteAnalysis = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CodeScanningAnalysisDeletion,
      | Responses.BadRequest
      | Responses.CodeScanningForbiddenWrite
      | Responses.NotFound
      | Responses.ServiceUnavailable,
      CodeScanningDeleteAnalysisVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CodeScanningAnalysisDeletion,
    | Responses.BadRequest
    | Responses.CodeScanningForbiddenWrite
    | Responses.NotFound
    | Responses.ServiceUnavailable,
    CodeScanningDeleteAnalysisVariables
  >(
    (variables: CodeScanningDeleteAnalysisVariables) =>
      fetchCodeScanningDeleteAnalysis({ ...fetcherOptions, ...variables }),
    options
  );
};

export type CodeScanningGetAnalysisPathParams = {
  owner: string;
  repo: string;
  /*
   * The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.
   */
  analysisId: number;
};

export type CodeScanningGetAnalysisVariables = {
  pathParams: CodeScanningGetAnalysisPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specified code scanning analysis for a repository.
 * You must use an access token with the `security_events` scope to use this endpoint.
 * GitHub Apps must have the `security_events` read permission to use this endpoint.
 *
 * The default JSON response contains fields that describe the analysis.
 * This includes the Git reference and commit SHA to which the analysis relates,
 * the datetime of the analysis, the name of the code scanning tool,
 * and the number of alerts.
 *
 * The `rules_count` field in the default response give the number of rules
 * that were run in the analysis.
 * For very old analyses this data is not available,
 * and `0` is returned in this field.
 *
 * If you use the Accept header `application/sarif+json`,
 * the response contains the analysis data that was uploaded.
 * This is formatted as
 * [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
 * For an example response, see "[Custom media type for code scanning](#custom-media-type-for-code-scanning)."
 *
 * **Deprecation notice**:
 * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
 */
export const fetchCodeScanningGetAnalysis = (
  variables: CodeScanningGetAnalysisVariables
) =>
  githubFetch<
    Schemas.CodeScanningAnalysis,
    undefined,
    {},
    {},
    CodeScanningGetAnalysisPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/analyses/{analysisId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specified code scanning analysis for a repository.
 * You must use an access token with the `security_events` scope to use this endpoint.
 * GitHub Apps must have the `security_events` read permission to use this endpoint.
 *
 * The default JSON response contains fields that describe the analysis.
 * This includes the Git reference and commit SHA to which the analysis relates,
 * the datetime of the analysis, the name of the code scanning tool,
 * and the number of alerts.
 *
 * The `rules_count` field in the default response give the number of rules
 * that were run in the analysis.
 * For very old analyses this data is not available,
 * and `0` is returned in this field.
 *
 * If you use the Accept header `application/sarif+json`,
 * the response contains the analysis data that was uploaded.
 * This is formatted as
 * [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
 * For an example response, see "[Custom media type for code scanning](#custom-media-type-for-code-scanning)."
 *
 * **Deprecation notice**:
 * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
 */
export const useCodeScanningGetAnalysis = (
  variables: CodeScanningGetAnalysisVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeScanningAnalysis,
      | Responses.CodeScanningForbiddenRead
      | Responses.NotFound
      | Responses.ServiceUnavailable,
      Schemas.CodeScanningAnalysis
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CodeScanningAnalysis,
    | Responses.CodeScanningForbiddenRead
    | Responses.NotFound
    | Responses.ServiceUnavailable,
    Schemas.CodeScanningAnalysis
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}",
      operationId: "codeScanningGetAnalysis",
      variables,
    }),
    () => fetchCodeScanningGetAnalysis({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CodeScanningUploadSarifPathParams = {
  owner: string;
  repo: string;
};

export type CodeScanningUploadSarifRequestBody = {
  /*
   * The base directory used in the analysis, as it appears in the SARIF file.
   * This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
   *
   * @example file:///github/workspace/
   * @format uri
   */
  checkout_uri?: string;
  commit_sha: Schemas.CodeScanningAnalysisCommitSha;
  ref: Schemas.CodeScanningRef;
  sarif: Schemas.CodeScanningAnalysisSarifFile;
  /*
   * The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   * @format date
   */
  started_at?: string;
  /*
   * The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.
   */
  tool_name?: string;
};

export type CodeScanningUploadSarifVariables = {
  body: CodeScanningUploadSarifRequestBody;
  pathParams: CodeScanningUploadSarifPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.
 *
 * There are two places where you can upload code scanning results.
 *  - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/github/finding-security-vulnerabilities-and-errors-in-your-code/triaging-code-scanning-alerts-in-pull-requests)."
 *  - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/github/finding-security-vulnerabilities-and-errors-in-your-code/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
 *
 * You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
 *
 * ```
 * gzip -c analysis-data.sarif | base64
 * ```
 *
 * SARIF upload supports a maximum of 1000 results per analysis run. Any results over this limit are ignored. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.
 *
 * The `202 Accepted`, response includes an `id` value.
 * You can use this ID to check the status of the upload by using this for the `/sarifs/{sarif_id}` endpoint.
 * For more information, see "[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload)."
 */
export const fetchCodeScanningUploadSarif = (
  variables: CodeScanningUploadSarifVariables
) =>
  githubFetch<
    Schemas.CodeScanningSarifsReceipt,
    CodeScanningUploadSarifRequestBody,
    {},
    {},
    CodeScanningUploadSarifPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/sarifs",
    method: "post",
    ...variables,
  });

/**
 * Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.
 *
 * There are two places where you can upload code scanning results.
 *  - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/github/finding-security-vulnerabilities-and-errors-in-your-code/triaging-code-scanning-alerts-in-pull-requests)."
 *  - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/github/finding-security-vulnerabilities-and-errors-in-your-code/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
 *
 * You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
 *
 * ```
 * gzip -c analysis-data.sarif | base64
 * ```
 *
 * SARIF upload supports a maximum of 1000 results per analysis run. Any results over this limit are ignored. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.
 *
 * The `202 Accepted`, response includes an `id` value.
 * You can use this ID to check the status of the upload by using this for the `/sarifs/{sarif_id}` endpoint.
 * For more information, see "[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload)."
 */
export const useCodeScanningUploadSarif = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CodeScanningSarifsReceipt,
      | Responses.CodeScanningForbiddenWrite
      | Responses.NotFound
      | Responses.ServiceUnavailable,
      CodeScanningUploadSarifVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CodeScanningSarifsReceipt,
    | Responses.CodeScanningForbiddenWrite
    | Responses.NotFound
    | Responses.ServiceUnavailable,
    CodeScanningUploadSarifVariables
  >(
    (variables: CodeScanningUploadSarifVariables) =>
      fetchCodeScanningUploadSarif({ ...fetcherOptions, ...variables }),
    options
  );
};

export type CodeScanningGetSarifPathParams = {
  owner: string;
  repo: string;
  /*
   * The SARIF ID obtained after uploading.
   */
  sarifId: string;
};

export type CodeScanningGetSarifVariables = {
  pathParams: CodeScanningGetSarifPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)." You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
 */
export const fetchCodeScanningGetSarif = (
  variables: CodeScanningGetSarifVariables
) =>
  githubFetch<
    Schemas.CodeScanningSarifsStatus,
    undefined,
    {},
    {},
    CodeScanningGetSarifPathParams
  >({
    url: "/repos/{owner}/{repo}/code-scanning/sarifs/{sarifId}",
    method: "get",
    ...variables,
  });

/**
 * Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)." You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
 */
export const useCodeScanningGetSarif = (
  variables: CodeScanningGetSarifVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeScanningSarifsStatus,
      Responses.CodeScanningForbiddenRead | Responses.ServiceUnavailable,
      Schemas.CodeScanningSarifsStatus
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CodeScanningSarifsStatus,
    Responses.CodeScanningForbiddenRead | Responses.ServiceUnavailable,
    Schemas.CodeScanningSarifsStatus
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}",
      operationId: "codeScanningGetSarif",
      variables,
    }),
    () => fetchCodeScanningGetSarif({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListCollaboratorsPathParams = {
  owner: string;
  repo: string;
};

export type ReposListCollaboratorsQueryParams = {
  /*
   * Filter collaborators returned by their affiliation. Can be one of:
   * \* `outside`: All outside collaborators of an organization-owned repository.
   * \* `direct`: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.
   * \* `all`: All collaborators the authenticated user can see.
   *
   * @default all
   */
  affiliation?: "outside" | "direct" | "all";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListCollaboratorsResponse = Schemas.Collaborator[];

export type ReposListCollaboratorsVariables = {
  pathParams: ReposListCollaboratorsPathParams;
  queryParams?: ReposListCollaboratorsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
 *
 * Team members will include the members of child teams.
 */
export const fetchReposListCollaborators = (
  variables: ReposListCollaboratorsVariables
) =>
  githubFetch<
    ReposListCollaboratorsResponse,
    undefined,
    {},
    ReposListCollaboratorsQueryParams,
    ReposListCollaboratorsPathParams
  >({
    url: "/repos/{owner}/{repo}/collaborators",
    method: "get",
    ...variables,
  });

/**
 * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
 *
 * Team members will include the members of child teams.
 */
export const useReposListCollaborators = (
  variables: ReposListCollaboratorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListCollaboratorsResponse,
      Responses.NotFound,
      ReposListCollaboratorsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListCollaboratorsResponse,
    Responses.NotFound,
    ReposListCollaboratorsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/collaborators",
      operationId: "reposListCollaborators",
      variables,
    }),
    () => fetchReposListCollaborators({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposRemoveCollaboratorPathParams = {
  owner: string;
  repo: string;
  username: string;
};

export type ReposRemoveCollaboratorVariables = {
  pathParams: ReposRemoveCollaboratorPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposRemoveCollaborator = (
  variables: ReposRemoveCollaboratorVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ReposRemoveCollaboratorPathParams>({
    url: "/repos/{owner}/{repo}/collaborators/{username}",
    method: "delete",
    ...variables,
  });

export const useReposRemoveCollaborator = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ReposRemoveCollaboratorVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ReposRemoveCollaboratorVariables
  >(
    (variables: ReposRemoveCollaboratorVariables) =>
      fetchReposRemoveCollaborator({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposCheckCollaboratorPathParams = {
  owner: string;
  repo: string;
  username: string;
};

export type ReposCheckCollaboratorVariables = {
  pathParams: ReposCheckCollaboratorPathParams;
} & GithubContext["fetcherOptions"];

/**
 * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
 *
 * Team members will include the members of child teams.
 */
export const fetchReposCheckCollaborator = (
  variables: ReposCheckCollaboratorVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ReposCheckCollaboratorPathParams>({
    url: "/repos/{owner}/{repo}/collaborators/{username}",
    method: "get",
    ...variables,
  });

/**
 * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
 *
 * Team members will include the members of child teams.
 */
export const useReposCheckCollaborator = (
  variables: ReposCheckCollaboratorVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, undefined, undefined>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, undefined, undefined>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/collaborators/{username}",
      operationId: "reposCheckCollaborator",
      variables,
    }),
    () => fetchReposCheckCollaborator({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposAddCollaboratorPathParams = {
  owner: string;
  repo: string;
  username: string;
};

export type ReposAddCollaboratorRequestBody = {
  /*
   * The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:
   * \* `pull` - can pull, but not push to or administer this repository.
   * \* `push` - can pull and push, but not administer this repository.
   * \* `admin` - can pull, push and administer this repository.
   * \* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.
   * \* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.
   *
   * @default push
   */
  permission?: "pull" | "push" | "admin" | "maintain" | "triage";
  /*
   * @example "push"
   */
  permissions?: string;
};

export type ReposAddCollaboratorVariables = {
  body?: ReposAddCollaboratorRequestBody;
  pathParams: ReposAddCollaboratorPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 *
 * For more information the permission levels, see "[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
 *
 * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 *
 * The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).
 *
 * **Rate limits**
 *
 * To prevent abuse, you are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
 */
export const fetchReposAddCollaborator = (
  variables: ReposAddCollaboratorVariables
) =>
  githubFetch<
    Schemas.RepositoryInvitation,
    ReposAddCollaboratorRequestBody,
    {},
    {},
    ReposAddCollaboratorPathParams
  >({
    url: "/repos/{owner}/{repo}/collaborators/{username}",
    method: "put",
    ...variables,
  });

/**
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 *
 * For more information the permission levels, see "[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
 *
 * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 *
 * The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).
 *
 * **Rate limits**
 *
 * To prevent abuse, you are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
 */
export const useReposAddCollaborator = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RepositoryInvitation,
      Responses.Forbidden | Responses.ValidationFailed,
      ReposAddCollaboratorVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.RepositoryInvitation,
    Responses.Forbidden | Responses.ValidationFailed,
    ReposAddCollaboratorVariables
  >(
    (variables: ReposAddCollaboratorVariables) =>
      fetchReposAddCollaborator({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetCollaboratorPermissionLevelPathParams = {
  owner: string;
  repo: string;
  username: string;
};

export type ReposGetCollaboratorPermissionLevelVariables = {
  pathParams: ReposGetCollaboratorPermissionLevelPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.
 */
export const fetchReposGetCollaboratorPermissionLevel = (
  variables: ReposGetCollaboratorPermissionLevelVariables
) =>
  githubFetch<
    Schemas.RepositoryCollaboratorPermission,
    undefined,
    {},
    {},
    ReposGetCollaboratorPermissionLevelPathParams
  >({
    url: "/repos/{owner}/{repo}/collaborators/{username}/permission",
    method: "get",
    ...variables,
  });

/**
 * Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.
 */
export const useReposGetCollaboratorPermissionLevel = (
  variables: ReposGetCollaboratorPermissionLevelVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RepositoryCollaboratorPermission,
      Responses.NotFound,
      Schemas.RepositoryCollaboratorPermission
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.RepositoryCollaboratorPermission,
    Responses.NotFound,
    Schemas.RepositoryCollaboratorPermission
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/collaborators/{username}/permission",
      operationId: "reposGetCollaboratorPermissionLevel",
      variables,
    }),
    () =>
      fetchReposGetCollaboratorPermissionLevel({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListCommitCommentsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type ReposListCommitCommentsForRepoQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListCommitCommentsForRepoResponse = Schemas.CommitComment[];

export type ReposListCommitCommentsForRepoVariables = {
  pathParams: ReposListCommitCommentsForRepoPathParams;
  queryParams?: ReposListCommitCommentsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).
 *
 * Comments are ordered by ascending ID.
 */
export const fetchReposListCommitCommentsForRepo = (
  variables: ReposListCommitCommentsForRepoVariables
) =>
  githubFetch<
    ReposListCommitCommentsForRepoResponse,
    undefined,
    {},
    ReposListCommitCommentsForRepoQueryParams,
    ReposListCommitCommentsForRepoPathParams
  >({ url: "/repos/{owner}/{repo}/comments", method: "get", ...variables });

/**
 * Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).
 *
 * Comments are ordered by ascending ID.
 */
export const useReposListCommitCommentsForRepo = (
  variables: ReposListCommitCommentsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListCommitCommentsForRepoResponse,
      undefined,
      ReposListCommitCommentsForRepoResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListCommitCommentsForRepoResponse,
    undefined,
    ReposListCommitCommentsForRepoResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/comments",
      operationId: "reposListCommitCommentsForRepo",
      variables,
    }),
    () =>
      fetchReposListCommitCommentsForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposDeleteCommitCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type ReposDeleteCommitCommentVariables = {
  pathParams: ReposDeleteCommitCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposDeleteCommitComment = (
  variables: ReposDeleteCommitCommentVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ReposDeleteCommitCommentPathParams>(
    {
      url: "/repos/{owner}/{repo}/comments/{commentId}",
      method: "delete",
      ...variables,
    }
  );

export const useReposDeleteCommitComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotFound,
      ReposDeleteCommitCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotFound,
    ReposDeleteCommitCommentVariables
  >(
    (variables: ReposDeleteCommitCommentVariables) =>
      fetchReposDeleteCommitComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetCommitCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type ReposGetCommitCommentVariables = {
  pathParams: ReposGetCommitCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposGetCommitComment = (
  variables: ReposGetCommitCommentVariables
) =>
  githubFetch<
    Schemas.CommitComment,
    undefined,
    {},
    {},
    ReposGetCommitCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/comments/{commentId}",
    method: "get",
    ...variables,
  });

export const useReposGetCommitComment = (
  variables: ReposGetCommitCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CommitComment,
      Responses.NotFound,
      Schemas.CommitComment
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CommitComment,
    Responses.NotFound,
    Schemas.CommitComment
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/comments/{comment_id}",
      operationId: "reposGetCommitComment",
      variables,
    }),
    () => fetchReposGetCommitComment({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposUpdateCommitCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type ReposUpdateCommitCommentRequestBody = {
  /*
   * The contents of the comment
   */
  body: string;
};

export type ReposUpdateCommitCommentVariables = {
  body: ReposUpdateCommitCommentRequestBody;
  pathParams: ReposUpdateCommitCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposUpdateCommitComment = (
  variables: ReposUpdateCommitCommentVariables
) =>
  githubFetch<
    Schemas.CommitComment,
    ReposUpdateCommitCommentRequestBody,
    {},
    {},
    ReposUpdateCommitCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/comments/{commentId}",
    method: "patch",
    ...variables,
  });

export const useReposUpdateCommitComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CommitComment,
      Responses.NotFound,
      ReposUpdateCommitCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CommitComment,
    Responses.NotFound,
    ReposUpdateCommitCommentVariables
  >(
    (variables: ReposUpdateCommitCommentVariables) =>
      fetchReposUpdateCommitComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReactionsListForCommitCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type ReactionsListForCommitCommentQueryParams = {
  /*
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForCommitCommentResponse = Schemas.Reaction[];

export type ReactionsListForCommitCommentVariables = {
  pathParams: ReactionsListForCommitCommentPathParams;
  queryParams?: ReactionsListForCommitCommentQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
 */
export const fetchReactionsListForCommitComment = (
  variables: ReactionsListForCommitCommentVariables
) =>
  githubFetch<
    ReactionsListForCommitCommentResponse,
    undefined,
    {},
    ReactionsListForCommitCommentQueryParams,
    ReactionsListForCommitCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/comments/{commentId}/reactions",
    method: "get",
    ...variables,
  });

/**
 * List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
 */
export const useReactionsListForCommitComment = (
  variables: ReactionsListForCommitCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForCommitCommentResponse,
      Responses.NotFound | Responses.PreviewHeaderMissing,
      ReactionsListForCommitCommentResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForCommitCommentResponse,
    Responses.NotFound | Responses.PreviewHeaderMissing,
    ReactionsListForCommitCommentResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/comments/{comment_id}/reactions",
      operationId: "reactionsListForCommitComment",
      variables,
    }),
    () =>
      fetchReactionsListForCommitComment({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReactionsCreateForCommitCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type ReactionsCreateForCommitCommentRequestBody = {
  /*
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the commit comment.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
};

export type ReactionsCreateForCommitCommentVariables = {
  body: ReactionsCreateForCommitCommentRequestBody;
  pathParams: ReactionsCreateForCommitCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this commit comment.
 */
export const fetchReactionsCreateForCommitComment = (
  variables: ReactionsCreateForCommitCommentVariables
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForCommitCommentRequestBody,
    {},
    {},
    ReactionsCreateForCommitCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/comments/{commentId}/reactions",
    method: "post",
    ...variables,
  });

/**
 * Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this commit comment.
 */
export const useReactionsCreateForCommitComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      Responses.PreviewHeaderMissing | Responses.ValidationFailed,
      ReactionsCreateForCommitCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    Responses.PreviewHeaderMissing | Responses.ValidationFailed,
    ReactionsCreateForCommitCommentVariables
  >(
    (variables: ReactionsCreateForCommitCommentVariables) =>
      fetchReactionsCreateForCommitComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReactionsDeleteForCommitCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
  reactionId: number;
};

export type ReactionsDeleteForCommitCommentVariables = {
  pathParams: ReactionsDeleteForCommitCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
 *
 * Delete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
 */
export const fetchReactionsDeleteForCommitComment = (
  variables: ReactionsDeleteForCommitCommentVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ReactionsDeleteForCommitCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/comments/{commentId}/reactions/{reactionId}",
    method: "delete",
    ...variables,
  });

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
 *
 * Delete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
 */
export const useReactionsDeleteForCommitComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ReactionsDeleteForCommitCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ReactionsDeleteForCommitCommentVariables
  >(
    (variables: ReactionsDeleteForCommitCommentVariables) =>
      fetchReactionsDeleteForCommitComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposListCommitsPathParams = {
  owner: string;
  repo: string;
};

export type ReposListCommitsQueryParams = {
  /*
   * SHA or branch to start listing commits from. Default: the repository’s default branch (usually `master`).
   */
  sha?: string;
  /*
   * Only commits containing this file path will be returned.
   */
  path?: string;
  /*
   * GitHub login or email address by which to filter by commit author.
   */
  author?: string;
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  until?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * legacy parameter for pagination.
   */
  top?: string;
  /*
   * legacy parameter for pagination.
   */
  last_sha?: string;
};

export type ReposListCommitsResponse = Schemas.Commit[];

export type ReposListCommitsVariables = {
  pathParams: ReposListCommitsPathParams;
  queryParams?: ReposListCommitsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const fetchReposListCommits = (variables: ReposListCommitsVariables) =>
  githubFetch<
    ReposListCommitsResponse,
    undefined,
    {},
    ReposListCommitsQueryParams,
    ReposListCommitsPathParams
  >({ url: "/repos/{owner}/{repo}/commits", method: "get", ...variables });

/**
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useReposListCommits = (
  variables: ReposListCommitsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListCommitsResponse,
      | Responses.BadRequest
      | Responses.NotFound
      | Responses.Conflict
      | Responses.InternalError,
      ReposListCommitsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListCommitsResponse,
    | Responses.BadRequest
    | Responses.NotFound
    | Responses.Conflict
    | Responses.InternalError,
    ReposListCommitsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/commits",
      operationId: "reposListCommits",
      variables,
    }),
    () => fetchReposListCommits({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListBranchesForHeadCommitPathParams = {
  owner: string;
  repo: string;
  /*
   * commit_sha parameter
   */
  commitSha: string;
};

export type ReposListBranchesForHeadCommitResponse = Schemas.BranchShort[];

export type ReposListBranchesForHeadCommitVariables = {
  pathParams: ReposListBranchesForHeadCommitPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
 */
export const fetchReposListBranchesForHeadCommit = (
  variables: ReposListBranchesForHeadCommitVariables
) =>
  githubFetch<
    ReposListBranchesForHeadCommitResponse,
    undefined,
    {},
    {},
    ReposListBranchesForHeadCommitPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{commitSha}/branches-where-head",
    method: "get",
    ...variables,
  });

/**
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
 */
export const useReposListBranchesForHeadCommit = (
  variables: ReposListBranchesForHeadCommitVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListBranchesForHeadCommitResponse,
      Responses.PreviewHeaderMissing | Responses.ValidationFailed,
      ReposListBranchesForHeadCommitResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListBranchesForHeadCommitResponse,
    Responses.PreviewHeaderMissing | Responses.ValidationFailed,
    ReposListBranchesForHeadCommitResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head",
      operationId: "reposListBranchesForHeadCommit",
      variables,
    }),
    () =>
      fetchReposListBranchesForHeadCommit({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListCommentsForCommitPathParams = {
  owner: string;
  repo: string;
  /*
   * commit_sha parameter
   */
  commitSha: string;
};

export type ReposListCommentsForCommitQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListCommentsForCommitResponse = Schemas.CommitComment[];

export type ReposListCommentsForCommitVariables = {
  pathParams: ReposListCommentsForCommitPathParams;
  queryParams?: ReposListCommentsForCommitQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Use the `:commit_sha` to specify the commit that will have its comments listed.
 */
export const fetchReposListCommentsForCommit = (
  variables: ReposListCommentsForCommitVariables
) =>
  githubFetch<
    ReposListCommentsForCommitResponse,
    undefined,
    {},
    ReposListCommentsForCommitQueryParams,
    ReposListCommentsForCommitPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{commitSha}/comments",
    method: "get",
    ...variables,
  });

/**
 * Use the `:commit_sha` to specify the commit that will have its comments listed.
 */
export const useReposListCommentsForCommit = (
  variables: ReposListCommentsForCommitVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListCommentsForCommitResponse,
      undefined,
      ReposListCommentsForCommitResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListCommentsForCommitResponse,
    undefined,
    ReposListCommentsForCommitResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/commits/{commit_sha}/comments",
      operationId: "reposListCommentsForCommit",
      variables,
    }),
    () => fetchReposListCommentsForCommit({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateCommitCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * commit_sha parameter
   */
  commitSha: string;
};

export type ReposCreateCommitCommentRequestBody = {
  /*
   * The contents of the comment.
   */
  body: string;
  /*
   * **Deprecated**. Use **position** parameter instead. Line number in the file to comment on.
   */
  line?: number;
  /*
   * Relative path of the file to comment on.
   */
  path?: string;
  /*
   * Line index in the diff to comment on.
   */
  position?: number;
};

export type ReposCreateCommitCommentVariables = {
  body: ReposCreateCommitCommentRequestBody;
  pathParams: ReposCreateCommitCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a comment for a commit using its `:commit_sha`.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const fetchReposCreateCommitComment = (
  variables: ReposCreateCommitCommentVariables
) =>
  githubFetch<
    Schemas.CommitComment,
    ReposCreateCommitCommentRequestBody,
    {},
    {},
    ReposCreateCommitCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{commitSha}/comments",
    method: "post",
    ...variables,
  });

/**
 * Create a comment for a commit using its `:commit_sha`.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const useReposCreateCommitComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CommitComment,
      Responses.Forbidden | Responses.ValidationFailed,
      ReposCreateCommitCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.CommitComment,
    Responses.Forbidden | Responses.ValidationFailed,
    ReposCreateCommitCommentVariables
  >(
    (variables: ReposCreateCommitCommentVariables) =>
      fetchReposCreateCommitComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposListPullRequestsAssociatedWithCommitPathParams = {
  owner: string;
  repo: string;
  /*
   * commit_sha parameter
   */
  commitSha: string;
};

export type ReposListPullRequestsAssociatedWithCommitQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListPullRequestsAssociatedWithCommitResponse =
  Schemas.PullRequestSimple[];

export type ReposListPullRequestsAssociatedWithCommitVariables = {
  pathParams: ReposListPullRequestsAssociatedWithCommitPathParams;
  queryParams?: ReposListPullRequestsAssociatedWithCommitQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all pull requests containing the provided commit SHA, which can be from any point in the commit history. The results will include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests) endpoint.
 */
export const fetchReposListPullRequestsAssociatedWithCommit = (
  variables: ReposListPullRequestsAssociatedWithCommitVariables
) =>
  githubFetch<
    ReposListPullRequestsAssociatedWithCommitResponse,
    undefined,
    {},
    ReposListPullRequestsAssociatedWithCommitQueryParams,
    ReposListPullRequestsAssociatedWithCommitPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{commitSha}/pulls",
    method: "get",
    ...variables,
  });

/**
 * Lists all pull requests containing the provided commit SHA, which can be from any point in the commit history. The results will include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests) endpoint.
 */
export const useReposListPullRequestsAssociatedWithCommit = (
  variables: ReposListPullRequestsAssociatedWithCommitVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListPullRequestsAssociatedWithCommitResponse,
      Responses.PreviewHeaderMissing,
      ReposListPullRequestsAssociatedWithCommitResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListPullRequestsAssociatedWithCommitResponse,
    Responses.PreviewHeaderMissing,
    ReposListPullRequestsAssociatedWithCommitResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/commits/{commit_sha}/pulls",
      operationId: "reposListPullRequestsAssociatedWithCommit",
      variables,
    }),
    () =>
      fetchReposListPullRequestsAssociatedWithCommit({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetCommitPathParams = {
  owner: string;
  repo: string;
  /*
   * ref parameter
   */
  ref: string;
};

export type ReposGetCommitQueryParams = {
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type ReposGetCommitVariables = {
  pathParams: ReposGetCommitPathParams;
  queryParams?: ReposGetCommitQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
 *
 * **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
 *
 * You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.
 *
 * To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const fetchReposGetCommit = (variables: ReposGetCommitVariables) =>
  githubFetch<
    Schemas.Commit,
    undefined,
    {},
    ReposGetCommitQueryParams,
    ReposGetCommitPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{ref}",
    method: "get",
    ...variables,
  });

/**
 * Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
 *
 * **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
 *
 * You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.
 *
 * To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useReposGetCommit = (
  variables: ReposGetCommitVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Commit,
      Responses.NotFound | Responses.ValidationFailed | Responses.InternalError,
      Schemas.Commit
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Commit,
    Responses.NotFound | Responses.ValidationFailed | Responses.InternalError,
    Schemas.Commit
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/commits/{ref}",
      operationId: "reposGetCommit",
      variables,
    }),
    () => fetchReposGetCommit({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ChecksListForRefPathParams = {
  owner: string;
  repo: string;
  /*
   * ref parameter
   */
  ref: string;
};

export type ChecksListForRefQueryParams = {
  /*
   * Returns check runs with the specified `name`.
   */
  check_name?: string;
  /*
   * Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.
   */
  status?: "queued" | "in_progress" | "completed";
  /*
   * Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.
   *
   * @default latest
   */
  filter?: "latest" | "all";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  app_id?: number;
};

export type ChecksListForRefResponse = {
  check_runs: Schemas.CheckRun[];
  total_count: number;
};

export type ChecksListForRefVariables = {
  pathParams: ChecksListForRefPathParams;
  queryParams?: ChecksListForRefQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const fetchChecksListForRef = (variables: ChecksListForRefVariables) =>
  githubFetch<
    ChecksListForRefResponse,
    undefined,
    {},
    ChecksListForRefQueryParams,
    ChecksListForRefPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{ref}/check-runs",
    method: "get",
    ...variables,
  });

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const useChecksListForRef = (
  variables: ChecksListForRefVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ChecksListForRefResponse,
      undefined,
      ChecksListForRefResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ChecksListForRefResponse,
    undefined,
    ChecksListForRefResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/commits/{ref}/check-runs",
      operationId: "checksListForRef",
      variables,
    }),
    () => fetchChecksListForRef({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ChecksListSuitesForRefPathParams = {
  owner: string;
  repo: string;
  /*
   * ref parameter
   */
  ref: string;
};

export type ChecksListSuitesForRefQueryParams = {
  /*
   * Filters check suites by GitHub App `id`.
   */
  app_id?: number;
  /*
   * Returns check runs with the specified `name`.
   */
  check_name?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ChecksListSuitesForRefResponse = {
  check_suites: Schemas.CheckSuite[];
  total_count: number;
};

export type ChecksListSuitesForRefVariables = {
  pathParams: ChecksListSuitesForRefPathParams;
  queryParams?: ChecksListSuitesForRefQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
 *
 * Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
 */
export const fetchChecksListSuitesForRef = (
  variables: ChecksListSuitesForRefVariables
) =>
  githubFetch<
    ChecksListSuitesForRefResponse,
    undefined,
    {},
    ChecksListSuitesForRefQueryParams,
    ChecksListSuitesForRefPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{ref}/check-suites",
    method: "get",
    ...variables,
  });

/**
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
 *
 * Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
 */
export const useChecksListSuitesForRef = (
  variables: ChecksListSuitesForRefVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ChecksListSuitesForRefResponse,
      undefined,
      ChecksListSuitesForRefResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ChecksListSuitesForRefResponse,
    undefined,
    ChecksListSuitesForRefResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/commits/{ref}/check-suites",
      operationId: "checksListSuitesForRef",
      variables,
    }),
    () => fetchChecksListSuitesForRef({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetCombinedStatusForRefPathParams = {
  owner: string;
  repo: string;
  /*
   * ref parameter
   */
  ref: string;
};

export type ReposGetCombinedStatusForRefQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposGetCombinedStatusForRefVariables = {
  pathParams: ReposGetCombinedStatusForRefPathParams;
  queryParams?: ReposGetCombinedStatusForRefQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
 *
 * The most recent status for each context is returned, up to 100. This field [paginates](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination) if there are over 100 contexts.
 *
 * Additionally, a combined `state` is returned. The `state` is one of:
 *
 * *   **failure** if any of the contexts report as `error` or `failure`
 * *   **pending** if there are no statuses or a context is `pending`
 * *   **success** if the latest status for all contexts is `success`
 */
export const fetchReposGetCombinedStatusForRef = (
  variables: ReposGetCombinedStatusForRefVariables
) =>
  githubFetch<
    Schemas.CombinedCommitStatus,
    undefined,
    {},
    ReposGetCombinedStatusForRefQueryParams,
    ReposGetCombinedStatusForRefPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{ref}/status",
    method: "get",
    ...variables,
  });

/**
 * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
 *
 * The most recent status for each context is returned, up to 100. This field [paginates](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination) if there are over 100 contexts.
 *
 * Additionally, a combined `state` is returned. The `state` is one of:
 *
 * *   **failure** if any of the contexts report as `error` or `failure`
 * *   **pending** if there are no statuses or a context is `pending`
 * *   **success** if the latest status for all contexts is `success`
 */
export const useReposGetCombinedStatusForRef = (
  variables: ReposGetCombinedStatusForRefVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CombinedCommitStatus,
      Responses.NotFound,
      Schemas.CombinedCommitStatus
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CombinedCommitStatus,
    Responses.NotFound,
    Schemas.CombinedCommitStatus
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/commits/{ref}/status",
      operationId: "reposGetCombinedStatusForRef",
      variables,
    }),
    () =>
      fetchReposGetCombinedStatusForRef({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListCommitStatusesForRefPathParams = {
  owner: string;
  repo: string;
  /*
   * ref parameter
   */
  ref: string;
};

export type ReposListCommitStatusesForRefQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListCommitStatusesForRefResponse = Schemas.Status[];

export type ReposListCommitStatusesForRefVariables = {
  pathParams: ReposListCommitStatusesForRefPathParams;
  queryParams?: ReposListCommitStatusesForRefQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
 *
 * This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
 */
export const fetchReposListCommitStatusesForRef = (
  variables: ReposListCommitStatusesForRefVariables
) =>
  githubFetch<
    ReposListCommitStatusesForRefResponse,
    undefined,
    {},
    ReposListCommitStatusesForRefQueryParams,
    ReposListCommitStatusesForRefPathParams
  >({
    url: "/repos/{owner}/{repo}/commits/{ref}/statuses",
    method: "get",
    ...variables,
  });

/**
 * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
 *
 * This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
 */
export const useReposListCommitStatusesForRef = (
  variables: ReposListCommitStatusesForRefVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListCommitStatusesForRefResponse,
      Responses.MovedPermanently,
      ReposListCommitStatusesForRefResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListCommitStatusesForRefResponse,
    Responses.MovedPermanently,
    ReposListCommitStatusesForRefResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/commits/{ref}/statuses",
      operationId: "reposListCommitStatusesForRef",
      variables,
    }),
    () =>
      fetchReposListCommitStatusesForRef({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CodesOfConductGetForRepoPathParams = {
  owner: string;
  repo: string;
};

export type CodesOfConductGetForRepoVariables = {
  pathParams: CodesOfConductGetForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns the contents of the repository's code of conduct file, if one is detected.
 *
 * A code of conduct is detected if there is a file named `CODE_OF_CONDUCT` in the root directory of the repository. GitHub detects which code of conduct it is using fuzzy matching.
 */
export const fetchCodesOfConductGetForRepo = (
  variables: CodesOfConductGetForRepoVariables
) =>
  githubFetch<
    Schemas.CodeOfConduct,
    undefined,
    {},
    {},
    CodesOfConductGetForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/community/code_of_conduct",
    method: "get",
    ...variables,
  });

/**
 * Returns the contents of the repository's code of conduct file, if one is detected.
 *
 * A code of conduct is detected if there is a file named `CODE_OF_CONDUCT` in the root directory of the repository. GitHub detects which code of conduct it is using fuzzy matching.
 */
export const useCodesOfConductGetForRepo = (
  variables: CodesOfConductGetForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CodeOfConduct,
      undefined,
      Schemas.CodeOfConduct
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CodeOfConduct,
    undefined,
    Schemas.CodeOfConduct
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/community/code_of_conduct",
      operationId: "codesOfConductGetForRepo",
      variables,
    }),
    () => fetchCodesOfConductGetForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetCommunityProfileMetricsPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetCommunityProfileMetricsVariables = {
  pathParams: ReposGetCommunityProfileMetricsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint will return all community profile metrics, including an
 * overall health score, repository description, the presence of documentation, detected
 * code of conduct, detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
 * README, and CONTRIBUTING files.
 *
 * The `health_percentage` score is defined as a percentage of how many of
 * these four documents are present: README, CONTRIBUTING, LICENSE, and
 * CODE_OF_CONDUCT. For example, if all four documents are present, then
 * the `health_percentage` is `100`. If only one is present, then the
 * `health_percentage` is `25`.
 *
 * `content_reports_enabled` is only returned for organization-owned repositories.
 */
export const fetchReposGetCommunityProfileMetrics = (
  variables: ReposGetCommunityProfileMetricsVariables
) =>
  githubFetch<
    Schemas.CommunityProfile,
    undefined,
    {},
    {},
    ReposGetCommunityProfileMetricsPathParams
  >({
    url: "/repos/{owner}/{repo}/community/profile",
    method: "get",
    ...variables,
  });

/**
 * This endpoint will return all community profile metrics, including an
 * overall health score, repository description, the presence of documentation, detected
 * code of conduct, detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
 * README, and CONTRIBUTING files.
 *
 * The `health_percentage` score is defined as a percentage of how many of
 * these four documents are present: README, CONTRIBUTING, LICENSE, and
 * CODE_OF_CONDUCT. For example, if all four documents are present, then
 * the `health_percentage` is `100`. If only one is present, then the
 * `health_percentage` is `25`.
 *
 * `content_reports_enabled` is only returned for organization-owned repositories.
 */
export const useReposGetCommunityProfileMetrics = (
  variables: ReposGetCommunityProfileMetricsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CommunityProfile,
      undefined,
      Schemas.CommunityProfile
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CommunityProfile,
    undefined,
    Schemas.CommunityProfile
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/community/profile",
      operationId: "reposGetCommunityProfileMetrics",
      variables,
    }),
    () =>
      fetchReposGetCommunityProfileMetrics({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCompareCommitsPathParams = {
  owner: string;
  repo: string;
  base: string;
  head: string;
};

export type ReposCompareCommitsVariables = {
  pathParams: ReposCompareCommitsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Both `:base` and `:head` must be branch names in `:repo`. To compare branches across other repositories in the same network as `:repo`, use the format `<USERNAME>:branch`.
 *
 * The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
 *
 * The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
 *
 * **Working with large comparisons**
 *
 * The response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) to enumerate all commits in the range.
 *
 * For comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long
 * to generate. You can typically resolve this error by using a smaller commit range.
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const fetchReposCompareCommits = (
  variables: ReposCompareCommitsVariables
) =>
  githubFetch<
    Schemas.CommitComparison,
    undefined,
    {},
    {},
    ReposCompareCommitsPathParams
  >({
    url: "/repos/{owner}/{repo}/compare/{base}...{head}",
    method: "get",
    ...variables,
  });

/**
 * Both `:base` and `:head` must be branch names in `:repo`. To compare branches across other repositories in the same network as `:repo`, use the format `<USERNAME>:branch`.
 *
 * The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
 *
 * The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
 *
 * **Working with large comparisons**
 *
 * The response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) to enumerate all commits in the range.
 *
 * For comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long
 * to generate. You can typically resolve this error by using a smaller commit range.
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useReposCompareCommits = (
  variables: ReposCompareCommitsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CommitComparison,
      Responses.NotFound | Responses.InternalError,
      Schemas.CommitComparison
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CommitComparison,
    Responses.NotFound | Responses.InternalError,
    Schemas.CommitComparison
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/compare/{base}...{head}",
      operationId: "reposCompareCommits",
      variables,
    }),
    () => fetchReposCompareCommits({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposDeleteFilePathParams = {
  owner: string;
  repo: string;
  /*
   * path parameter
   */
  path: string;
};

export type ReposDeleteFileRequestBody = {
  /*
   * object containing information about the author.
   */
  author?: {
    /*
     * The email of the author (or committer) of the commit
     */
    email?: string;
    /*
     * The name of the author (or committer) of the commit
     */
    name?: string;
  };
  /*
   * The branch name. Default: the repository’s default branch (usually `master`)
   */
  branch?: string;
  /*
   * object containing information about the committer.
   */
  committer?: {
    /*
     * The email of the author (or committer) of the commit
     */
    email?: string;
    /*
     * The name of the author (or committer) of the commit
     */
    name?: string;
  };
  /*
   * The commit message.
   */
  message: string;
  /*
   * The blob SHA of the file being replaced.
   */
  sha: string;
};

export type ReposDeleteFileVariables = {
  body: ReposDeleteFileRequestBody;
  pathParams: ReposDeleteFilePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a file in a repository.
 *
 * You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
 *
 * The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
 *
 * You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
 */
export const fetchReposDeleteFile = (variables: ReposDeleteFileVariables) =>
  githubFetch<
    Schemas.FileCommit,
    ReposDeleteFileRequestBody,
    {},
    {},
    ReposDeleteFilePathParams
  >({
    url: "/repos/{owner}/{repo}/contents/{path}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a file in a repository.
 *
 * You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
 *
 * The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
 *
 * You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
 */
export const useReposDeleteFile = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FileCommit,
      | Responses.NotFound
      | Responses.Conflict
      | Responses.ValidationFailed
      | Responses.ServiceUnavailable,
      ReposDeleteFileVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.FileCommit,
    | Responses.NotFound
    | Responses.Conflict
    | Responses.ValidationFailed
    | Responses.ServiceUnavailable,
    ReposDeleteFileVariables
  >(
    (variables: ReposDeleteFileVariables) =>
      fetchReposDeleteFile({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetContentPathParams = {
  owner: string;
  repo: string;
  /*
   * path parameter
   */
  path: string;
};

export type ReposGetContentQueryParams = {
  /*
   * The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
   */
  ref?: string;
};

export type ReposGetContentVariables = {
  pathParams: ReposGetContentPathParams;
  queryParams?: ReposGetContentQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
 * `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.
 *
 * Files and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for
 * retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
 * type](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
 * object format.
 *
 * **Note**:
 * *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees).
 * *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
 * API](https://docs.github.com/rest/reference/git#get-a-tree).
 * *   This API supports files up to 1 megabyte in size.
 *
 * #### If the content is a directory
 * The response will be an array of objects, one object for each item in the directory.
 * When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
 * _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
 * In the next major version of the API, the type will be returned as "submodule".
 *
 * #### If the content is a symlink
 * If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
 * API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object
 * describing the symlink itself.
 *
 * #### If the content is a submodule
 * The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
 * commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
 * the submodule at that specific commit.
 *
 * If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
 * github.com URLs (`html_url` and `_links["html"]`) will have null values.
 */
export const fetchReposGetContent = (variables: ReposGetContentVariables) =>
  githubFetch<
    | Schemas.ContentDirectory
    | Schemas.ContentFile
    | Schemas.ContentSymlink
    | Schemas.ContentSubmodule,
    undefined,
    {},
    ReposGetContentQueryParams,
    ReposGetContentPathParams
  >({
    url: "/repos/{owner}/{repo}/contents/{path}",
    method: "get",
    ...variables,
  });

/**
 * Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
 * `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.
 *
 * Files and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for
 * retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
 * type](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
 * object format.
 *
 * **Note**:
 * *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees).
 * *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
 * API](https://docs.github.com/rest/reference/git#get-a-tree).
 * *   This API supports files up to 1 megabyte in size.
 *
 * #### If the content is a directory
 * The response will be an array of objects, one object for each item in the directory.
 * When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
 * _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
 * In the next major version of the API, the type will be returned as "submodule".
 *
 * #### If the content is a symlink
 * If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
 * API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object
 * describing the symlink itself.
 *
 * #### If the content is a submodule
 * The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
 * commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
 * the submodule at that specific commit.
 *
 * If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
 * github.com URLs (`html_url` and `_links["html"]`) will have null values.
 */
export const useReposGetContent = (
  variables: ReposGetContentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      | Schemas.ContentDirectory
      | Schemas.ContentFile
      | Schemas.ContentSymlink
      | Schemas.ContentSubmodule,
      Responses.Found | Responses.Forbidden | Responses.NotFound,
      | Schemas.ContentDirectory
      | Schemas.ContentFile
      | Schemas.ContentSymlink
      | Schemas.ContentSubmodule
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    | Schemas.ContentDirectory
    | Schemas.ContentFile
    | Schemas.ContentSymlink
    | Schemas.ContentSubmodule,
    Responses.Found | Responses.Forbidden | Responses.NotFound,
    | Schemas.ContentDirectory
    | Schemas.ContentFile
    | Schemas.ContentSymlink
    | Schemas.ContentSubmodule
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/contents/{path}",
      operationId: "reposGetContent",
      variables,
    }),
    () => fetchReposGetContent({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateOrUpdateFileContentsPathParams = {
  owner: string;
  repo: string;
  /*
   * path parameter
   */
  path: string;
};

export type ReposCreateOrUpdateFileContentsRequestBody = {
  /*
   * The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
   */
  author?: {
    /*
     * @example "2013-01-15T17:13:22+05:00"
     */
    date?: string;
    /*
     * The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
     */
    email: string;
    /*
     * The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
     */
    name: string;
  };
  /*
   * The branch name. Default: the repository’s default branch (usually `master`)
   */
  branch?: string;
  /*
   * The person that committed the file. Default: the authenticated user.
   */
  committer?: {
    /*
     * @example "2013-01-05T13:13:22+05:00"
     */
    date?: string;
    /*
     * The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
     */
    email: string;
    /*
     * The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
     */
    name: string;
  };
  /*
   * The new file content, using Base64 encoding.
   */
  content: string;
  /*
   * The commit message.
   */
  message: string;
  /*
   * **Required if you are updating a file**. The blob SHA of the file being replaced.
   */
  sha?: string;
};

export type ReposCreateOrUpdateFileContentsVariables = {
  body: ReposCreateOrUpdateFileContentsRequestBody;
  pathParams: ReposCreateOrUpdateFileContentsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a new file or replaces an existing file in a repository.
 */
export const fetchReposCreateOrUpdateFileContents = (
  variables: ReposCreateOrUpdateFileContentsVariables
) =>
  githubFetch<
    Schemas.FileCommit,
    ReposCreateOrUpdateFileContentsRequestBody,
    {},
    {},
    ReposCreateOrUpdateFileContentsPathParams
  >({
    url: "/repos/{owner}/{repo}/contents/{path}",
    method: "put",
    ...variables,
  });

/**
 * Creates a new file or replaces an existing file in a repository.
 */
export const useReposCreateOrUpdateFileContents = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FileCommit,
      Responses.NotFound | Responses.Conflict | Responses.ValidationFailed,
      ReposCreateOrUpdateFileContentsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.FileCommit,
    Responses.NotFound | Responses.Conflict | Responses.ValidationFailed,
    ReposCreateOrUpdateFileContentsVariables
  >(
    (variables: ReposCreateOrUpdateFileContentsVariables) =>
      fetchReposCreateOrUpdateFileContents({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposListContributorsPathParams = {
  owner: string;
  repo: string;
};

export type ReposListContributorsQueryParams = {
  /*
   * Set to `1` or `true` to include anonymous contributors in results.
   */
  anon?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListContributorsResponse = Schemas.Contributor[];

export type ReposListContributorsVariables = {
  pathParams: ReposListContributorsPathParams;
  queryParams?: ReposListContributorsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.
 *
 * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
 */
export const fetchReposListContributors = (
  variables: ReposListContributorsVariables
) =>
  githubFetch<
    ReposListContributorsResponse,
    undefined,
    {},
    ReposListContributorsQueryParams,
    ReposListContributorsPathParams
  >({ url: "/repos/{owner}/{repo}/contributors", method: "get", ...variables });

/**
 * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.
 *
 * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
 */
export const useReposListContributors = (
  variables: ReposListContributorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListContributorsResponse,
      Responses.Forbidden | Responses.NotFound,
      ReposListContributorsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListContributorsResponse,
    Responses.Forbidden | Responses.NotFound,
    ReposListContributorsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/contributors",
      operationId: "reposListContributors",
      variables,
    }),
    () => fetchReposListContributors({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListDeploymentsPathParams = {
  owner: string;
  repo: string;
};

export type ReposListDeploymentsQueryParams = {
  /*
   * The SHA recorded at creation time.
   *
   * @default none
   */
  sha?: string;
  /*
   * The name of the ref. This can be a branch, tag, or SHA.
   *
   * @default none
   */
  ref?: string;
  /*
   * The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).
   *
   * @default none
   */
  task?: string;
  /*
   * The name of the environment that was deployed to (e.g., `staging` or `production`).
   *
   * @default none
   */
  environment?: string | null;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListDeploymentsResponse = Schemas.Deployment[];

export type ReposListDeploymentsVariables = {
  pathParams: ReposListDeploymentsPathParams;
  queryParams?: ReposListDeploymentsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Simple filtering of deployments is available via query parameters:
 */
export const fetchReposListDeployments = (
  variables: ReposListDeploymentsVariables
) =>
  githubFetch<
    ReposListDeploymentsResponse,
    undefined,
    {},
    ReposListDeploymentsQueryParams,
    ReposListDeploymentsPathParams
  >({ url: "/repos/{owner}/{repo}/deployments", method: "get", ...variables });

/**
 * Simple filtering of deployments is available via query parameters:
 */
export const useReposListDeployments = (
  variables: ReposListDeploymentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListDeploymentsResponse,
      undefined,
      ReposListDeploymentsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListDeploymentsResponse,
    undefined,
    ReposListDeploymentsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/deployments",
      operationId: "reposListDeployments",
      variables,
    }),
    () => fetchReposListDeployments({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateDeploymentPathParams = {
  owner: string;
  repo: string;
};

export type ReposCreateDeploymentRequestBody = {
  /*
   * Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
   *
   * @default true
   */
  auto_merge?: boolean;
  /*
   * @example "1776-07-04T00:00:00.000-07:52"
   */
  created_at?: string;
  /*
   * Short description of the deployment.
   *
   * @default
   */
  description?: string | null;
  /*
   * Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
   *
   * @default production
   */
  environment?: string;
  payload?:
    | {
        [key: string]: any;
      }
    | string;
  /*
   * Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.
   * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
   */
  production_environment?: boolean;
  /*
   * The ref to deploy. This can be a branch, tag, or SHA.
   */
  ref: string;
  /*
   * The [status](https://docs.github.com/rest/reference/repos#statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.
   */
  required_contexts?: string[];
  /*
   * Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
   *
   * @default deploy
   */
  task?: string;
  /*
   * Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
   * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
   *
   * @default false
   */
  transient_environment?: boolean;
};

export type ReposCreateDeploymentVariables = {
  body: ReposCreateDeploymentRequestBody;
  pathParams: ReposCreateDeploymentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deployments offer a few configurable parameters with certain defaults.
 *
 * The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them
 * before we merge a pull request.
 *
 * The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
 * multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
 * makes it easier to track which environments have requested deployments. The default environment is `production`.
 *
 * The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
 * the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
 * the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
 * return a failure response.
 *
 * By default, [commit statuses](https://docs.github.com/rest/reference/repos#statuses) for every submitted context must be in a `success`
 * state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
 * specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
 * not require any contexts or create any commit statuses, the deployment will always succeed.
 *
 * The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
 * field that will be passed on when a deployment event is dispatched.
 *
 * The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
 * be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
 * application with debugging enabled.
 *
 * Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.
 *
 * #### Merged branch response
 * You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
 * a deployment. This auto-merge happens when:
 * *   Auto-merge option is enabled in the repository
 * *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
 * *   There are no merge conflicts
 *
 * If there are no new commits in the base branch, a new request to create a deployment should give a successful
 * response.
 *
 * #### Merge conflict response
 * This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
 * be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
 *
 * #### Failed commit status checks
 * This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
 * status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
 */
export const fetchReposCreateDeployment = (
  variables: ReposCreateDeploymentVariables
) =>
  githubFetch<
    | Schemas.Deployment
    | {
        message?: string;
      },
    ReposCreateDeploymentRequestBody,
    {},
    {},
    ReposCreateDeploymentPathParams
  >({ url: "/repos/{owner}/{repo}/deployments", method: "post", ...variables });

/**
 * Deployments offer a few configurable parameters with certain defaults.
 *
 * The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them
 * before we merge a pull request.
 *
 * The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
 * multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
 * makes it easier to track which environments have requested deployments. The default environment is `production`.
 *
 * The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
 * the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
 * the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
 * return a failure response.
 *
 * By default, [commit statuses](https://docs.github.com/rest/reference/repos#statuses) for every submitted context must be in a `success`
 * state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
 * specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
 * not require any contexts or create any commit statuses, the deployment will always succeed.
 *
 * The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
 * field that will be passed on when a deployment event is dispatched.
 *
 * The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
 * be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
 * application with debugging enabled.
 *
 * Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.
 *
 * #### Merged branch response
 * You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
 * a deployment. This auto-merge happens when:
 * *   Auto-merge option is enabled in the repository
 * *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
 * *   There are no merge conflicts
 *
 * If there are no new commits in the base branch, a new request to create a deployment should give a successful
 * response.
 *
 * #### Merge conflict response
 * This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
 * be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
 *
 * #### Failed commit status checks
 * This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
 * status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
 */
export const useReposCreateDeployment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      | Schemas.Deployment
      | {
          message?: string;
        },
      | {
          /*
           * @example "https://docs.github.com/rest/reference/repos#create-a-deployment"
           */
          documentation_url?: string;
          message?: string;
        }
      | Responses.ValidationFailed,
      ReposCreateDeploymentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    | Schemas.Deployment
    | {
        message?: string;
      },
    | {
        /*
         * @example "https://docs.github.com/rest/reference/repos#create-a-deployment"
         */
        documentation_url?: string;
        message?: string;
      }
    | Responses.ValidationFailed,
    ReposCreateDeploymentVariables
  >(
    (variables: ReposCreateDeploymentVariables) =>
      fetchReposCreateDeployment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposDeleteDeploymentPathParams = {
  owner: string;
  repo: string;
  /*
   * deployment_id parameter
   */
  deploymentId: number;
};

export type ReposDeleteDeploymentVariables = {
  pathParams: ReposDeleteDeploymentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * To ensure there can always be an active deployment, you can only delete an _inactive_ deployment. Anyone with `repo` or `repo_deployment` scopes can delete an inactive deployment.
 *
 * To set a deployment as inactive, you must:
 *
 * *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
 * *   Mark the active deployment as inactive by adding any non-successful deployment status.
 *
 * For more information, see "[Create a deployment](https://docs.github.com/rest/reference/repos/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/reference/repos#create-a-deployment-status)."
 */
export const fetchReposDeleteDeployment = (
  variables: ReposDeleteDeploymentVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ReposDeleteDeploymentPathParams>({
    url: "/repos/{owner}/{repo}/deployments/{deploymentId}",
    method: "delete",
    ...variables,
  });

/**
 * To ensure there can always be an active deployment, you can only delete an _inactive_ deployment. Anyone with `repo` or `repo_deployment` scopes can delete an inactive deployment.
 *
 * To set a deployment as inactive, you must:
 *
 * *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
 * *   Mark the active deployment as inactive by adding any non-successful deployment status.
 *
 * For more information, see "[Create a deployment](https://docs.github.com/rest/reference/repos/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/reference/repos#create-a-deployment-status)."
 */
export const useReposDeleteDeployment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotFound | Responses.ValidationFailedSimple,
      ReposDeleteDeploymentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotFound | Responses.ValidationFailedSimple,
    ReposDeleteDeploymentVariables
  >(
    (variables: ReposDeleteDeploymentVariables) =>
      fetchReposDeleteDeployment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetDeploymentPathParams = {
  owner: string;
  repo: string;
  /*
   * deployment_id parameter
   */
  deploymentId: number;
};

export type ReposGetDeploymentVariables = {
  pathParams: ReposGetDeploymentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposGetDeployment = (
  variables: ReposGetDeploymentVariables
) =>
  githubFetch<
    Schemas.Deployment,
    undefined,
    {},
    {},
    ReposGetDeploymentPathParams
  >({
    url: "/repos/{owner}/{repo}/deployments/{deploymentId}",
    method: "get",
    ...variables,
  });

export const useReposGetDeployment = (
  variables: ReposGetDeploymentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Deployment,
      Responses.NotFound,
      Schemas.Deployment
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Deployment,
    Responses.NotFound,
    Schemas.Deployment
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/deployments/{deployment_id}",
      operationId: "reposGetDeployment",
      variables,
    }),
    () => fetchReposGetDeployment({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListDeploymentStatusesPathParams = {
  owner: string;
  repo: string;
  /*
   * deployment_id parameter
   */
  deploymentId: number;
};

export type ReposListDeploymentStatusesQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListDeploymentStatusesResponse = Schemas.DeploymentStatus[];

export type ReposListDeploymentStatusesVariables = {
  pathParams: ReposListDeploymentStatusesPathParams;
  queryParams?: ReposListDeploymentStatusesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with pull access can view deployment statuses for a deployment:
 */
export const fetchReposListDeploymentStatuses = (
  variables: ReposListDeploymentStatusesVariables
) =>
  githubFetch<
    ReposListDeploymentStatusesResponse,
    undefined,
    {},
    ReposListDeploymentStatusesQueryParams,
    ReposListDeploymentStatusesPathParams
  >({
    url: "/repos/{owner}/{repo}/deployments/{deploymentId}/statuses",
    method: "get",
    ...variables,
  });

/**
 * Users with pull access can view deployment statuses for a deployment:
 */
export const useReposListDeploymentStatuses = (
  variables: ReposListDeploymentStatusesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListDeploymentStatusesResponse,
      Responses.NotFound,
      ReposListDeploymentStatusesResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListDeploymentStatusesResponse,
    Responses.NotFound,
    ReposListDeploymentStatusesResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
      operationId: "reposListDeploymentStatuses",
      variables,
    }),
    () => fetchReposListDeploymentStatuses({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateDeploymentStatusPathParams = {
  owner: string;
  repo: string;
  /*
   * deployment_id parameter
   */
  deploymentId: number;
};

export type ReposCreateDeploymentStatusRequestBody = {
  /*
   * Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`
   * **Note:** To add an `inactive` status to `production` environments, you must use the [`application/vnd.github.flash-preview+json`](https://docs.github.com/rest/overview/api-previews#deployment-statuses) custom media type.
   * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
   */
  auto_inactive?: boolean;
  /*
   * A short description of the status. The maximum description length is 140 characters.
   *
   * @default
   */
  description?: string;
  /*
   * Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. **Note:** This parameter requires you to use the [`application/vnd.github.flash-preview+json`](https://docs.github.com/rest/overview/api-previews#deployment-statuses) custom media type.
   */
  environment?: "production" | "staging" | "qa";
  /*
   * Sets the URL for accessing your environment. Default: `""`
   * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
   *
   * @default
   */
  environment_url?: string;
  /*
   * The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
   * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
   *
   * @default
   */
  log_url?: string;
  /*
   * The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued` `pending`, or `success`. **Note:** To use the `inactive` state, you must provide the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type. To use the `in_progress` and `queued` states, you must provide the [`application/vnd.github.flash-preview+json`](https://docs.github.com/rest/overview/api-previews#deployment-statuses) custom media type. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
   */
  state:
    | "error"
    | "failure"
    | "inactive"
    | "in_progress"
    | "queued"
    | "pending"
    | "success";
  /*
   * The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.
   *
   * @default
   */
  target_url?: string;
};

export type ReposCreateDeploymentStatusVariables = {
  body: ReposCreateDeploymentStatusRequestBody;
  pathParams: ReposCreateDeploymentStatusPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with `push` access can create deployment statuses for a given deployment.
 *
 * GitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth Apps require the `repo_deployment` scope.
 */
export const fetchReposCreateDeploymentStatus = (
  variables: ReposCreateDeploymentStatusVariables
) =>
  githubFetch<
    Schemas.DeploymentStatus,
    ReposCreateDeploymentStatusRequestBody,
    {},
    {},
    ReposCreateDeploymentStatusPathParams
  >({
    url: "/repos/{owner}/{repo}/deployments/{deploymentId}/statuses",
    method: "post",
    ...variables,
  });

/**
 * Users with `push` access can create deployment statuses for a given deployment.
 *
 * GitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth Apps require the `repo_deployment` scope.
 */
export const useReposCreateDeploymentStatus = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.DeploymentStatus,
      Responses.ValidationFailed,
      ReposCreateDeploymentStatusVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.DeploymentStatus,
    Responses.ValidationFailed,
    ReposCreateDeploymentStatusVariables
  >(
    (variables: ReposCreateDeploymentStatusVariables) =>
      fetchReposCreateDeploymentStatus({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetDeploymentStatusPathParams = {
  owner: string;
  repo: string;
  /*
   * deployment_id parameter
   */
  deploymentId: number;
  statusId: number;
};

export type ReposGetDeploymentStatusVariables = {
  pathParams: ReposGetDeploymentStatusPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with pull access can view a deployment status for a deployment:
 */
export const fetchReposGetDeploymentStatus = (
  variables: ReposGetDeploymentStatusVariables
) =>
  githubFetch<
    Schemas.DeploymentStatus,
    undefined,
    {},
    {},
    ReposGetDeploymentStatusPathParams
  >({
    url: "/repos/{owner}/{repo}/deployments/{deploymentId}/statuses/{statusId}",
    method: "get",
    ...variables,
  });

/**
 * Users with pull access can view a deployment status for a deployment:
 */
export const useReposGetDeploymentStatus = (
  variables: ReposGetDeploymentStatusVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DeploymentStatus,
      Responses.NotFound | Responses.PreviewHeaderMissing,
      Schemas.DeploymentStatus
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.DeploymentStatus,
    Responses.NotFound | Responses.PreviewHeaderMissing,
    Schemas.DeploymentStatus
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}",
      operationId: "reposGetDeploymentStatus",
      variables,
    }),
    () => fetchReposGetDeploymentStatus({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateDispatchEventPathParams = {
  owner: string;
  repo: string;
};

export type ReposCreateDispatchEventRequestBody = {
  /*
   * JSON payload with extra information about the webhook event that your action or worklow may use.
   */
  client_payload?: {
    [key: string]: any;
  };
  /*
   * A custom webhook event name.
   */
  event_type: string;
};

export type ReposCreateDispatchEventVariables = {
  body: ReposCreateDispatchEventRequestBody;
  pathParams: ReposCreateDispatchEventPathParams;
} & GithubContext["fetcherOptions"];

/**
 * You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."
 *
 * The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
 *
 * This endpoint requires write access to the repository by providing either:
 *
 *   - Personal access tokens with `repo` scope. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.
 *   - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.
 *
 * This input example shows how you can use the `client_payload` as a test to debug your workflow.
 */
export const fetchReposCreateDispatchEvent = (
  variables: ReposCreateDispatchEventVariables
) =>
  githubFetch<
    undefined,
    ReposCreateDispatchEventRequestBody,
    {},
    {},
    ReposCreateDispatchEventPathParams
  >({ url: "/repos/{owner}/{repo}/dispatches", method: "post", ...variables });

/**
 * You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."
 *
 * The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
 *
 * This endpoint requires write access to the repository by providing either:
 *
 *   - Personal access tokens with `repo` scope. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.
 *   - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.
 *
 * This input example shows how you can use the `client_payload` as a test to debug your workflow.
 */
export const useReposCreateDispatchEvent = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.ValidationFailed,
      ReposCreateDispatchEventVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.ValidationFailed,
    ReposCreateDispatchEventVariables
  >(
    (variables: ReposCreateDispatchEventVariables) =>
      fetchReposCreateDispatchEvent({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetAllEnvironmentsPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetAllEnvironmentsResponse = {
  environments?: Schemas.Environment[];
  /*
   * The number of environments in this repository
   *
   * @example 5
   */
  total_count?: number;
};

export type ReposGetAllEnvironmentsVariables = {
  pathParams: ReposGetAllEnvironmentsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Get all environments for a repository.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchReposGetAllEnvironments = (
  variables: ReposGetAllEnvironmentsVariables
) =>
  githubFetch<
    ReposGetAllEnvironmentsResponse,
    undefined,
    {},
    {},
    ReposGetAllEnvironmentsPathParams
  >({ url: "/repos/{owner}/{repo}/environments", method: "get", ...variables });

/**
 * Get all environments for a repository.
 *
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useReposGetAllEnvironments = (
  variables: ReposGetAllEnvironmentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetAllEnvironmentsResponse,
      undefined,
      ReposGetAllEnvironmentsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetAllEnvironmentsResponse,
    undefined,
    ReposGetAllEnvironmentsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/environments",
      operationId: "reposGetAllEnvironments",
      variables,
    }),
    () => fetchReposGetAllEnvironments({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposDeleteAnEnvironmentPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the environment
   */
  environmentName: string;
};

export type ReposDeleteAnEnvironmentVariables = {
  pathParams: ReposDeleteAnEnvironmentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * You must authenticate using an access token with the repo scope to use this endpoint.
 */
export const fetchReposDeleteAnEnvironment = (
  variables: ReposDeleteAnEnvironmentVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ReposDeleteAnEnvironmentPathParams>(
    {
      url: "/repos/{owner}/{repo}/environments/{environmentName}",
      method: "delete",
      ...variables,
    }
  );

/**
 * You must authenticate using an access token with the repo scope to use this endpoint.
 */
export const useReposDeleteAnEnvironment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ReposDeleteAnEnvironmentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ReposDeleteAnEnvironmentVariables
  >(
    (variables: ReposDeleteAnEnvironmentVariables) =>
      fetchReposDeleteAnEnvironment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetEnvironmentPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the environment
   */
  environmentName: string;
};

export type ReposGetEnvironmentVariables = {
  pathParams: ReposGetEnvironmentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const fetchReposGetEnvironment = (
  variables: ReposGetEnvironmentVariables
) =>
  githubFetch<
    Schemas.Environment,
    undefined,
    {},
    {},
    ReposGetEnvironmentPathParams
  >({
    url: "/repos/{owner}/{repo}/environments/{environmentName}",
    method: "get",
    ...variables,
  });

/**
 * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const useReposGetEnvironment = (
  variables: ReposGetEnvironmentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Environment,
      undefined,
      Schemas.Environment
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Environment,
    undefined,
    Schemas.Environment
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/environments/{environment_name}",
      operationId: "reposGetEnvironment",
      variables,
    }),
    () => fetchReposGetEnvironment({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateOrUpdateEnvironmentPathParams = {
  owner: string;
  repo: string;
  /*
   * The name of the environment
   */
  environmentName: string;
};

export type ReposCreateOrUpdateEnvironmentVariables = {
  body?: {
    deployment_branch_policy?: Schemas.DeploymentBranchPolicy;
    /*
     * The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
     */
    reviewers?:
      | {
          /*
           * The id of the user or team who can review the deployment
           *
           * @example 4532992
           */
          id?: number;
          type?: Schemas.DeploymentReviewerType;
        }[]
      | null;
    wait_timer?: Schemas.WaitTimer;
  } | null;
  pathParams: ReposCreateOrUpdateEnvironmentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."
 *
 * **Note:** Although you can use this operation to specify that only branches that match specified name patterns can deploy to this environment, you must use the UI to set the name patterns. For more information, see "[Environments](/actions/reference/environments#deployment-branches)."
 *
 * **Note:** To create or update secrets for an environment, see "[Secrets](/rest/reference/actions#secrets)."
 *
 * You must authenticate using an access token with the repo scope to use this endpoint.
 */
export const fetchReposCreateOrUpdateEnvironment = (
  variables: ReposCreateOrUpdateEnvironmentVariables
) =>
  githubFetch<
    Schemas.Environment,
    {
      deployment_branch_policy?: Schemas.DeploymentBranchPolicy;
      /*
       * The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
       */
      reviewers?:
        | {
            /*
             * The id of the user or team who can review the deployment
             *
             * @example 4532992
             */
            id?: number;
            type?: Schemas.DeploymentReviewerType;
          }[]
        | null;
      wait_timer?: Schemas.WaitTimer;
    } | null,
    {},
    {},
    ReposCreateOrUpdateEnvironmentPathParams
  >({
    url: "/repos/{owner}/{repo}/environments/{environmentName}",
    method: "put",
    ...variables,
  });

/**
 * Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."
 *
 * **Note:** Although you can use this operation to specify that only branches that match specified name patterns can deploy to this environment, you must use the UI to set the name patterns. For more information, see "[Environments](/actions/reference/environments#deployment-branches)."
 *
 * **Note:** To create or update secrets for an environment, see "[Secrets](/rest/reference/actions#secrets)."
 *
 * You must authenticate using an access token with the repo scope to use this endpoint.
 */
export const useReposCreateOrUpdateEnvironment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Environment,
      Schemas.BasicError,
      ReposCreateOrUpdateEnvironmentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Environment,
    Schemas.BasicError,
    ReposCreateOrUpdateEnvironmentVariables
  >(
    (variables: ReposCreateOrUpdateEnvironmentVariables) =>
      fetchReposCreateOrUpdateEnvironment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActivityListRepoEventsPathParams = {
  owner: string;
  repo: string;
};

export type ActivityListRepoEventsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListRepoEventsResponse = Schemas.Event[];

export type ActivityListRepoEventsVariables = {
  pathParams: ActivityListRepoEventsPathParams;
  queryParams?: ActivityListRepoEventsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityListRepoEvents = (
  variables: ActivityListRepoEventsVariables
) =>
  githubFetch<
    ActivityListRepoEventsResponse,
    undefined,
    {},
    ActivityListRepoEventsQueryParams,
    ActivityListRepoEventsPathParams
  >({ url: "/repos/{owner}/{repo}/events", method: "get", ...variables });

export const useActivityListRepoEvents = (
  variables: ActivityListRepoEventsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListRepoEventsResponse,
      undefined,
      ActivityListRepoEventsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListRepoEventsResponse,
    undefined,
    ActivityListRepoEventsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/events",
      operationId: "activityListRepoEvents",
      variables,
    }),
    () => fetchActivityListRepoEvents({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListForksPathParams = {
  owner: string;
  repo: string;
};

export type ReposListForksQueryParams = {
  /*
   * The sort order. Can be either `newest`, `oldest`, or `stargazers`.
   *
   * @default newest
   */
  sort?: "newest" | "oldest" | "stargazers" | "watchers";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * legacy query parameter for specifying the org.
   */
  org?: string;
  /*
   * legacy query parameter for specifying the org.
   */
  organization?: string;
};

export type ReposListForksResponse = Schemas.MinimalRepository[];

export type ReposListForksVariables = {
  pathParams: ReposListForksPathParams;
  queryParams?: ReposListForksQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposListForks = (variables: ReposListForksVariables) =>
  githubFetch<
    ReposListForksResponse,
    undefined,
    {},
    ReposListForksQueryParams,
    ReposListForksPathParams
  >({ url: "/repos/{owner}/{repo}/forks", method: "get", ...variables });

export const useReposListForks = (
  variables: ReposListForksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListForksResponse,
      Responses.BadRequest,
      ReposListForksResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListForksResponse,
    Responses.BadRequest,
    ReposListForksResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/forks",
      operationId: "reposListForks",
      variables,
    }),
    () => fetchReposListForks({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateForkPathParams = {
  owner: string;
  repo: string;
};

export type ReposCreateForkQueryParams = {
  /*
   * legacy query parameter for specifying the org.
   */
  org?: string;
  /*
   * legacy query parameter for specifying the org.
   */
  organization?: string;
};

export type ReposCreateForkVariables = {
  body?: {
    /*
     * Optional parameter to specify the organization name if forking into an organization.
     */
    organization?: string;
  } | null;
  pathParams: ReposCreateForkPathParams;
  queryParams?: ReposCreateForkQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a fork for the authenticated user.
 *
 * **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com).
 */
export const fetchReposCreateFork = (variables: ReposCreateForkVariables) =>
  githubFetch<
    Schemas.Repository,
    {
      /*
       * Optional parameter to specify the organization name if forking into an organization.
       */
      organization?: string;
    } | null,
    {},
    ReposCreateForkQueryParams,
    ReposCreateForkPathParams
  >({ url: "/repos/{owner}/{repo}/forks", method: "post", ...variables });

/**
 * Create a fork for the authenticated user.
 *
 * **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com).
 */
export const useReposCreateFork = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Repository,
      | Responses.BadRequest
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.ValidationFailed,
      ReposCreateForkVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Repository,
    | Responses.BadRequest
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.ValidationFailed,
    ReposCreateForkVariables
  >(
    (variables: ReposCreateForkVariables) =>
      fetchReposCreateFork({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GitCreateBlobPathParams = {
  owner: string;
  repo: string;
};

export type GitCreateBlobRequestBody = {
  /*
   * The new blob's content.
   */
  content: string;
  /*
   * The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
   *
   * @default utf-8
   */
  encoding?: string;
};

export type GitCreateBlobVariables = {
  body: GitCreateBlobRequestBody;
  pathParams: GitCreateBlobPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGitCreateBlob = (variables: GitCreateBlobVariables) =>
  githubFetch<
    Schemas.ShortBlob,
    GitCreateBlobRequestBody,
    {},
    {},
    GitCreateBlobPathParams
  >({ url: "/repos/{owner}/{repo}/git/blobs", method: "post", ...variables });

export const useGitCreateBlob = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ShortBlob,
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.Conflict
      | Responses.ValidationFailed,
      GitCreateBlobVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ShortBlob,
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.Conflict
    | Responses.ValidationFailed,
    GitCreateBlobVariables
  >(
    (variables: GitCreateBlobVariables) =>
      fetchGitCreateBlob({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GitGetBlobPathParams = {
  owner: string;
  repo: string;
  fileSha: string;
};

export type GitGetBlobVariables = {
  pathParams: GitGetBlobPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The `content` in the response will always be Base64 encoded.
 *
 * _Note_: This API supports blobs up to 100 megabytes in size.
 */
export const fetchGitGetBlob = (variables: GitGetBlobVariables) =>
  githubFetch<Schemas.Blob, undefined, {}, {}, GitGetBlobPathParams>({
    url: "/repos/{owner}/{repo}/git/blobs/{fileSha}",
    method: "get",
    ...variables,
  });

/**
 * The `content` in the response will always be Base64 encoded.
 *
 * _Note_: This API supports blobs up to 100 megabytes in size.
 */
export const useGitGetBlob = (
  variables: GitGetBlobVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Blob,
      Responses.Forbidden | Responses.NotFound | Responses.ValidationFailed,
      Schemas.Blob
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Blob,
    Responses.Forbidden | Responses.NotFound | Responses.ValidationFailed,
    Schemas.Blob
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/git/blobs/{file_sha}",
      operationId: "gitGetBlob",
      variables,
    }),
    () => fetchGitGetBlob({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GitCreateCommitPathParams = {
  owner: string;
  repo: string;
};

export type GitCreateCommitRequestBody = {
  /*
   * Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.
   */
  author?: {
    /*
     * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    date?: string;
    /*
     * The email of the author (or committer) of the commit
     */
    email?: string;
    /*
     * The name of the author (or committer) of the commit
     */
    name?: string;
  };
  /*
   * Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.
   */
  committer?: {
    /*
     * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    date?: string;
    /*
     * The email of the author (or committer) of the commit
     */
    email?: string;
    /*
     * The name of the author (or committer) of the commit
     */
    name?: string;
  };
  /*
   * The commit message
   */
  message: string;
  /*
   * The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.
   */
  parents?: string[];
  /*
   * The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.
   */
  signature?: string;
  /*
   * The SHA of the tree object this commit points to
   */
  tree: string;
};

export type GitCreateCommitVariables = {
  body: GitCreateCommitRequestBody;
  pathParams: GitCreateCommitPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const fetchGitCreateCommit = (variables: GitCreateCommitVariables) =>
  githubFetch<
    Schemas.GitCommit,
    GitCreateCommitRequestBody,
    {},
    {},
    GitCreateCommitPathParams
  >({ url: "/repos/{owner}/{repo}/git/commits", method: "post", ...variables });

/**
 * Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useGitCreateCommit = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GitCommit,
      Responses.NotFound | Responses.ValidationFailed,
      GitCreateCommitVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GitCommit,
    Responses.NotFound | Responses.ValidationFailed,
    GitCreateCommitVariables
  >(
    (variables: GitCreateCommitVariables) =>
      fetchGitCreateCommit({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GitGetCommitPathParams = {
  owner: string;
  repo: string;
  /*
   * commit_sha parameter
   */
  commitSha: string;
};

export type GitGetCommitVariables = {
  pathParams: GitGetCommitPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const fetchGitGetCommit = (variables: GitGetCommitVariables) =>
  githubFetch<Schemas.GitCommit, undefined, {}, {}, GitGetCommitPathParams>({
    url: "/repos/{owner}/{repo}/git/commits/{commitSha}",
    method: "get",
    ...variables,
  });

/**
 * Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useGitGetCommit = (
  variables: GitGetCommitVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GitCommit,
      Responses.NotFound,
      Schemas.GitCommit
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.GitCommit,
    Responses.NotFound,
    Schemas.GitCommit
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/git/commits/{commit_sha}",
      operationId: "gitGetCommit",
      variables,
    }),
    () => fetchGitGetCommit({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GitListMatchingRefsPathParams = {
  owner: string;
  repo: string;
  /*
   * ref parameter
   */
  ref: string;
};

export type GitListMatchingRefsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type GitListMatchingRefsResponse = Schemas.GitRef[];

export type GitListMatchingRefsVariables = {
  pathParams: GitListMatchingRefsPathParams;
  queryParams?: GitListMatchingRefsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
 *
 * When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
 *
 * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 *
 * If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
 */
export const fetchGitListMatchingRefs = (
  variables: GitListMatchingRefsVariables
) =>
  githubFetch<
    GitListMatchingRefsResponse,
    undefined,
    {},
    GitListMatchingRefsQueryParams,
    GitListMatchingRefsPathParams
  >({
    url: "/repos/{owner}/{repo}/git/matching-refs/{ref}",
    method: "get",
    ...variables,
  });

/**
 * Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
 *
 * When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
 *
 * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 *
 * If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
 */
export const useGitListMatchingRefs = (
  variables: GitListMatchingRefsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GitListMatchingRefsResponse,
      undefined,
      GitListMatchingRefsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    GitListMatchingRefsResponse,
    undefined,
    GitListMatchingRefsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/git/matching-refs/{ref}",
      operationId: "gitListMatchingRefs",
      variables,
    }),
    () => fetchGitListMatchingRefs({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GitGetRefPathParams = {
  owner: string;
  repo: string;
  /*
   * ref parameter
   */
  ref: string;
};

export type GitGetRefVariables = {
  pathParams: GitGetRefPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
 *
 * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 */
export const fetchGitGetRef = (variables: GitGetRefVariables) =>
  githubFetch<Schemas.GitRef, undefined, {}, {}, GitGetRefPathParams>({
    url: "/repos/{owner}/{repo}/git/ref/{ref}",
    method: "get",
    ...variables,
  });

/**
 * Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
 *
 * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 */
export const useGitGetRef = (
  variables: GitGetRefVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GitRef,
      Responses.NotFound,
      Schemas.GitRef
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.GitRef,
    Responses.NotFound,
    Schemas.GitRef
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/git/ref/{ref}",
      operationId: "gitGetRef",
      variables,
    }),
    () => fetchGitGetRef({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GitCreateRefPathParams = {
  owner: string;
  repo: string;
};

export type GitCreateRefRequestBody = {
  /*
   * @example "refs/heads/newbranch"
   */
  key?: string;
  /*
   * The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.
   */
  ref: string;
  /*
   * The SHA1 value for this reference.
   */
  sha: string;
};

export type GitCreateRefVariables = {
  body: GitCreateRefRequestBody;
  pathParams: GitCreateRefPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
 */
export const fetchGitCreateRef = (variables: GitCreateRefVariables) =>
  githubFetch<
    Schemas.GitRef,
    GitCreateRefRequestBody,
    {},
    {},
    GitCreateRefPathParams
  >({ url: "/repos/{owner}/{repo}/git/refs", method: "post", ...variables });

/**
 * Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
 */
export const useGitCreateRef = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GitRef,
      Responses.ValidationFailed,
      GitCreateRefVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GitRef,
    Responses.ValidationFailed,
    GitCreateRefVariables
  >(
    (variables: GitCreateRefVariables) =>
      fetchGitCreateRef({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GitDeleteRefPathParams = {
  owner: string;
  repo: string;
  /*
   * ref parameter
   */
  ref: string;
};

export type GitDeleteRefVariables = {
  pathParams: GitDeleteRefPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGitDeleteRef = (variables: GitDeleteRefVariables) =>
  githubFetch<undefined, undefined, {}, {}, GitDeleteRefPathParams>({
    url: "/repos/{owner}/{repo}/git/refs/{ref}",
    method: "delete",
    ...variables,
  });

export const useGitDeleteRef = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.ValidationFailed,
      GitDeleteRefVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.ValidationFailed,
    GitDeleteRefVariables
  >(
    (variables: GitDeleteRefVariables) =>
      fetchGitDeleteRef({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GitUpdateRefPathParams = {
  owner: string;
  repo: string;
  /*
   * ref parameter
   */
  ref: string;
};

export type GitUpdateRefRequestBody = {
  /*
   * Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.
   *
   * @default false
   */
  force?: boolean;
  /*
   * The SHA1 value to set this reference to
   */
  sha: string;
};

export type GitUpdateRefVariables = {
  body: GitUpdateRefRequestBody;
  pathParams: GitUpdateRefPathParams;
} & GithubContext["fetcherOptions"];

export const fetchGitUpdateRef = (variables: GitUpdateRefVariables) =>
  githubFetch<
    Schemas.GitRef,
    GitUpdateRefRequestBody,
    {},
    {},
    GitUpdateRefPathParams
  >({
    url: "/repos/{owner}/{repo}/git/refs/{ref}",
    method: "patch",
    ...variables,
  });

export const useGitUpdateRef = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GitRef,
      Responses.ValidationFailed,
      GitUpdateRefVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GitRef,
    Responses.ValidationFailed,
    GitUpdateRefVariables
  >(
    (variables: GitUpdateRefVariables) =>
      fetchGitUpdateRef({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GitCreateTagPathParams = {
  owner: string;
  repo: string;
};

export type GitCreateTagRequestBody = {
  /*
   * The tag message.
   */
  message: string;
  /*
   * The SHA of the git object this is tagging.
   */
  object: string;
  /*
   * The tag's name. This is typically a version (e.g., "v0.0.1").
   */
  tag: string;
  /*
   * An object with information about the individual creating the tag.
   */
  tagger?: {
    /*
     * When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    date?: string;
    /*
     * The email of the author of the tag
     */
    email?: string;
    /*
     * The name of the author of the tag
     */
    name?: string;
  };
  /*
   * The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
   */
  type: "commit" | "tree" | "blob";
};

export type GitCreateTagVariables = {
  body: GitCreateTagRequestBody;
  pathParams: GitCreateTagPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const fetchGitCreateTag = (variables: GitCreateTagVariables) =>
  githubFetch<
    Schemas.GitTag,
    GitCreateTagRequestBody,
    {},
    {},
    GitCreateTagPathParams
  >({ url: "/repos/{owner}/{repo}/git/tags", method: "post", ...variables });

/**
 * Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useGitCreateTag = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GitTag,
      Responses.ValidationFailed,
      GitCreateTagVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GitTag,
    Responses.ValidationFailed,
    GitCreateTagVariables
  >(
    (variables: GitCreateTagVariables) =>
      fetchGitCreateTag({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GitGetTagPathParams = {
  owner: string;
  repo: string;
  tagSha: string;
};

export type GitGetTagVariables = {
  pathParams: GitGetTagPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const fetchGitGetTag = (variables: GitGetTagVariables) =>
  githubFetch<Schemas.GitTag, undefined, {}, {}, GitGetTagPathParams>({
    url: "/repos/{owner}/{repo}/git/tags/{tagSha}",
    method: "get",
    ...variables,
  });

/**
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
 * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const useGitGetTag = (
  variables: GitGetTagVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GitTag,
      Responses.NotFound,
      Schemas.GitTag
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.GitTag,
    Responses.NotFound,
    Schemas.GitTag
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/git/tags/{tag_sha}",
      operationId: "gitGetTag",
      variables,
    }),
    () => fetchGitGetTag({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GitCreateTreePathParams = {
  owner: string;
  repo: string;
};

export type GitCreateTreeRequestBody = {
  /*
   * The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
   * If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
   */
  base_tree?: string;
  /*
   * Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
   */
  tree: {
    /*
     * The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.
     *
     * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
     */
    content?: string;
    /*
     * The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.
     */
    mode?: "100644" | "100755" | "040000" | "160000" | "120000";
    /*
     * The file referenced in the tree.
     */
    path?: string;
    /*
     * The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.
     *
     * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
     */
    sha?: string | null;
    /*
     * Either `blob`, `tree`, or `commit`.
     */
    type?: "blob" | "tree" | "commit";
  }[];
};

export type GitCreateTreeVariables = {
  body: GitCreateTreeRequestBody;
  pathParams: GitCreateTreePathParams;
} & GithubContext["fetcherOptions"];

/**
 * The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
 *
 * If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/rest/reference/git#create-a-commit)" and "[Update a reference](https://docs.github.com/rest/reference/git#update-a-reference)."
 */
export const fetchGitCreateTree = (variables: GitCreateTreeVariables) =>
  githubFetch<
    Schemas.GitTree,
    GitCreateTreeRequestBody,
    {},
    {},
    GitCreateTreePathParams
  >({ url: "/repos/{owner}/{repo}/git/trees", method: "post", ...variables });

/**
 * The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
 *
 * If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/rest/reference/git#create-a-commit)" and "[Update a reference](https://docs.github.com/rest/reference/git#update-a-reference)."
 */
export const useGitCreateTree = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GitTree,
      Responses.Forbidden | Responses.NotFound | Responses.ValidationFailed,
      GitCreateTreeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GitTree,
    Responses.Forbidden | Responses.NotFound | Responses.ValidationFailed,
    GitCreateTreeVariables
  >(
    (variables: GitCreateTreeVariables) =>
      fetchGitCreateTree({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GitGetTreePathParams = {
  owner: string;
  repo: string;
  treeSha: string;
};

export type GitGetTreeQueryParams = {
  /*
   * Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this parameter to prevent recursively returning objects or subtrees.
   */
  recursive?: string;
};

export type GitGetTreeVariables = {
  pathParams: GitGetTreePathParams;
  queryParams?: GitGetTreeQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a single tree using the SHA1 value for that tree.
 *
 * If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
 */
export const fetchGitGetTree = (variables: GitGetTreeVariables) =>
  githubFetch<
    Schemas.GitTree,
    undefined,
    {},
    GitGetTreeQueryParams,
    GitGetTreePathParams
  >({
    url: "/repos/{owner}/{repo}/git/trees/{treeSha}",
    method: "get",
    ...variables,
  });

/**
 * Returns a single tree using the SHA1 value for that tree.
 *
 * If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
 */
export const useGitGetTree = (
  variables: GitGetTreeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GitTree,
      Responses.NotFound | Responses.ValidationFailed,
      Schemas.GitTree
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.GitTree,
    Responses.NotFound | Responses.ValidationFailed,
    Schemas.GitTree
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/git/trees/{tree_sha}",
      operationId: "gitGetTree",
      variables,
    }),
    () => fetchGitGetTree({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListWebhooksPathParams = {
  owner: string;
  repo: string;
};

export type ReposListWebhooksQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListWebhooksResponse = Schemas.Hook[];

export type ReposListWebhooksVariables = {
  pathParams: ReposListWebhooksPathParams;
  queryParams?: ReposListWebhooksQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposListWebhooks = (variables: ReposListWebhooksVariables) =>
  githubFetch<
    ReposListWebhooksResponse,
    undefined,
    {},
    ReposListWebhooksQueryParams,
    ReposListWebhooksPathParams
  >({ url: "/repos/{owner}/{repo}/hooks", method: "get", ...variables });

export const useReposListWebhooks = (
  variables: ReposListWebhooksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListWebhooksResponse,
      Responses.NotFound,
      ReposListWebhooksResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListWebhooksResponse,
    Responses.NotFound,
    ReposListWebhooksResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/hooks",
      operationId: "reposListWebhooks",
      variables,
    }),
    () => fetchReposListWebhooks({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateWebhookPathParams = {
  owner: string;
  repo: string;
};

export type ReposCreateWebhookRequestBody = {
  /*
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   *
   * @default true
   */
  active?: boolean;
  /*
   * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
   */
  config: {
    content_type?: Schemas.WebhookConfigContentType;
    /*
     * @example "sha256"
     */
    digest?: string;
    insecure_ssl?: Schemas.WebhookConfigInsecureSsl;
    secret?: Schemas.WebhookConfigSecret;
    /*
     * @example "abc"
     */
    token?: string;
    url: Schemas.WebhookConfigUrl;
  };
  /*
   * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
   *
   * @default push
   */
  events?: string[];
  /*
   * Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.
   */
  name?: string;
};

export type ReposCreateWebhookVariables = {
  body: ReposCreateWebhookRequestBody;
  pathParams: ReposCreateWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
 * share the same `config` as long as those webhooks do not have any `events` that overlap.
 */
export const fetchReposCreateWebhook = (
  variables: ReposCreateWebhookVariables
) =>
  githubFetch<
    Schemas.Hook,
    ReposCreateWebhookRequestBody,
    {},
    {},
    ReposCreateWebhookPathParams
  >({ url: "/repos/{owner}/{repo}/hooks", method: "post", ...variables });

/**
 * Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
 * share the same `config` as long as those webhooks do not have any `events` that overlap.
 */
export const useReposCreateWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Hook,
      Responses.Forbidden | Responses.NotFound | Responses.ValidationFailed,
      ReposCreateWebhookVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Hook,
    Responses.Forbidden | Responses.NotFound | Responses.ValidationFailed,
    ReposCreateWebhookVariables
  >(
    (variables: ReposCreateWebhookVariables) =>
      fetchReposCreateWebhook({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposDeleteWebhookPathParams = {
  owner: string;
  repo: string;
  hookId: number;
};

export type ReposDeleteWebhookVariables = {
  pathParams: ReposDeleteWebhookPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposDeleteWebhook = (
  variables: ReposDeleteWebhookVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ReposDeleteWebhookPathParams>({
    url: "/repos/{owner}/{repo}/hooks/{hookId}",
    method: "delete",
    ...variables,
  });

export const useReposDeleteWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotFound,
      ReposDeleteWebhookVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotFound,
    ReposDeleteWebhookVariables
  >(
    (variables: ReposDeleteWebhookVariables) =>
      fetchReposDeleteWebhook({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetWebhookPathParams = {
  owner: string;
  repo: string;
  hookId: number;
};

export type ReposGetWebhookVariables = {
  pathParams: ReposGetWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)."
 */
export const fetchReposGetWebhook = (variables: ReposGetWebhookVariables) =>
  githubFetch<Schemas.Hook, undefined, {}, {}, ReposGetWebhookPathParams>({
    url: "/repos/{owner}/{repo}/hooks/{hookId}",
    method: "get",
    ...variables,
  });

/**
 * Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)."
 */
export const useReposGetWebhook = (
  variables: ReposGetWebhookVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Hook, Responses.NotFound, Schemas.Hook>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Hook, Responses.NotFound, Schemas.Hook>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/hooks/{hook_id}",
      operationId: "reposGetWebhook",
      variables,
    }),
    () => fetchReposGetWebhook({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposUpdateWebhookPathParams = {
  owner: string;
  repo: string;
  hookId: number;
};

export type ReposUpdateWebhookRequestBody = {
  /*
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   *
   * @default true
   */
  active?: boolean;
  /*
   * Determines a list of events to be added to the list of events that the Hook triggers for.
   */
  add_events?: string[];
  /*
   * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
   */
  config?: {
    /*
     * @example "bar@example.com"
     */
    address?: string;
    content_type?: Schemas.WebhookConfigContentType;
    insecure_ssl?: Schemas.WebhookConfigInsecureSsl;
    /*
     * @example "The Serious Room"
     */
    room?: string;
    secret?: Schemas.WebhookConfigSecret;
    url: Schemas.WebhookConfigUrl;
  };
  /*
   * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
   *
   * @default push
   */
  events?: string[];
  /*
   * Determines a list of events to be removed from the list of events that the Hook triggers for.
   */
  remove_events?: string[];
};

export type ReposUpdateWebhookVariables = {
  body?: ReposUpdateWebhookRequestBody;
  pathParams: ReposUpdateWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)."
 */
export const fetchReposUpdateWebhook = (
  variables: ReposUpdateWebhookVariables
) =>
  githubFetch<
    Schemas.Hook,
    ReposUpdateWebhookRequestBody,
    {},
    {},
    ReposUpdateWebhookPathParams
  >({
    url: "/repos/{owner}/{repo}/hooks/{hookId}",
    method: "patch",
    ...variables,
  });

/**
 * Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)."
 */
export const useReposUpdateWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Hook,
      Responses.NotFound | Responses.ValidationFailed,
      ReposUpdateWebhookVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Hook,
    Responses.NotFound | Responses.ValidationFailed,
    ReposUpdateWebhookVariables
  >(
    (variables: ReposUpdateWebhookVariables) =>
      fetchReposUpdateWebhook({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetWebhookConfigForRepoPathParams = {
  owner: string;
  repo: string;
  hookId: number;
};

export type ReposGetWebhookConfigForRepoVariables = {
  pathParams: ReposGetWebhookConfigForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)."
 *
 * Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.
 */
export const fetchReposGetWebhookConfigForRepo = (
  variables: ReposGetWebhookConfigForRepoVariables
) =>
  githubFetch<
    Schemas.WebhookConfig,
    undefined,
    {},
    {},
    ReposGetWebhookConfigForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/hooks/{hookId}/config",
    method: "get",
    ...variables,
  });

/**
 * Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)."
 *
 * Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.
 */
export const useReposGetWebhookConfigForRepo = (
  variables: ReposGetWebhookConfigForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.WebhookConfig,
      undefined,
      Schemas.WebhookConfig
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.WebhookConfig,
    undefined,
    Schemas.WebhookConfig
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/hooks/{hook_id}/config",
      operationId: "reposGetWebhookConfigForRepo",
      variables,
    }),
    () =>
      fetchReposGetWebhookConfigForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposUpdateWebhookConfigForRepoPathParams = {
  owner: string;
  repo: string;
  hookId: number;
};

export type ReposUpdateWebhookConfigForRepoRequestBody = {
  content_type?: Schemas.WebhookConfigContentType;
  insecure_ssl?: Schemas.WebhookConfigInsecureSsl;
  secret?: Schemas.WebhookConfigSecret;
  url?: Schemas.WebhookConfigUrl;
};

export type ReposUpdateWebhookConfigForRepoVariables = {
  body?: ReposUpdateWebhookConfigForRepoRequestBody;
  pathParams: ReposUpdateWebhookConfigForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook)."
 *
 * Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.
 */
export const fetchReposUpdateWebhookConfigForRepo = (
  variables: ReposUpdateWebhookConfigForRepoVariables
) =>
  githubFetch<
    Schemas.WebhookConfig,
    ReposUpdateWebhookConfigForRepoRequestBody,
    {},
    {},
    ReposUpdateWebhookConfigForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/hooks/{hookId}/config",
    method: "patch",
    ...variables,
  });

/**
 * Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook)."
 *
 * Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.
 */
export const useReposUpdateWebhookConfigForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.WebhookConfig,
      undefined,
      ReposUpdateWebhookConfigForRepoVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.WebhookConfig,
    undefined,
    ReposUpdateWebhookConfigForRepoVariables
  >(
    (variables: ReposUpdateWebhookConfigForRepoVariables) =>
      fetchReposUpdateWebhookConfigForRepo({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposPingWebhookPathParams = {
  owner: string;
  repo: string;
  hookId: number;
};

export type ReposPingWebhookVariables = {
  pathParams: ReposPingWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
 */
export const fetchReposPingWebhook = (variables: ReposPingWebhookVariables) =>
  githubFetch<undefined, undefined, {}, {}, ReposPingWebhookPathParams>({
    url: "/repos/{owner}/{repo}/hooks/{hookId}/pings",
    method: "post",
    ...variables,
  });

/**
 * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
 */
export const useReposPingWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotFound,
      ReposPingWebhookVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotFound,
    ReposPingWebhookVariables
  >(
    (variables: ReposPingWebhookVariables) =>
      fetchReposPingWebhook({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposTestPushWebhookPathParams = {
  owner: string;
  repo: string;
  hookId: number;
};

export type ReposTestPushWebhookVariables = {
  pathParams: ReposTestPushWebhookPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
 *
 * **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`
 */
export const fetchReposTestPushWebhook = (
  variables: ReposTestPushWebhookVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ReposTestPushWebhookPathParams>({
    url: "/repos/{owner}/{repo}/hooks/{hookId}/tests",
    method: "post",
    ...variables,
  });

/**
 * This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
 *
 * **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`
 */
export const useReposTestPushWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotFound,
      ReposTestPushWebhookVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotFound,
    ReposTestPushWebhookVariables
  >(
    (variables: ReposTestPushWebhookVariables) =>
      fetchReposTestPushWebhook({ ...fetcherOptions, ...variables }),
    options
  );
};

export type MigrationsCancelImportPathParams = {
  owner: string;
  repo: string;
};

export type MigrationsCancelImportVariables = {
  pathParams: MigrationsCancelImportPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Stop an import for a repository.
 */
export const fetchMigrationsCancelImport = (
  variables: MigrationsCancelImportVariables
) =>
  githubFetch<undefined, undefined, {}, {}, MigrationsCancelImportPathParams>({
    url: "/repos/{owner}/{repo}/import",
    method: "delete",
    ...variables,
  });

/**
 * Stop an import for a repository.
 */
export const useMigrationsCancelImport = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      MigrationsCancelImportVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    MigrationsCancelImportVariables
  >(
    (variables: MigrationsCancelImportVariables) =>
      fetchMigrationsCancelImport({ ...fetcherOptions, ...variables }),
    options
  );
};

export type MigrationsGetImportStatusPathParams = {
  owner: string;
  repo: string;
};

export type MigrationsGetImportStatusVariables = {
  pathParams: MigrationsGetImportStatusPathParams;
} & GithubContext["fetcherOptions"];

/**
 * View the progress of an import.
 *
 * **Import status**
 *
 * This section includes details about the possible values of the `status` field of the Import Progress response.
 *
 * An import that does not have errors will progress through these steps:
 *
 * *   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
 * *   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).
 * *   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
 * *   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
 * *   `complete` - the import is complete, and the repository is ready on GitHub.
 *
 * If there are problems, you will see one of these in the `status` field:
 *
 * *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
 * *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com) for more information.
 * *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
 * *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/reference/migrations#cancel-an-import) and [retry](https://docs.github.com/rest/reference/migrations#start-an-import) with the correct URL.
 * *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
 *
 * **The project_choices field**
 *
 * When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
 *
 * **Git LFS related fields**
 *
 * This section includes details about Git LFS related fields that may be present in the Import Progress response.
 *
 * *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.
 * *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.
 * *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.
 * *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
 */
export const fetchMigrationsGetImportStatus = (
  variables: MigrationsGetImportStatusVariables
) =>
  githubFetch<
    Schemas.Import,
    undefined,
    {},
    {},
    MigrationsGetImportStatusPathParams
  >({ url: "/repos/{owner}/{repo}/import", method: "get", ...variables });

/**
 * View the progress of an import.
 *
 * **Import status**
 *
 * This section includes details about the possible values of the `status` field of the Import Progress response.
 *
 * An import that does not have errors will progress through these steps:
 *
 * *   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
 * *   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).
 * *   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
 * *   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
 * *   `complete` - the import is complete, and the repository is ready on GitHub.
 *
 * If there are problems, you will see one of these in the `status` field:
 *
 * *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
 * *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com) for more information.
 * *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
 * *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/reference/migrations#cancel-an-import) and [retry](https://docs.github.com/rest/reference/migrations#start-an-import) with the correct URL.
 * *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
 *
 * **The project_choices field**
 *
 * When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
 *
 * **Git LFS related fields**
 *
 * This section includes details about Git LFS related fields that may be present in the Import Progress response.
 *
 * *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.
 * *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.
 * *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.
 * *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
 */
export const useMigrationsGetImportStatus = (
  variables: MigrationsGetImportStatusVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Import,
      Responses.NotFound,
      Schemas.Import
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Import,
    Responses.NotFound,
    Schemas.Import
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/import",
      operationId: "migrationsGetImportStatus",
      variables,
    }),
    () => fetchMigrationsGetImportStatus({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MigrationsUpdateImportPathParams = {
  owner: string;
  repo: string;
};

export type MigrationsUpdateImportRequestBody = {
  /*
   * @example "project1"
   */
  tfvc_project?: string;
  /*
   * @example "git"
   */
  vcs?: string;
  /*
   * The password to provide to the originating repository.
   */
  vcs_password?: string;
  /*
   * The username to provide to the originating repository.
   */
  vcs_username?: string;
};

export type MigrationsUpdateImportVariables = {
  body?: MigrationsUpdateImportRequestBody;
  pathParams: MigrationsUpdateImportPathParams;
} & GithubContext["fetcherOptions"];

/**
 * An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API
 * request. If no parameters are provided, the import will be restarted.
 */
export const fetchMigrationsUpdateImport = (
  variables: MigrationsUpdateImportVariables
) =>
  githubFetch<
    Schemas.Import,
    MigrationsUpdateImportRequestBody,
    {},
    {},
    MigrationsUpdateImportPathParams
  >({ url: "/repos/{owner}/{repo}/import", method: "patch", ...variables });

/**
 * An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API
 * request. If no parameters are provided, the import will be restarted.
 */
export const useMigrationsUpdateImport = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Import,
      undefined,
      MigrationsUpdateImportVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Import,
    undefined,
    MigrationsUpdateImportVariables
  >(
    (variables: MigrationsUpdateImportVariables) =>
      fetchMigrationsUpdateImport({ ...fetcherOptions, ...variables }),
    options
  );
};

export type MigrationsStartImportPathParams = {
  owner: string;
  repo: string;
};

export type MigrationsStartImportRequestBody = {
  /*
   * For a tfvc import, the name of the project that is being imported.
   */
  tfvc_project?: string;
  /*
   * The originating VCS type. Can be one of `subversion`, `git`, `mercurial`, or `tfvc`. Please be aware that without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.
   */
  vcs?: "subversion" | "git" | "mercurial" | "tfvc";
  /*
   * If authentication is required, the password to provide to `vcs_url`.
   */
  vcs_password?: string;
  /*
   * The URL of the originating repository.
   */
  vcs_url: string;
  /*
   * If authentication is required, the username to provide to `vcs_url`.
   */
  vcs_username?: string;
};

export type MigrationsStartImportVariables = {
  body: MigrationsStartImportRequestBody;
  pathParams: MigrationsStartImportPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Start a source import to a GitHub repository using GitHub Importer.
 */
export const fetchMigrationsStartImport = (
  variables: MigrationsStartImportVariables
) =>
  githubFetch<
    Schemas.Import,
    MigrationsStartImportRequestBody,
    {},
    {},
    MigrationsStartImportPathParams
  >({ url: "/repos/{owner}/{repo}/import", method: "put", ...variables });

/**
 * Start a source import to a GitHub repository using GitHub Importer.
 */
export const useMigrationsStartImport = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Import,
      Responses.NotFound | Responses.ValidationFailed,
      MigrationsStartImportVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Import,
    Responses.NotFound | Responses.ValidationFailed,
    MigrationsStartImportVariables
  >(
    (variables: MigrationsStartImportVariables) =>
      fetchMigrationsStartImport({ ...fetcherOptions, ...variables }),
    options
  );
};

export type MigrationsGetCommitAuthorsPathParams = {
  owner: string;
  repo: string;
};

export type MigrationsGetCommitAuthorsQueryParams = {
  /*
   * A user ID. Only return users with an ID greater than this ID.
   */
  since?: number;
};

export type MigrationsGetCommitAuthorsResponse = Schemas.PorterAuthor[];

export type MigrationsGetCommitAuthorsVariables = {
  pathParams: MigrationsGetCommitAuthorsPathParams;
  queryParams?: MigrationsGetCommitAuthorsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
 *
 * This endpoint and the [Map a commit author](https://docs.github.com/rest/reference/migrations#map-a-commit-author) endpoint allow you to provide correct Git author information.
 */
export const fetchMigrationsGetCommitAuthors = (
  variables: MigrationsGetCommitAuthorsVariables
) =>
  githubFetch<
    MigrationsGetCommitAuthorsResponse,
    undefined,
    {},
    MigrationsGetCommitAuthorsQueryParams,
    MigrationsGetCommitAuthorsPathParams
  >({
    url: "/repos/{owner}/{repo}/import/authors",
    method: "get",
    ...variables,
  });

/**
 * Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
 *
 * This endpoint and the [Map a commit author](https://docs.github.com/rest/reference/migrations#map-a-commit-author) endpoint allow you to provide correct Git author information.
 */
export const useMigrationsGetCommitAuthors = (
  variables: MigrationsGetCommitAuthorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MigrationsGetCommitAuthorsResponse,
      Responses.NotFound,
      MigrationsGetCommitAuthorsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    MigrationsGetCommitAuthorsResponse,
    Responses.NotFound,
    MigrationsGetCommitAuthorsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/import/authors",
      operationId: "migrationsGetCommitAuthors",
      variables,
    }),
    () => fetchMigrationsGetCommitAuthors({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MigrationsMapCommitAuthorPathParams = {
  owner: string;
  repo: string;
  authorId: number;
};

export type MigrationsMapCommitAuthorRequestBody = {
  /*
   * The new Git author email.
   */
  email?: string;
  /*
   * The new Git author name.
   */
  name?: string;
  /*
   * @example "can't touch this"
   */
  remote_id?: string;
};

export type MigrationsMapCommitAuthorVariables = {
  body?: MigrationsMapCommitAuthorRequestBody;
  pathParams: MigrationsMapCommitAuthorPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository.
 */
export const fetchMigrationsMapCommitAuthor = (
  variables: MigrationsMapCommitAuthorVariables
) =>
  githubFetch<
    Schemas.PorterAuthor,
    MigrationsMapCommitAuthorRequestBody,
    {},
    {},
    MigrationsMapCommitAuthorPathParams
  >({
    url: "/repos/{owner}/{repo}/import/authors/{authorId}",
    method: "patch",
    ...variables,
  });

/**
 * Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository.
 */
export const useMigrationsMapCommitAuthor = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PorterAuthor,
      Responses.NotFound | Responses.ValidationFailed,
      MigrationsMapCommitAuthorVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PorterAuthor,
    Responses.NotFound | Responses.ValidationFailed,
    MigrationsMapCommitAuthorVariables
  >(
    (variables: MigrationsMapCommitAuthorVariables) =>
      fetchMigrationsMapCommitAuthor({ ...fetcherOptions, ...variables }),
    options
  );
};

export type MigrationsGetLargeFilesPathParams = {
  owner: string;
  repo: string;
};

export type MigrationsGetLargeFilesResponse = Schemas.PorterLargeFile[];

export type MigrationsGetLargeFilesVariables = {
  pathParams: MigrationsGetLargeFilesPathParams;
} & GithubContext["fetcherOptions"];

/**
 * List files larger than 100MB found during the import
 */
export const fetchMigrationsGetLargeFiles = (
  variables: MigrationsGetLargeFilesVariables
) =>
  githubFetch<
    MigrationsGetLargeFilesResponse,
    undefined,
    {},
    {},
    MigrationsGetLargeFilesPathParams
  >({
    url: "/repos/{owner}/{repo}/import/large_files",
    method: "get",
    ...variables,
  });

/**
 * List files larger than 100MB found during the import
 */
export const useMigrationsGetLargeFiles = (
  variables: MigrationsGetLargeFilesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MigrationsGetLargeFilesResponse,
      undefined,
      MigrationsGetLargeFilesResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    MigrationsGetLargeFilesResponse,
    undefined,
    MigrationsGetLargeFilesResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/import/large_files",
      operationId: "migrationsGetLargeFiles",
      variables,
    }),
    () => fetchMigrationsGetLargeFiles({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MigrationsSetLfsPreferencePathParams = {
  owner: string;
  repo: string;
};

export type MigrationsSetLfsPreferenceRequestBody = {
  /*
   * Can be one of `opt_in` (large files will be stored using Git LFS) or `opt_out` (large files will be removed during the import).
   */
  use_lfs: "opt_in" | "opt_out";
};

export type MigrationsSetLfsPreferenceVariables = {
  body: MigrationsSetLfsPreferenceRequestBody;
  pathParams: MigrationsSetLfsPreferencePathParams;
} & GithubContext["fetcherOptions"];

/**
 * You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.github.com). You can learn more about our LFS feature and working with large files [on our help site](https://help.github.com/articles/versioning-large-files/).
 */
export const fetchMigrationsSetLfsPreference = (
  variables: MigrationsSetLfsPreferenceVariables
) =>
  githubFetch<
    Schemas.Import,
    MigrationsSetLfsPreferenceRequestBody,
    {},
    {},
    MigrationsSetLfsPreferencePathParams
  >({ url: "/repos/{owner}/{repo}/import/lfs", method: "patch", ...variables });

/**
 * You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.github.com). You can learn more about our LFS feature and working with large files [on our help site](https://help.github.com/articles/versioning-large-files/).
 */
export const useMigrationsSetLfsPreference = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Import,
      Responses.ValidationFailed,
      MigrationsSetLfsPreferenceVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Import,
    Responses.ValidationFailed,
    MigrationsSetLfsPreferenceVariables
  >(
    (variables: MigrationsSetLfsPreferenceVariables) =>
      fetchMigrationsSetLfsPreference({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsGetRepoInstallationPathParams = {
  owner: string;
  repo: string;
};

export type AppsGetRepoInstallationVariables = {
  pathParams: AppsGetRepoInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsGetRepoInstallation = (
  variables: AppsGetRepoInstallationVariables
) =>
  githubFetch<
    Schemas.Installation,
    undefined,
    {},
    {},
    AppsGetRepoInstallationPathParams
  >({ url: "/repos/{owner}/{repo}/installation", method: "get", ...variables });

/**
 * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsGetRepoInstallation = (
  variables: AppsGetRepoInstallationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Installation,
      Responses.MovedPermanently | Responses.NotFound,
      Schemas.Installation
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Installation,
    Responses.MovedPermanently | Responses.NotFound,
    Schemas.Installation
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/installation",
      operationId: "appsGetRepoInstallation",
      variables,
    }),
    () => fetchAppsGetRepoInstallation({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type InteractionsRemoveRestrictionsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type InteractionsRemoveRestrictionsForRepoVariables = {
  pathParams: InteractionsRemoveRestrictionsForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
 */
export const fetchInteractionsRemoveRestrictionsForRepo = (
  variables: InteractionsRemoveRestrictionsForRepoVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    InteractionsRemoveRestrictionsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/interaction-limits",
    method: "delete",
    ...variables,
  });

/**
 * Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
 */
export const useInteractionsRemoveRestrictionsForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      InteractionsRemoveRestrictionsForRepoVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    InteractionsRemoveRestrictionsForRepoVariables
  >(
    (variables: InteractionsRemoveRestrictionsForRepoVariables) =>
      fetchInteractionsRemoveRestrictionsForRepo({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type InteractionsGetRestrictionsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type InteractionsGetRestrictionsForRepoVariables = {
  pathParams: InteractionsGetRestrictionsForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
 */
export const fetchInteractionsGetRestrictionsForRepo = (
  variables: InteractionsGetRestrictionsForRepoVariables
) =>
  githubFetch<
    Schemas.InteractionLimitResponse,
    undefined,
    {},
    {},
    InteractionsGetRestrictionsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/interaction-limits",
    method: "get",
    ...variables,
  });

/**
 * Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
 */
export const useInteractionsGetRestrictionsForRepo = (
  variables: InteractionsGetRestrictionsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.InteractionLimitResponse,
      undefined,
      Schemas.InteractionLimitResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.InteractionLimitResponse,
    undefined,
    Schemas.InteractionLimitResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/interaction-limits",
      operationId: "interactionsGetRestrictionsForRepo",
      variables,
    }),
    () =>
      fetchInteractionsGetRestrictionsForRepo({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type InteractionsSetRestrictionsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type InteractionsSetRestrictionsForRepoVariables = {
  body: Schemas.InteractionLimit;
  pathParams: InteractionsSetRestrictionsForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
 */
export const fetchInteractionsSetRestrictionsForRepo = (
  variables: InteractionsSetRestrictionsForRepoVariables
) =>
  githubFetch<
    Schemas.InteractionLimitResponse,
    Schemas.InteractionLimit,
    {},
    {},
    InteractionsSetRestrictionsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/interaction-limits",
    method: "put",
    ...variables,
  });

/**
 * Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
 */
export const useInteractionsSetRestrictionsForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.InteractionLimitResponse,
      undefined,
      InteractionsSetRestrictionsForRepoVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.InteractionLimitResponse,
    undefined,
    InteractionsSetRestrictionsForRepoVariables
  >(
    (variables: InteractionsSetRestrictionsForRepoVariables) =>
      fetchInteractionsSetRestrictionsForRepo({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposListInvitationsPathParams = {
  owner: string;
  repo: string;
};

export type ReposListInvitationsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListInvitationsResponse = Schemas.RepositoryInvitation[];

export type ReposListInvitationsVariables = {
  pathParams: ReposListInvitationsPathParams;
  queryParams?: ReposListInvitationsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
 */
export const fetchReposListInvitations = (
  variables: ReposListInvitationsVariables
) =>
  githubFetch<
    ReposListInvitationsResponse,
    undefined,
    {},
    ReposListInvitationsQueryParams,
    ReposListInvitationsPathParams
  >({ url: "/repos/{owner}/{repo}/invitations", method: "get", ...variables });

/**
 * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
 */
export const useReposListInvitations = (
  variables: ReposListInvitationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListInvitationsResponse,
      undefined,
      ReposListInvitationsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListInvitationsResponse,
    undefined,
    ReposListInvitationsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/invitations",
      operationId: "reposListInvitations",
      variables,
    }),
    () => fetchReposListInvitations({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposDeleteInvitationPathParams = {
  owner: string;
  repo: string;
  /*
   * invitation_id parameter
   */
  invitationId: number;
};

export type ReposDeleteInvitationVariables = {
  pathParams: ReposDeleteInvitationPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposDeleteInvitation = (
  variables: ReposDeleteInvitationVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ReposDeleteInvitationPathParams>({
    url: "/repos/{owner}/{repo}/invitations/{invitationId}",
    method: "delete",
    ...variables,
  });

export const useReposDeleteInvitation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ReposDeleteInvitationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ReposDeleteInvitationVariables
  >(
    (variables: ReposDeleteInvitationVariables) =>
      fetchReposDeleteInvitation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposUpdateInvitationPathParams = {
  owner: string;
  repo: string;
  /*
   * invitation_id parameter
   */
  invitationId: number;
};

export type ReposUpdateInvitationRequestBody = {
  /*
   * The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
   */
  permissions?: "read" | "write" | "maintain" | "triage" | "admin";
};

export type ReposUpdateInvitationVariables = {
  body?: ReposUpdateInvitationRequestBody;
  pathParams: ReposUpdateInvitationPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposUpdateInvitation = (
  variables: ReposUpdateInvitationVariables
) =>
  githubFetch<
    Schemas.RepositoryInvitation,
    ReposUpdateInvitationRequestBody,
    {},
    {},
    ReposUpdateInvitationPathParams
  >({
    url: "/repos/{owner}/{repo}/invitations/{invitationId}",
    method: "patch",
    ...variables,
  });

export const useReposUpdateInvitation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RepositoryInvitation,
      undefined,
      ReposUpdateInvitationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.RepositoryInvitation,
    undefined,
    ReposUpdateInvitationVariables
  >(
    (variables: ReposUpdateInvitationVariables) =>
      fetchReposUpdateInvitation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesListForRepoPathParams = {
  owner: string;
  repo: string;
};

export type IssuesListForRepoQueryParams = {
  /*
   * If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.
   */
  milestone?: string;
  /*
   * Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /*
   * Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.
   */
  assignee?: string;
  /*
   * The user that created the issue.
   */
  creator?: string;
  /*
   * A user that's mentioned in the issue.
   */
  mentioned?: string;
  /*
   * A list of comma separated label names. Example: `bug,ui,@high`
   */
  labels?: string;
  /*
   * What to sort results by. Can be either `created`, `updated`, `comments`.
   *
   * @default created
   */
  sort?: "created" | "updated" | "comments";
  /*
   * One of `asc` (ascending) or `desc` (descending).
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListForRepoResponse = Schemas.IssueSimple[];

export type IssuesListForRepoVariables = {
  pathParams: IssuesListForRepoPathParams;
  queryParams?: IssuesListForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List issues in a repository.
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const fetchIssuesListForRepo = (variables: IssuesListForRepoVariables) =>
  githubFetch<
    IssuesListForRepoResponse,
    undefined,
    {},
    IssuesListForRepoQueryParams,
    IssuesListForRepoPathParams
  >({ url: "/repos/{owner}/{repo}/issues", method: "get", ...variables });

/**
 * List issues in a repository.
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const useIssuesListForRepo = (
  variables: IssuesListForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListForRepoResponse,
      | Responses.MovedPermanently
      | Responses.NotFound
      | Responses.ValidationFailed,
      IssuesListForRepoResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListForRepoResponse,
    | Responses.MovedPermanently
    | Responses.NotFound
    | Responses.ValidationFailed,
    IssuesListForRepoResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/issues",
      operationId: "issuesListForRepo",
      variables,
    }),
    () => fetchIssuesListForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesCreatePathParams = {
  owner: string;
  repo: string;
};

export type IssuesCreateRequestBody = {
  /*
   * Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
   */
  assignee?: string | null;
  /*
   * Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
   */
  assignees?: string[];
  /*
   * The contents of the issue.
   */
  body?: string;
  /*
   * Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
   */
  labels?: (
    | string
    | {
        color?: string | null;
        description?: string | null;
        id?: number;
        name?: string;
      }
  )[];
  milestone?: string | number | null;
  /*
   * The title of the issue.
   */
  title: string | number;
};

export type IssuesCreateVariables = {
  body: IssuesCreateRequestBody;
  pathParams: IssuesCreatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://help.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details.
 */
export const fetchIssuesCreate = (variables: IssuesCreateVariables) =>
  githubFetch<
    Schemas.Issue,
    IssuesCreateRequestBody,
    {},
    {},
    IssuesCreatePathParams
  >({ url: "/repos/{owner}/{repo}/issues", method: "post", ...variables });

/**
 * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://help.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details.
 */
export const useIssuesCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Issue,
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.Gone
      | Responses.ValidationFailed
      | Responses.ServiceUnavailable,
      IssuesCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Issue,
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.Gone
    | Responses.ValidationFailed
    | Responses.ServiceUnavailable,
    IssuesCreateVariables
  >(
    (variables: IssuesCreateVariables) =>
      fetchIssuesCreate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesListCommentsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type IssuesListCommentsForRepoQueryParams = {
  /*
   * One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
   *
   * @default created
   */
  sort?: "created" | "updated";
  /*
   * Either `asc` or `desc`. Ignored without the `sort` parameter.
   */
  direction?: "asc" | "desc";
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListCommentsForRepoResponse = Schemas.IssueComment[];

export type IssuesListCommentsForRepoVariables = {
  pathParams: IssuesListCommentsForRepoPathParams;
  queryParams?: IssuesListCommentsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * By default, Issue Comments are ordered by ascending ID.
 */
export const fetchIssuesListCommentsForRepo = (
  variables: IssuesListCommentsForRepoVariables
) =>
  githubFetch<
    IssuesListCommentsForRepoResponse,
    undefined,
    {},
    IssuesListCommentsForRepoQueryParams,
    IssuesListCommentsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/comments",
    method: "get",
    ...variables,
  });

/**
 * By default, Issue Comments are ordered by ascending ID.
 */
export const useIssuesListCommentsForRepo = (
  variables: IssuesListCommentsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListCommentsForRepoResponse,
      Responses.NotFound | Responses.ValidationFailed,
      IssuesListCommentsForRepoResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListCommentsForRepoResponse,
    Responses.NotFound | Responses.ValidationFailed,
    IssuesListCommentsForRepoResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/issues/comments",
      operationId: "issuesListCommentsForRepo",
      variables,
    }),
    () => fetchIssuesListCommentsForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesDeleteCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type IssuesDeleteCommentVariables = {
  pathParams: IssuesDeleteCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesDeleteComment = (
  variables: IssuesDeleteCommentVariables
) =>
  githubFetch<undefined, undefined, {}, {}, IssuesDeleteCommentPathParams>({
    url: "/repos/{owner}/{repo}/issues/comments/{commentId}",
    method: "delete",
    ...variables,
  });

export const useIssuesDeleteComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      IssuesDeleteCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    IssuesDeleteCommentVariables
  >(
    (variables: IssuesDeleteCommentVariables) =>
      fetchIssuesDeleteComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesGetCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type IssuesGetCommentVariables = {
  pathParams: IssuesGetCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesGetComment = (variables: IssuesGetCommentVariables) =>
  githubFetch<
    Schemas.IssueComment,
    undefined,
    {},
    {},
    IssuesGetCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/comments/{commentId}",
    method: "get",
    ...variables,
  });

export const useIssuesGetComment = (
  variables: IssuesGetCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.IssueComment,
      Responses.NotFound,
      Schemas.IssueComment
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.IssueComment,
    Responses.NotFound,
    Schemas.IssueComment
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/issues/comments/{comment_id}",
      operationId: "issuesGetComment",
      variables,
    }),
    () => fetchIssuesGetComment({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesUpdateCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type IssuesUpdateCommentRequestBody = {
  /*
   * The contents of the comment.
   */
  body: string;
};

export type IssuesUpdateCommentVariables = {
  body: IssuesUpdateCommentRequestBody;
  pathParams: IssuesUpdateCommentPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesUpdateComment = (
  variables: IssuesUpdateCommentVariables
) =>
  githubFetch<
    Schemas.IssueComment,
    IssuesUpdateCommentRequestBody,
    {},
    {},
    IssuesUpdateCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/comments/{commentId}",
    method: "patch",
    ...variables,
  });

export const useIssuesUpdateComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.IssueComment,
      Responses.ValidationFailed,
      IssuesUpdateCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.IssueComment,
    Responses.ValidationFailed,
    IssuesUpdateCommentVariables
  >(
    (variables: IssuesUpdateCommentVariables) =>
      fetchIssuesUpdateComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReactionsListForIssueCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type ReactionsListForIssueCommentQueryParams = {
  /*
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForIssueCommentResponse = Schemas.Reaction[];

export type ReactionsListForIssueCommentVariables = {
  pathParams: ReactionsListForIssueCommentPathParams;
  queryParams?: ReactionsListForIssueCommentQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
 */
export const fetchReactionsListForIssueComment = (
  variables: ReactionsListForIssueCommentVariables
) =>
  githubFetch<
    ReactionsListForIssueCommentResponse,
    undefined,
    {},
    ReactionsListForIssueCommentQueryParams,
    ReactionsListForIssueCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/comments/{commentId}/reactions",
    method: "get",
    ...variables,
  });

/**
 * List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
 */
export const useReactionsListForIssueComment = (
  variables: ReactionsListForIssueCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForIssueCommentResponse,
      Responses.NotFound | Responses.PreviewHeaderMissing,
      ReactionsListForIssueCommentResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForIssueCommentResponse,
    Responses.NotFound | Responses.PreviewHeaderMissing,
    ReactionsListForIssueCommentResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
      operationId: "reactionsListForIssueComment",
      variables,
    }),
    () =>
      fetchReactionsListForIssueComment({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReactionsCreateForIssueCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type ReactionsCreateForIssueCommentRequestBody = {
  /*
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue comment.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
};

export type ReactionsCreateForIssueCommentVariables = {
  body: ReactionsCreateForIssueCommentRequestBody;
  pathParams: ReactionsCreateForIssueCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this issue comment.
 */
export const fetchReactionsCreateForIssueComment = (
  variables: ReactionsCreateForIssueCommentVariables
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForIssueCommentRequestBody,
    {},
    {},
    ReactionsCreateForIssueCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/comments/{commentId}/reactions",
    method: "post",
    ...variables,
  });

/**
 * Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this issue comment.
 */
export const useReactionsCreateForIssueComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      Responses.PreviewHeaderMissing | Responses.ValidationFailed,
      ReactionsCreateForIssueCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    Responses.PreviewHeaderMissing | Responses.ValidationFailed,
    ReactionsCreateForIssueCommentVariables
  >(
    (variables: ReactionsCreateForIssueCommentVariables) =>
      fetchReactionsCreateForIssueComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReactionsDeleteForIssueCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
  reactionId: number;
};

export type ReactionsDeleteForIssueCommentVariables = {
  pathParams: ReactionsDeleteForIssueCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
 *
 * Delete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
 */
export const fetchReactionsDeleteForIssueComment = (
  variables: ReactionsDeleteForIssueCommentVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ReactionsDeleteForIssueCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/comments/{commentId}/reactions/{reactionId}",
    method: "delete",
    ...variables,
  });

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
 *
 * Delete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
 */
export const useReactionsDeleteForIssueComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ReactionsDeleteForIssueCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ReactionsDeleteForIssueCommentVariables
  >(
    (variables: ReactionsDeleteForIssueCommentVariables) =>
      fetchReactionsDeleteForIssueComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesListEventsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type IssuesListEventsForRepoQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListEventsForRepoResponse = Schemas.IssueEvent[];

export type IssuesListEventsForRepoVariables = {
  pathParams: IssuesListEventsForRepoPathParams;
  queryParams?: IssuesListEventsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesListEventsForRepo = (
  variables: IssuesListEventsForRepoVariables
) =>
  githubFetch<
    IssuesListEventsForRepoResponse,
    undefined,
    {},
    IssuesListEventsForRepoQueryParams,
    IssuesListEventsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/events",
    method: "get",
    ...variables,
  });

export const useIssuesListEventsForRepo = (
  variables: IssuesListEventsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListEventsForRepoResponse,
      Responses.ValidationFailed,
      IssuesListEventsForRepoResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListEventsForRepoResponse,
    Responses.ValidationFailed,
    IssuesListEventsForRepoResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/issues/events",
      operationId: "issuesListEventsForRepo",
      variables,
    }),
    () => fetchIssuesListEventsForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesGetEventPathParams = {
  owner: string;
  repo: string;
  eventId: number;
};

export type IssuesGetEventVariables = {
  pathParams: IssuesGetEventPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesGetEvent = (variables: IssuesGetEventVariables) =>
  githubFetch<Schemas.IssueEvent, undefined, {}, {}, IssuesGetEventPathParams>({
    url: "/repos/{owner}/{repo}/issues/events/{eventId}",
    method: "get",
    ...variables,
  });

export const useIssuesGetEvent = (
  variables: IssuesGetEventVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.IssueEvent,
      Responses.Forbidden | Responses.NotFound | Responses.Gone,
      Schemas.IssueEvent
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.IssueEvent,
    Responses.Forbidden | Responses.NotFound | Responses.Gone,
    Schemas.IssueEvent
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/issues/events/{event_id}",
      operationId: "issuesGetEvent",
      variables,
    }),
    () => fetchIssuesGetEvent({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesGetPathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesGetVariables = {
  pathParams: IssuesGetPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
 * [transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
 * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
 * returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
 * access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
 * to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const fetchIssuesGet = (variables: IssuesGetVariables) =>
  githubFetch<Schemas.Issue, undefined, {}, {}, IssuesGetPathParams>({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}",
    method: "get",
    ...variables,
  });

/**
 * The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
 * [transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
 * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
 * returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
 * access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
 * to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const useIssuesGet = (
  variables: IssuesGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Issue,
      | Responses.MovedPermanently
      | Responses.NotModified
      | Responses.NotFound
      | Responses.Gone,
      Schemas.Issue
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Issue,
    | Responses.MovedPermanently
    | Responses.NotModified
    | Responses.NotFound
    | Responses.Gone,
    Schemas.Issue
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/issues/{issue_number}",
      operationId: "issuesGet",
      variables,
    }),
    () => fetchIssuesGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesUpdatePathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesUpdateRequestBody = {
  /*
   * Login for the user that this issue should be assigned to. **This field is deprecated.**
   */
  assignee?: string | null;
  /*
   * Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
   */
  assignees?: string[];
  /*
   * The contents of the issue.
   */
  body?: string | null;
  /*
   * Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._
   */
  labels?: (
    | string
    | {
        color?: string | null;
        description?: string | null;
        id?: number;
        name?: string;
      }
  )[];
  milestone?: string | number | null;
  /*
   * State of the issue. Either `open` or `closed`.
   */
  state?: "open" | "closed";
  /*
   * The title of the issue.
   */
  title?: string | number | null;
};

export type IssuesUpdateVariables = {
  body?: IssuesUpdateRequestBody;
  pathParams: IssuesUpdatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Issue owners and users with push access can edit an issue.
 */
export const fetchIssuesUpdate = (variables: IssuesUpdateVariables) =>
  githubFetch<
    Schemas.Issue,
    IssuesUpdateRequestBody,
    {},
    {},
    IssuesUpdatePathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}",
    method: "patch",
    ...variables,
  });

/**
 * Issue owners and users with push access can edit an issue.
 */
export const useIssuesUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Issue,
      | Responses.MovedPermanently
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.Gone
      | Responses.ValidationFailed
      | Responses.ServiceUnavailable,
      IssuesUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Issue,
    | Responses.MovedPermanently
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.Gone
    | Responses.ValidationFailed
    | Responses.ServiceUnavailable,
    IssuesUpdateVariables
  >(
    (variables: IssuesUpdateVariables) =>
      fetchIssuesUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesRemoveAssigneesPathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesRemoveAssigneesRequestBody = {
  /*
   * Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._
   */
  assignees?: string[];
};

export type IssuesRemoveAssigneesVariables = {
  body?: IssuesRemoveAssigneesRequestBody;
  pathParams: IssuesRemoveAssigneesPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes one or more assignees from an issue.
 */
export const fetchIssuesRemoveAssignees = (
  variables: IssuesRemoveAssigneesVariables
) =>
  githubFetch<
    Schemas.IssueSimple,
    IssuesRemoveAssigneesRequestBody,
    {},
    {},
    IssuesRemoveAssigneesPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/assignees",
    method: "delete",
    ...variables,
  });

/**
 * Removes one or more assignees from an issue.
 */
export const useIssuesRemoveAssignees = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.IssueSimple,
      undefined,
      IssuesRemoveAssigneesVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.IssueSimple,
    undefined,
    IssuesRemoveAssigneesVariables
  >(
    (variables: IssuesRemoveAssigneesVariables) =>
      fetchIssuesRemoveAssignees({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesAddAssigneesPathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesAddAssigneesRequestBody = {
  /*
   * Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._
   */
  assignees?: string[];
};

export type IssuesAddAssigneesVariables = {
  body?: IssuesAddAssigneesRequestBody;
  pathParams: IssuesAddAssigneesPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
 */
export const fetchIssuesAddAssignees = (
  variables: IssuesAddAssigneesVariables
) =>
  githubFetch<
    Schemas.IssueSimple,
    IssuesAddAssigneesRequestBody,
    {},
    {},
    IssuesAddAssigneesPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/assignees",
    method: "post",
    ...variables,
  });

/**
 * Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
 */
export const useIssuesAddAssignees = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.IssueSimple,
      undefined,
      IssuesAddAssigneesVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.IssueSimple,
    undefined,
    IssuesAddAssigneesVariables
  >(
    (variables: IssuesAddAssigneesVariables) =>
      fetchIssuesAddAssignees({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesListCommentsPathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesListCommentsQueryParams = {
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListCommentsResponse = Schemas.IssueComment[];

export type IssuesListCommentsVariables = {
  pathParams: IssuesListCommentsPathParams;
  queryParams?: IssuesListCommentsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Issue Comments are ordered by ascending ID.
 */
export const fetchIssuesListComments = (
  variables: IssuesListCommentsVariables
) =>
  githubFetch<
    IssuesListCommentsResponse,
    undefined,
    {},
    IssuesListCommentsQueryParams,
    IssuesListCommentsPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/comments",
    method: "get",
    ...variables,
  });

/**
 * Issue Comments are ordered by ascending ID.
 */
export const useIssuesListComments = (
  variables: IssuesListCommentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListCommentsResponse,
      Responses.NotFound | Responses.Gone,
      IssuesListCommentsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListCommentsResponse,
    Responses.NotFound | Responses.Gone,
    IssuesListCommentsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/issues/{issue_number}/comments",
      operationId: "issuesListComments",
      variables,
    }),
    () => fetchIssuesListComments({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesCreateCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesCreateCommentRequestBody = {
  /*
   * The contents of the comment.
   */
  body: string;
};

export type IssuesCreateCommentVariables = {
  body: IssuesCreateCommentRequestBody;
  pathParams: IssuesCreateCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details.
 */
export const fetchIssuesCreateComment = (
  variables: IssuesCreateCommentVariables
) =>
  githubFetch<
    Schemas.IssueComment,
    IssuesCreateCommentRequestBody,
    {},
    {},
    IssuesCreateCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/comments",
    method: "post",
    ...variables,
  });

/**
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details.
 */
export const useIssuesCreateComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.IssueComment,
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.Gone
      | Responses.ValidationFailed,
      IssuesCreateCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.IssueComment,
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.Gone
    | Responses.ValidationFailed,
    IssuesCreateCommentVariables
  >(
    (variables: IssuesCreateCommentVariables) =>
      fetchIssuesCreateComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesListEventsPathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesListEventsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListEventsResponse = Schemas.IssueEventForIssue[];

export type IssuesListEventsVariables = {
  pathParams: IssuesListEventsPathParams;
  queryParams?: IssuesListEventsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesListEvents = (variables: IssuesListEventsVariables) =>
  githubFetch<
    IssuesListEventsResponse,
    undefined,
    {},
    IssuesListEventsQueryParams,
    IssuesListEventsPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/events",
    method: "get",
    ...variables,
  });

export const useIssuesListEvents = (
  variables: IssuesListEventsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListEventsResponse,
      Responses.Gone,
      IssuesListEventsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListEventsResponse,
    Responses.Gone,
    IssuesListEventsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/issues/{issue_number}/events",
      operationId: "issuesListEvents",
      variables,
    }),
    () => fetchIssuesListEvents({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesRemoveAllLabelsPathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesRemoveAllLabelsVariables = {
  pathParams: IssuesRemoveAllLabelsPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesRemoveAllLabels = (
  variables: IssuesRemoveAllLabelsVariables
) =>
  githubFetch<undefined, undefined, {}, {}, IssuesRemoveAllLabelsPathParams>({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/labels",
    method: "delete",
    ...variables,
  });

export const useIssuesRemoveAllLabels = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.Gone,
      IssuesRemoveAllLabelsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.Gone,
    IssuesRemoveAllLabelsVariables
  >(
    (variables: IssuesRemoveAllLabelsVariables) =>
      fetchIssuesRemoveAllLabels({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesListLabelsOnIssuePathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesListLabelsOnIssueQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListLabelsOnIssueResponse = Schemas.Label[];

export type IssuesListLabelsOnIssueVariables = {
  pathParams: IssuesListLabelsOnIssuePathParams;
  queryParams?: IssuesListLabelsOnIssueQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesListLabelsOnIssue = (
  variables: IssuesListLabelsOnIssueVariables
) =>
  githubFetch<
    IssuesListLabelsOnIssueResponse,
    undefined,
    {},
    IssuesListLabelsOnIssueQueryParams,
    IssuesListLabelsOnIssuePathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/labels",
    method: "get",
    ...variables,
  });

export const useIssuesListLabelsOnIssue = (
  variables: IssuesListLabelsOnIssueVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListLabelsOnIssueResponse,
      Responses.Gone,
      IssuesListLabelsOnIssueResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListLabelsOnIssueResponse,
    Responses.Gone,
    IssuesListLabelsOnIssueResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/issues/{issue_number}/labels",
      operationId: "issuesListLabelsOnIssue",
      variables,
    }),
    () => fetchIssuesListLabelsOnIssue({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesAddLabelsPathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesAddLabelsResponse = Schemas.Label[];

export type IssuesAddLabelsRequestBody = {
  /*
   * The name of the label to add to the issue. Must contain at least one label. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.
   */
  labels: string[];
};

export type IssuesAddLabelsVariables = {
  body: IssuesAddLabelsRequestBody;
  pathParams: IssuesAddLabelsPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesAddLabels = (variables: IssuesAddLabelsVariables) =>
  githubFetch<
    IssuesAddLabelsResponse,
    IssuesAddLabelsRequestBody,
    {},
    {},
    IssuesAddLabelsPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/labels",
    method: "post",
    ...variables,
  });

export const useIssuesAddLabels = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      IssuesAddLabelsResponse,
      Responses.Gone | Responses.ValidationFailed,
      IssuesAddLabelsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    IssuesAddLabelsResponse,
    Responses.Gone | Responses.ValidationFailed,
    IssuesAddLabelsVariables
  >(
    (variables: IssuesAddLabelsVariables) =>
      fetchIssuesAddLabels({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesSetLabelsPathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesSetLabelsResponse = Schemas.Label[];

export type IssuesSetLabelsRequestBody = {
  /*
   * The names of the labels to add to the issue. You can pass an empty array to remove all labels. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.
   */
  labels?: string[];
};

export type IssuesSetLabelsVariables = {
  body?: IssuesSetLabelsRequestBody;
  pathParams: IssuesSetLabelsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes any previous labels and sets the new labels for an issue.
 */
export const fetchIssuesSetLabels = (variables: IssuesSetLabelsVariables) =>
  githubFetch<
    IssuesSetLabelsResponse,
    IssuesSetLabelsRequestBody,
    {},
    {},
    IssuesSetLabelsPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/labels",
    method: "put",
    ...variables,
  });

/**
 * Removes any previous labels and sets the new labels for an issue.
 */
export const useIssuesSetLabels = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      IssuesSetLabelsResponse,
      Responses.Gone | Responses.ValidationFailed,
      IssuesSetLabelsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    IssuesSetLabelsResponse,
    Responses.Gone | Responses.ValidationFailed,
    IssuesSetLabelsVariables
  >(
    (variables: IssuesSetLabelsVariables) =>
      fetchIssuesSetLabels({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesRemoveLabelPathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
  name: string;
};

export type IssuesRemoveLabelResponse = Schemas.Label[];

export type IssuesRemoveLabelVariables = {
  pathParams: IssuesRemoveLabelPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
 */
export const fetchIssuesRemoveLabel = (variables: IssuesRemoveLabelVariables) =>
  githubFetch<
    IssuesRemoveLabelResponse,
    undefined,
    {},
    {},
    IssuesRemoveLabelPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/labels/{name}",
    method: "delete",
    ...variables,
  });

/**
 * Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
 */
export const useIssuesRemoveLabel = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      IssuesRemoveLabelResponse,
      Responses.NotFound | Responses.Gone,
      IssuesRemoveLabelVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    IssuesRemoveLabelResponse,
    Responses.NotFound | Responses.Gone,
    IssuesRemoveLabelVariables
  >(
    (variables: IssuesRemoveLabelVariables) =>
      fetchIssuesRemoveLabel({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesUnlockPathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesUnlockVariables = {
  pathParams: IssuesUnlockPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with push access can unlock an issue's conversation.
 */
export const fetchIssuesUnlock = (variables: IssuesUnlockVariables) =>
  githubFetch<undefined, undefined, {}, {}, IssuesUnlockPathParams>({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/lock",
    method: "delete",
    ...variables,
  });

/**
 * Users with push access can unlock an issue's conversation.
 */
export const useIssuesUnlock = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.Forbidden | Responses.NotFound,
      IssuesUnlockVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.Forbidden | Responses.NotFound,
    IssuesUnlockVariables
  >(
    (variables: IssuesUnlockVariables) =>
      fetchIssuesUnlock({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesLockPathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesLockVariables = {
  body?: {
    /*
     * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
     * \* `off-topic`
     * \* `too heated`
     * \* `resolved`
     * \* `spam`
     */
    lock_reason?: "off-topic" | "too heated" | "resolved" | "spam";
  } | null;
  pathParams: IssuesLockPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with push access can lock an issue or pull request's conversation.
 *
 * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const fetchIssuesLock = (variables: IssuesLockVariables) =>
  githubFetch<
    undefined,
    {
      /*
       * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
       * \* `off-topic`
       * \* `too heated`
       * \* `resolved`
       * \* `spam`
       */
      lock_reason?: "off-topic" | "too heated" | "resolved" | "spam";
    } | null,
    {},
    {},
    IssuesLockPathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/lock",
    method: "put",
    ...variables,
  });

/**
 * Users with push access can lock an issue or pull request's conversation.
 *
 * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const useIssuesLock = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.Gone
      | Responses.ValidationFailed,
      IssuesLockVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.Gone
    | Responses.ValidationFailed,
    IssuesLockVariables
  >(
    (variables: IssuesLockVariables) =>
      fetchIssuesLock({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReactionsListForIssuePathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type ReactionsListForIssueQueryParams = {
  /*
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForIssueResponse = Schemas.Reaction[];

export type ReactionsListForIssueVariables = {
  pathParams: ReactionsListForIssuePathParams;
  queryParams?: ReactionsListForIssueQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the reactions to an [issue](https://docs.github.com/rest/reference/issues).
 */
export const fetchReactionsListForIssue = (
  variables: ReactionsListForIssueVariables
) =>
  githubFetch<
    ReactionsListForIssueResponse,
    undefined,
    {},
    ReactionsListForIssueQueryParams,
    ReactionsListForIssuePathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/reactions",
    method: "get",
    ...variables,
  });

/**
 * List the reactions to an [issue](https://docs.github.com/rest/reference/issues).
 */
export const useReactionsListForIssue = (
  variables: ReactionsListForIssueVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForIssueResponse,
      Responses.NotFound | Responses.Gone | Responses.PreviewHeaderMissing,
      ReactionsListForIssueResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForIssueResponse,
    Responses.NotFound | Responses.Gone | Responses.PreviewHeaderMissing,
    ReactionsListForIssueResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/issues/{issue_number}/reactions",
      operationId: "reactionsListForIssue",
      variables,
    }),
    () => fetchReactionsListForIssue({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReactionsCreateForIssuePathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type ReactionsCreateForIssueRequestBody = {
  /*
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
};

export type ReactionsCreateForIssueVariables = {
  body: ReactionsCreateForIssueRequestBody;
  pathParams: ReactionsCreateForIssuePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with a `Status: 200 OK` means that you already added the reaction type to this issue.
 */
export const fetchReactionsCreateForIssue = (
  variables: ReactionsCreateForIssueVariables
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForIssueRequestBody,
    {},
    {},
    ReactionsCreateForIssuePathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/reactions",
    method: "post",
    ...variables,
  });

/**
 * Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with a `Status: 200 OK` means that you already added the reaction type to this issue.
 */
export const useReactionsCreateForIssue = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      Responses.PreviewHeaderMissing | Responses.ValidationFailed,
      ReactionsCreateForIssueVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    Responses.PreviewHeaderMissing | Responses.ValidationFailed,
    ReactionsCreateForIssueVariables
  >(
    (variables: ReactionsCreateForIssueVariables) =>
      fetchReactionsCreateForIssue({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReactionsDeleteForIssuePathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
  reactionId: number;
};

export type ReactionsDeleteForIssueVariables = {
  pathParams: ReactionsDeleteForIssuePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
 *
 * Delete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).
 */
export const fetchReactionsDeleteForIssue = (
  variables: ReactionsDeleteForIssueVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ReactionsDeleteForIssuePathParams>({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/reactions/{reactionId}",
    method: "delete",
    ...variables,
  });

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
 *
 * Delete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).
 */
export const useReactionsDeleteForIssue = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ReactionsDeleteForIssueVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ReactionsDeleteForIssueVariables
  >(
    (variables: ReactionsDeleteForIssueVariables) =>
      fetchReactionsDeleteForIssue({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesListEventsForTimelinePathParams = {
  owner: string;
  repo: string;
  /*
   * issue_number parameter
   */
  issueNumber: number;
};

export type IssuesListEventsForTimelineQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListEventsForTimelineResponse = Schemas.IssueEventForIssue[];

export type IssuesListEventsForTimelineVariables = {
  pathParams: IssuesListEventsForTimelinePathParams;
  queryParams?: IssuesListEventsForTimelineQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesListEventsForTimeline = (
  variables: IssuesListEventsForTimelineVariables
) =>
  githubFetch<
    IssuesListEventsForTimelineResponse,
    undefined,
    {},
    IssuesListEventsForTimelineQueryParams,
    IssuesListEventsForTimelinePathParams
  >({
    url: "/repos/{owner}/{repo}/issues/{issueNumber}/timeline",
    method: "get",
    ...variables,
  });

export const useIssuesListEventsForTimeline = (
  variables: IssuesListEventsForTimelineVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListEventsForTimelineResponse,
      Responses.NotFound | Responses.Gone | Responses.PreviewHeaderMissing,
      IssuesListEventsForTimelineResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListEventsForTimelineResponse,
    Responses.NotFound | Responses.Gone | Responses.PreviewHeaderMissing,
    IssuesListEventsForTimelineResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/issues/{issue_number}/timeline",
      operationId: "issuesListEventsForTimeline",
      variables,
    }),
    () => fetchIssuesListEventsForTimeline({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListDeployKeysPathParams = {
  owner: string;
  repo: string;
};

export type ReposListDeployKeysQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListDeployKeysResponse = Schemas.DeployKey[];

export type ReposListDeployKeysVariables = {
  pathParams: ReposListDeployKeysPathParams;
  queryParams?: ReposListDeployKeysQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposListDeployKeys = (
  variables: ReposListDeployKeysVariables
) =>
  githubFetch<
    ReposListDeployKeysResponse,
    undefined,
    {},
    ReposListDeployKeysQueryParams,
    ReposListDeployKeysPathParams
  >({ url: "/repos/{owner}/{repo}/keys", method: "get", ...variables });

export const useReposListDeployKeys = (
  variables: ReposListDeployKeysVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListDeployKeysResponse,
      undefined,
      ReposListDeployKeysResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListDeployKeysResponse,
    undefined,
    ReposListDeployKeysResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/keys",
      operationId: "reposListDeployKeys",
      variables,
    }),
    () => fetchReposListDeployKeys({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateDeployKeyPathParams = {
  owner: string;
  repo: string;
};

export type ReposCreateDeployKeyRequestBody = {
  /*
   * The contents of the key.
   */
  key: string;
  /*
   * If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.
   *
   * Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://help.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://help.github.com/articles/permission-levels-for-a-user-account-repository/)."
   */
  read_only?: boolean;
  /*
   * A name for the key.
   */
  title?: string;
};

export type ReposCreateDeployKeyVariables = {
  body: ReposCreateDeployKeyRequestBody;
  pathParams: ReposCreateDeployKeyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * You can create a read-only deploy key.
 */
export const fetchReposCreateDeployKey = (
  variables: ReposCreateDeployKeyVariables
) =>
  githubFetch<
    Schemas.DeployKey,
    ReposCreateDeployKeyRequestBody,
    {},
    {},
    ReposCreateDeployKeyPathParams
  >({ url: "/repos/{owner}/{repo}/keys", method: "post", ...variables });

/**
 * You can create a read-only deploy key.
 */
export const useReposCreateDeployKey = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.DeployKey,
      Responses.ValidationFailed,
      ReposCreateDeployKeyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.DeployKey,
    Responses.ValidationFailed,
    ReposCreateDeployKeyVariables
  >(
    (variables: ReposCreateDeployKeyVariables) =>
      fetchReposCreateDeployKey({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposDeleteDeployKeyPathParams = {
  owner: string;
  repo: string;
  /*
   * key_id parameter
   */
  keyId: number;
};

export type ReposDeleteDeployKeyVariables = {
  pathParams: ReposDeleteDeployKeyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
 */
export const fetchReposDeleteDeployKey = (
  variables: ReposDeleteDeployKeyVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ReposDeleteDeployKeyPathParams>({
    url: "/repos/{owner}/{repo}/keys/{keyId}",
    method: "delete",
    ...variables,
  });

/**
 * Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
 */
export const useReposDeleteDeployKey = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ReposDeleteDeployKeyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ReposDeleteDeployKeyVariables
  >(
    (variables: ReposDeleteDeployKeyVariables) =>
      fetchReposDeleteDeployKey({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetDeployKeyPathParams = {
  owner: string;
  repo: string;
  /*
   * key_id parameter
   */
  keyId: number;
};

export type ReposGetDeployKeyVariables = {
  pathParams: ReposGetDeployKeyPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposGetDeployKey = (variables: ReposGetDeployKeyVariables) =>
  githubFetch<
    Schemas.DeployKey,
    undefined,
    {},
    {},
    ReposGetDeployKeyPathParams
  >({ url: "/repos/{owner}/{repo}/keys/{keyId}", method: "get", ...variables });

export const useReposGetDeployKey = (
  variables: ReposGetDeployKeyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DeployKey,
      Responses.NotFound,
      Schemas.DeployKey
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.DeployKey,
    Responses.NotFound,
    Schemas.DeployKey
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/keys/{key_id}",
      operationId: "reposGetDeployKey",
      variables,
    }),
    () => fetchReposGetDeployKey({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesListLabelsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type IssuesListLabelsForRepoQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListLabelsForRepoResponse = Schemas.Label[];

export type IssuesListLabelsForRepoVariables = {
  pathParams: IssuesListLabelsForRepoPathParams;
  queryParams?: IssuesListLabelsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesListLabelsForRepo = (
  variables: IssuesListLabelsForRepoVariables
) =>
  githubFetch<
    IssuesListLabelsForRepoResponse,
    undefined,
    {},
    IssuesListLabelsForRepoQueryParams,
    IssuesListLabelsForRepoPathParams
  >({ url: "/repos/{owner}/{repo}/labels", method: "get", ...variables });

export const useIssuesListLabelsForRepo = (
  variables: IssuesListLabelsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListLabelsForRepoResponse,
      Responses.NotFound,
      IssuesListLabelsForRepoResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListLabelsForRepoResponse,
    Responses.NotFound,
    IssuesListLabelsForRepoResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/labels",
      operationId: "issuesListLabelsForRepo",
      variables,
    }),
    () => fetchIssuesListLabelsForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesCreateLabelPathParams = {
  owner: string;
  repo: string;
};

export type IssuesCreateLabelRequestBody = {
  /*
   * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
   */
  color?: string;
  /*
   * A short description of the label.
   */
  description?: string;
  /*
   * The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/).
   */
  name: string;
};

export type IssuesCreateLabelVariables = {
  body: IssuesCreateLabelRequestBody;
  pathParams: IssuesCreateLabelPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesCreateLabel = (variables: IssuesCreateLabelVariables) =>
  githubFetch<
    Schemas.Label,
    IssuesCreateLabelRequestBody,
    {},
    {},
    IssuesCreateLabelPathParams
  >({ url: "/repos/{owner}/{repo}/labels", method: "post", ...variables });

export const useIssuesCreateLabel = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Label,
      Responses.NotFound | Responses.ValidationFailed,
      IssuesCreateLabelVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Label,
    Responses.NotFound | Responses.ValidationFailed,
    IssuesCreateLabelVariables
  >(
    (variables: IssuesCreateLabelVariables) =>
      fetchIssuesCreateLabel({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesDeleteLabelPathParams = {
  owner: string;
  repo: string;
  name: string;
};

export type IssuesDeleteLabelVariables = {
  pathParams: IssuesDeleteLabelPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesDeleteLabel = (variables: IssuesDeleteLabelVariables) =>
  githubFetch<undefined, undefined, {}, {}, IssuesDeleteLabelPathParams>({
    url: "/repos/{owner}/{repo}/labels/{name}",
    method: "delete",
    ...variables,
  });

export const useIssuesDeleteLabel = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      IssuesDeleteLabelVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    IssuesDeleteLabelVariables
  >(
    (variables: IssuesDeleteLabelVariables) =>
      fetchIssuesDeleteLabel({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesGetLabelPathParams = {
  owner: string;
  repo: string;
  name: string;
};

export type IssuesGetLabelVariables = {
  pathParams: IssuesGetLabelPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesGetLabel = (variables: IssuesGetLabelVariables) =>
  githubFetch<Schemas.Label, undefined, {}, {}, IssuesGetLabelPathParams>({
    url: "/repos/{owner}/{repo}/labels/{name}",
    method: "get",
    ...variables,
  });

export const useIssuesGetLabel = (
  variables: IssuesGetLabelVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Label,
      Responses.NotFound,
      Schemas.Label
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Label, Responses.NotFound, Schemas.Label>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/labels/{name}",
      operationId: "issuesGetLabel",
      variables,
    }),
    () => fetchIssuesGetLabel({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesUpdateLabelPathParams = {
  owner: string;
  repo: string;
  name: string;
};

export type IssuesUpdateLabelRequestBody = {
  /*
   * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
   */
  color?: string;
  /*
   * A short description of the label.
   */
  description?: string;
  /*
   * The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/).
   */
  new_name?: string;
};

export type IssuesUpdateLabelVariables = {
  body?: IssuesUpdateLabelRequestBody;
  pathParams: IssuesUpdateLabelPathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesUpdateLabel = (variables: IssuesUpdateLabelVariables) =>
  githubFetch<
    Schemas.Label,
    IssuesUpdateLabelRequestBody,
    {},
    {},
    IssuesUpdateLabelPathParams
  >({
    url: "/repos/{owner}/{repo}/labels/{name}",
    method: "patch",
    ...variables,
  });

export const useIssuesUpdateLabel = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Label,
      undefined,
      IssuesUpdateLabelVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Label,
    undefined,
    IssuesUpdateLabelVariables
  >(
    (variables: IssuesUpdateLabelVariables) =>
      fetchIssuesUpdateLabel({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposListLanguagesPathParams = {
  owner: string;
  repo: string;
};

export type ReposListLanguagesVariables = {
  pathParams: ReposListLanguagesPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
 */
export const fetchReposListLanguages = (
  variables: ReposListLanguagesVariables
) =>
  githubFetch<
    Schemas.Language,
    undefined,
    {},
    {},
    ReposListLanguagesPathParams
  >({ url: "/repos/{owner}/{repo}/languages", method: "get", ...variables });

/**
 * Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
 */
export const useReposListLanguages = (
  variables: ReposListLanguagesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Language, undefined, Schemas.Language>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Language, undefined, Schemas.Language>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/languages",
      operationId: "reposListLanguages",
      variables,
    }),
    () => fetchReposListLanguages({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type LicensesGetForRepoPathParams = {
  owner: string;
  repo: string;
};

export type LicensesGetForRepoVariables = {
  pathParams: LicensesGetForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This method returns the contents of the repository's license file, if one is detected.
 *
 * Similar to [Get repository content](https://docs.github.com/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
 */
export const fetchLicensesGetForRepo = (
  variables: LicensesGetForRepoVariables
) =>
  githubFetch<
    Schemas.LicenseContent,
    undefined,
    {},
    {},
    LicensesGetForRepoPathParams
  >({ url: "/repos/{owner}/{repo}/license", method: "get", ...variables });

/**
 * This method returns the contents of the repository's license file, if one is detected.
 *
 * Similar to [Get repository content](https://docs.github.com/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
 */
export const useLicensesGetForRepo = (
  variables: LicensesGetForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.LicenseContent,
      undefined,
      Schemas.LicenseContent
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.LicenseContent,
    undefined,
    Schemas.LicenseContent
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/license",
      operationId: "licensesGetForRepo",
      variables,
    }),
    () => fetchLicensesGetForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposMergePathParams = {
  owner: string;
  repo: string;
};

export type ReposMergeRequestBody = {
  /*
   * The name of the base branch that the head will be merged into.
   */
  base: string;
  /*
   * Commit message to use for the merge commit. If omitted, a default message will be used.
   */
  commit_message?: string;
  /*
   * The head to merge. This can be a branch name or a commit SHA1.
   */
  head: string;
};

export type ReposMergeVariables = {
  body: ReposMergeRequestBody;
  pathParams: ReposMergePathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposMerge = (variables: ReposMergeVariables) =>
  githubFetch<
    Schemas.Commit,
    ReposMergeRequestBody,
    {},
    {},
    ReposMergePathParams
  >({ url: "/repos/{owner}/{repo}/merges", method: "post", ...variables });

export const useReposMerge = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Commit,
      | Responses.Forbidden
      | {
          /*
           * @example "https://docs.github.com/rest/reference/repos#perform-a-merge"
           */
          documentation_url?: string;
          message?: string;
        }
      | Responses.ValidationFailed,
      ReposMergeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Commit,
    | Responses.Forbidden
    | {
        /*
         * @example "https://docs.github.com/rest/reference/repos#perform-a-merge"
         */
        documentation_url?: string;
        message?: string;
      }
    | Responses.ValidationFailed,
    ReposMergeVariables
  >(
    (variables: ReposMergeVariables) =>
      fetchReposMerge({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesListMilestonesPathParams = {
  owner: string;
  repo: string;
};

export type IssuesListMilestonesQueryParams = {
  /*
   * The state of the milestone. Either `open`, `closed`, or `all`.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /*
   * What to sort results by. Either `due_on` or `completeness`.
   *
   * @default due_on
   */
  sort?: "due_on" | "completeness";
  /*
   * The direction of the sort. Either `asc` or `desc`.
   *
   * @default asc
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListMilestonesResponse = Schemas.Milestone[];

export type IssuesListMilestonesVariables = {
  pathParams: IssuesListMilestonesPathParams;
  queryParams?: IssuesListMilestonesQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesListMilestones = (
  variables: IssuesListMilestonesVariables
) =>
  githubFetch<
    IssuesListMilestonesResponse,
    undefined,
    {},
    IssuesListMilestonesQueryParams,
    IssuesListMilestonesPathParams
  >({ url: "/repos/{owner}/{repo}/milestones", method: "get", ...variables });

export const useIssuesListMilestones = (
  variables: IssuesListMilestonesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListMilestonesResponse,
      Responses.NotFound,
      IssuesListMilestonesResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListMilestonesResponse,
    Responses.NotFound,
    IssuesListMilestonesResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/milestones",
      operationId: "issuesListMilestones",
      variables,
    }),
    () => fetchIssuesListMilestones({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesCreateMilestonePathParams = {
  owner: string;
  repo: string;
};

export type IssuesCreateMilestoneRequestBody = {
  /*
   * A description of the milestone.
   */
  description?: string;
  /*
   * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  due_on?: string;
  /*
   * The state of the milestone. Either `open` or `closed`.
   *
   * @default open
   */
  state?: "open" | "closed";
  /*
   * The title of the milestone.
   */
  title: string;
};

export type IssuesCreateMilestoneVariables = {
  body: IssuesCreateMilestoneRequestBody;
  pathParams: IssuesCreateMilestonePathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesCreateMilestone = (
  variables: IssuesCreateMilestoneVariables
) =>
  githubFetch<
    Schemas.Milestone,
    IssuesCreateMilestoneRequestBody,
    {},
    {},
    IssuesCreateMilestonePathParams
  >({ url: "/repos/{owner}/{repo}/milestones", method: "post", ...variables });

export const useIssuesCreateMilestone = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Milestone,
      Responses.NotFound | Responses.ValidationFailed,
      IssuesCreateMilestoneVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Milestone,
    Responses.NotFound | Responses.ValidationFailed,
    IssuesCreateMilestoneVariables
  >(
    (variables: IssuesCreateMilestoneVariables) =>
      fetchIssuesCreateMilestone({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesDeleteMilestonePathParams = {
  owner: string;
  repo: string;
  /*
   * milestone_number parameter
   */
  milestoneNumber: number;
};

export type IssuesDeleteMilestoneVariables = {
  pathParams: IssuesDeleteMilestonePathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesDeleteMilestone = (
  variables: IssuesDeleteMilestoneVariables
) =>
  githubFetch<undefined, undefined, {}, {}, IssuesDeleteMilestonePathParams>({
    url: "/repos/{owner}/{repo}/milestones/{milestoneNumber}",
    method: "delete",
    ...variables,
  });

export const useIssuesDeleteMilestone = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotFound,
      IssuesDeleteMilestoneVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotFound,
    IssuesDeleteMilestoneVariables
  >(
    (variables: IssuesDeleteMilestoneVariables) =>
      fetchIssuesDeleteMilestone({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesGetMilestonePathParams = {
  owner: string;
  repo: string;
  /*
   * milestone_number parameter
   */
  milestoneNumber: number;
};

export type IssuesGetMilestoneVariables = {
  pathParams: IssuesGetMilestonePathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesGetMilestone = (
  variables: IssuesGetMilestoneVariables
) =>
  githubFetch<
    Schemas.Milestone,
    undefined,
    {},
    {},
    IssuesGetMilestonePathParams
  >({
    url: "/repos/{owner}/{repo}/milestones/{milestoneNumber}",
    method: "get",
    ...variables,
  });

export const useIssuesGetMilestone = (
  variables: IssuesGetMilestoneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Milestone,
      Responses.NotFound,
      Schemas.Milestone
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Milestone,
    Responses.NotFound,
    Schemas.Milestone
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/milestones/{milestone_number}",
      operationId: "issuesGetMilestone",
      variables,
    }),
    () => fetchIssuesGetMilestone({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type IssuesUpdateMilestonePathParams = {
  owner: string;
  repo: string;
  /*
   * milestone_number parameter
   */
  milestoneNumber: number;
};

export type IssuesUpdateMilestoneRequestBody = {
  /*
   * A description of the milestone.
   */
  description?: string;
  /*
   * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  due_on?: string;
  /*
   * The state of the milestone. Either `open` or `closed`.
   *
   * @default open
   */
  state?: "open" | "closed";
  /*
   * The title of the milestone.
   */
  title?: string;
};

export type IssuesUpdateMilestoneVariables = {
  body?: IssuesUpdateMilestoneRequestBody;
  pathParams: IssuesUpdateMilestonePathParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesUpdateMilestone = (
  variables: IssuesUpdateMilestoneVariables
) =>
  githubFetch<
    Schemas.Milestone,
    IssuesUpdateMilestoneRequestBody,
    {},
    {},
    IssuesUpdateMilestonePathParams
  >({
    url: "/repos/{owner}/{repo}/milestones/{milestoneNumber}",
    method: "patch",
    ...variables,
  });

export const useIssuesUpdateMilestone = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Milestone,
      undefined,
      IssuesUpdateMilestoneVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Milestone,
    undefined,
    IssuesUpdateMilestoneVariables
  >(
    (variables: IssuesUpdateMilestoneVariables) =>
      fetchIssuesUpdateMilestone({ ...fetcherOptions, ...variables }),
    options
  );
};

export type IssuesListLabelsForMilestonePathParams = {
  owner: string;
  repo: string;
  /*
   * milestone_number parameter
   */
  milestoneNumber: number;
};

export type IssuesListLabelsForMilestoneQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListLabelsForMilestoneResponse = Schemas.Label[];

export type IssuesListLabelsForMilestoneVariables = {
  pathParams: IssuesListLabelsForMilestonePathParams;
  queryParams?: IssuesListLabelsForMilestoneQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchIssuesListLabelsForMilestone = (
  variables: IssuesListLabelsForMilestoneVariables
) =>
  githubFetch<
    IssuesListLabelsForMilestoneResponse,
    undefined,
    {},
    IssuesListLabelsForMilestoneQueryParams,
    IssuesListLabelsForMilestonePathParams
  >({
    url: "/repos/{owner}/{repo}/milestones/{milestoneNumber}/labels",
    method: "get",
    ...variables,
  });

export const useIssuesListLabelsForMilestone = (
  variables: IssuesListLabelsForMilestoneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListLabelsForMilestoneResponse,
      undefined,
      IssuesListLabelsForMilestoneResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListLabelsForMilestoneResponse,
    undefined,
    IssuesListLabelsForMilestoneResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/milestones/{milestone_number}/labels",
      operationId: "issuesListLabelsForMilestone",
      variables,
    }),
    () =>
      fetchIssuesListLabelsForMilestone({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityListRepoNotificationsForAuthenticatedUserPathParams = {
  owner: string;
  repo: string;
};

export type ActivityListRepoNotificationsForAuthenticatedUserQueryParams = {
  /*
   * If `true`, show notifications marked as read.
   *
   * @default false
   */
  all?: boolean;
  /*
   * If `true`, only shows notifications in which the user is directly participating or mentioned.
   *
   * @default false
   */
  participating?: boolean;
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  before?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListRepoNotificationsForAuthenticatedUserResponse =
  Schemas.Thread[];

export type ActivityListRepoNotificationsForAuthenticatedUserVariables = {
  pathParams: ActivityListRepoNotificationsForAuthenticatedUserPathParams;
  queryParams?: ActivityListRepoNotificationsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all notifications for the current user.
 */
export const fetchActivityListRepoNotificationsForAuthenticatedUser = (
  variables: ActivityListRepoNotificationsForAuthenticatedUserVariables
) =>
  githubFetch<
    ActivityListRepoNotificationsForAuthenticatedUserResponse,
    undefined,
    {},
    ActivityListRepoNotificationsForAuthenticatedUserQueryParams,
    ActivityListRepoNotificationsForAuthenticatedUserPathParams
  >({
    url: "/repos/{owner}/{repo}/notifications",
    method: "get",
    ...variables,
  });

/**
 * List all notifications for the current user.
 */
export const useActivityListRepoNotificationsForAuthenticatedUser = (
  variables: ActivityListRepoNotificationsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListRepoNotificationsForAuthenticatedUserResponse,
      undefined,
      ActivityListRepoNotificationsForAuthenticatedUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListRepoNotificationsForAuthenticatedUserResponse,
    undefined,
    ActivityListRepoNotificationsForAuthenticatedUserResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/notifications",
      operationId: "activityListRepoNotificationsForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchActivityListRepoNotificationsForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityMarkRepoNotificationsAsReadPathParams = {
  owner: string;
  repo: string;
};

export type ActivityMarkRepoNotificationsAsReadRequestBody = {
  /*
   * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
   */
  last_read_at?: string;
};

export type ActivityMarkRepoNotificationsAsReadVariables = {
  body?: ActivityMarkRepoNotificationsAsReadRequestBody;
  pathParams: ActivityMarkRepoNotificationsAsReadPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Marks all notifications in a repository as "read" removes them from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
 */
export const fetchActivityMarkRepoNotificationsAsRead = (
  variables: ActivityMarkRepoNotificationsAsReadVariables
) =>
  githubFetch<
    undefined,
    ActivityMarkRepoNotificationsAsReadRequestBody,
    {},
    {},
    ActivityMarkRepoNotificationsAsReadPathParams
  >({
    url: "/repos/{owner}/{repo}/notifications",
    method: "put",
    ...variables,
  });

/**
 * Marks all notifications in a repository as "read" removes them from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
 */
export const useActivityMarkRepoNotificationsAsRead = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActivityMarkRepoNotificationsAsReadVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActivityMarkRepoNotificationsAsReadVariables
  >(
    (variables: ActivityMarkRepoNotificationsAsReadVariables) =>
      fetchActivityMarkRepoNotificationsAsRead({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposDeletePagesSitePathParams = {
  owner: string;
  repo: string;
};

export type ReposDeletePagesSiteVariables = {
  pathParams: ReposDeletePagesSitePathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposDeletePagesSite = (
  variables: ReposDeletePagesSiteVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ReposDeletePagesSitePathParams>({
    url: "/repos/{owner}/{repo}/pages",
    method: "delete",
    ...variables,
  });

export const useReposDeletePagesSite = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotFound
      | Responses.PreviewHeaderMissing
      | Responses.ValidationFailed,
      ReposDeletePagesSiteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotFound
    | Responses.PreviewHeaderMissing
    | Responses.ValidationFailed,
    ReposDeletePagesSiteVariables
  >(
    (variables: ReposDeletePagesSiteVariables) =>
      fetchReposDeletePagesSite({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetPagesPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetPagesVariables = {
  pathParams: ReposGetPagesPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposGetPages = (variables: ReposGetPagesVariables) =>
  githubFetch<Schemas.Page, undefined, {}, {}, ReposGetPagesPathParams>({
    url: "/repos/{owner}/{repo}/pages",
    method: "get",
    ...variables,
  });

export const useReposGetPages = (
  variables: ReposGetPagesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Page, Responses.NotFound, Schemas.Page>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Page, Responses.NotFound, Schemas.Page>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pages",
      operationId: "reposGetPages",
      variables,
    }),
    () => fetchReposGetPages({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreatePagesSitePathParams = {
  owner: string;
  repo: string;
};

export type ReposCreatePagesSiteRequestBody = {
  /*
   * The source branch and directory used to publish your Pages site.
   */
  source: {
    /*
     * The repository branch used to publish your site's source files.
     */
    branch: string;
    /*
     * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
     *
     * @default /
     */
    path?: "/" | "/docs";
  };
};

export type ReposCreatePagesSiteVariables = {
  body: ReposCreatePagesSiteRequestBody;
  pathParams: ReposCreatePagesSitePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."
 */
export const fetchReposCreatePagesSite = (
  variables: ReposCreatePagesSiteVariables
) =>
  githubFetch<
    Schemas.Page,
    ReposCreatePagesSiteRequestBody,
    {},
    {},
    ReposCreatePagesSitePathParams
  >({ url: "/repos/{owner}/{repo}/pages", method: "post", ...variables });

/**
 * Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."
 */
export const useReposCreatePagesSite = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Page,
      | Responses.Conflict
      | Responses.PreviewHeaderMissing
      | Responses.ValidationFailed,
      ReposCreatePagesSiteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Page,
    | Responses.Conflict
    | Responses.PreviewHeaderMissing
    | Responses.ValidationFailed,
    ReposCreatePagesSiteVariables
  >(
    (variables: ReposCreatePagesSiteVariables) =>
      fetchReposCreatePagesSite({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposUpdateInformationAboutPagesSitePathParams = {
  owner: string;
  repo: string;
};

export type ReposUpdateInformationAboutPagesSiteRequestBody = {
  /*
   * Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://help.github.com/articles/using-a-custom-domain-with-github-pages/)."
   */
  cname?: string | null;
  /*
   * Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan.
   */
  public?: boolean;
  source:
    | ("gh-pages" | "master" | "master /docs")
    | {
        /*
         * The repository branch used to publish your site's source files.
         */
        branch: string;
        /*
         * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
         */
        path: "/" | "/docs";
      };
};

export type ReposUpdateInformationAboutPagesSiteVariables = {
  body: ReposUpdateInformationAboutPagesSiteRequestBody;
  pathParams: ReposUpdateInformationAboutPagesSitePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
 */
export const fetchReposUpdateInformationAboutPagesSite = (
  variables: ReposUpdateInformationAboutPagesSiteVariables
) =>
  githubFetch<
    undefined,
    ReposUpdateInformationAboutPagesSiteRequestBody,
    {},
    {},
    ReposUpdateInformationAboutPagesSitePathParams
  >({ url: "/repos/{owner}/{repo}/pages", method: "put", ...variables });

/**
 * Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
 */
export const useReposUpdateInformationAboutPagesSite = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.BadRequest | Responses.ValidationFailed,
      ReposUpdateInformationAboutPagesSiteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.BadRequest | Responses.ValidationFailed,
    ReposUpdateInformationAboutPagesSiteVariables
  >(
    (variables: ReposUpdateInformationAboutPagesSiteVariables) =>
      fetchReposUpdateInformationAboutPagesSite({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReposListPagesBuildsPathParams = {
  owner: string;
  repo: string;
};

export type ReposListPagesBuildsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListPagesBuildsResponse = Schemas.PageBuild[];

export type ReposListPagesBuildsVariables = {
  pathParams: ReposListPagesBuildsPathParams;
  queryParams?: ReposListPagesBuildsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposListPagesBuilds = (
  variables: ReposListPagesBuildsVariables
) =>
  githubFetch<
    ReposListPagesBuildsResponse,
    undefined,
    {},
    ReposListPagesBuildsQueryParams,
    ReposListPagesBuildsPathParams
  >({ url: "/repos/{owner}/{repo}/pages/builds", method: "get", ...variables });

export const useReposListPagesBuilds = (
  variables: ReposListPagesBuildsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListPagesBuildsResponse,
      undefined,
      ReposListPagesBuildsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListPagesBuildsResponse,
    undefined,
    ReposListPagesBuildsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pages/builds",
      operationId: "reposListPagesBuilds",
      variables,
    }),
    () => fetchReposListPagesBuilds({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposRequestPagesBuildPathParams = {
  owner: string;
  repo: string;
};

export type ReposRequestPagesBuildVariables = {
  pathParams: ReposRequestPagesBuildPathParams;
} & GithubContext["fetcherOptions"];

/**
 * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
 *
 * Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
 */
export const fetchReposRequestPagesBuild = (
  variables: ReposRequestPagesBuildVariables
) =>
  githubFetch<
    Schemas.PageBuildStatus,
    undefined,
    {},
    {},
    ReposRequestPagesBuildPathParams
  >({
    url: "/repos/{owner}/{repo}/pages/builds",
    method: "post",
    ...variables,
  });

/**
 * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
 *
 * Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
 */
export const useReposRequestPagesBuild = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PageBuildStatus,
      undefined,
      ReposRequestPagesBuildVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PageBuildStatus,
    undefined,
    ReposRequestPagesBuildVariables
  >(
    (variables: ReposRequestPagesBuildVariables) =>
      fetchReposRequestPagesBuild({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetLatestPagesBuildPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetLatestPagesBuildVariables = {
  pathParams: ReposGetLatestPagesBuildPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposGetLatestPagesBuild = (
  variables: ReposGetLatestPagesBuildVariables
) =>
  githubFetch<
    Schemas.PageBuild,
    undefined,
    {},
    {},
    ReposGetLatestPagesBuildPathParams
  >({
    url: "/repos/{owner}/{repo}/pages/builds/latest",
    method: "get",
    ...variables,
  });

export const useReposGetLatestPagesBuild = (
  variables: ReposGetLatestPagesBuildVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PageBuild, undefined, Schemas.PageBuild>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.PageBuild, undefined, Schemas.PageBuild>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pages/builds/latest",
      operationId: "reposGetLatestPagesBuild",
      variables,
    }),
    () => fetchReposGetLatestPagesBuild({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetPagesBuildPathParams = {
  owner: string;
  repo: string;
  buildId: number;
};

export type ReposGetPagesBuildVariables = {
  pathParams: ReposGetPagesBuildPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposGetPagesBuild = (
  variables: ReposGetPagesBuildVariables
) =>
  githubFetch<
    Schemas.PageBuild,
    undefined,
    {},
    {},
    ReposGetPagesBuildPathParams
  >({
    url: "/repos/{owner}/{repo}/pages/builds/{buildId}",
    method: "get",
    ...variables,
  });

export const useReposGetPagesBuild = (
  variables: ReposGetPagesBuildVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PageBuild, undefined, Schemas.PageBuild>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.PageBuild, undefined, Schemas.PageBuild>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pages/builds/{build_id}",
      operationId: "reposGetPagesBuild",
      variables,
    }),
    () => fetchReposGetPagesBuild({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectsListForRepoPathParams = {
  owner: string;
  repo: string;
};

export type ProjectsListForRepoQueryParams = {
  /*
   * Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ProjectsListForRepoResponse = Schemas.Project[];

export type ProjectsListForRepoVariables = {
  pathParams: ProjectsListForRepoPathParams;
  queryParams?: ProjectsListForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const fetchProjectsListForRepo = (
  variables: ProjectsListForRepoVariables
) =>
  githubFetch<
    ProjectsListForRepoResponse,
    undefined,
    {},
    ProjectsListForRepoQueryParams,
    ProjectsListForRepoPathParams
  >({ url: "/repos/{owner}/{repo}/projects", method: "get", ...variables });

/**
 * Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const useProjectsListForRepo = (
  variables: ProjectsListForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectsListForRepoResponse,
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.Gone
      | Responses.ValidationFailedSimple,
      ProjectsListForRepoResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ProjectsListForRepoResponse,
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.Gone
    | Responses.ValidationFailedSimple,
    ProjectsListForRepoResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/projects",
      operationId: "projectsListForRepo",
      variables,
    }),
    () => fetchProjectsListForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectsCreateForRepoPathParams = {
  owner: string;
  repo: string;
};

export type ProjectsCreateForRepoRequestBody = {
  /*
   * The description of the project.
   */
  body?: string;
  /*
   * The name of the project.
   */
  name: string;
};

export type ProjectsCreateForRepoVariables = {
  body: ProjectsCreateForRepoRequestBody;
  pathParams: ProjectsCreateForRepoPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a repository project board. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const fetchProjectsCreateForRepo = (
  variables: ProjectsCreateForRepoVariables
) =>
  githubFetch<
    Schemas.Project,
    ProjectsCreateForRepoRequestBody,
    {},
    {},
    ProjectsCreateForRepoPathParams
  >({ url: "/repos/{owner}/{repo}/projects", method: "post", ...variables });

/**
 * Creates a repository project board. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const useProjectsCreateForRepo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Project,
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.Gone
      | Responses.ValidationFailedSimple,
      ProjectsCreateForRepoVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Project,
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.Gone
    | Responses.ValidationFailedSimple,
    ProjectsCreateForRepoVariables
  >(
    (variables: ProjectsCreateForRepoVariables) =>
      fetchProjectsCreateForRepo({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsListPathParams = {
  owner: string;
  repo: string;
};

export type PullsListQueryParams = {
  /*
   * Either `open`, `closed`, or `all` to filter by state.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /*
   * Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.
   */
  head?: string;
  /*
   * Filter pulls by base branch name. Example: `gh-pages`.
   */
  base?: string;
  /*
   * What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month).
   *
   * @default created
   */
  sort?: "created" | "updated" | "popularity" | "long-running";
  /*
   * The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type PullsListResponse = Schemas.PullRequestSimple[];

export type PullsListVariables = {
  pathParams: PullsListPathParams;
  queryParams?: PullsListQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const fetchPullsList = (variables: PullsListVariables) =>
  githubFetch<
    PullsListResponse,
    undefined,
    {},
    PullsListQueryParams,
    PullsListPathParams
  >({ url: "/repos/{owner}/{repo}/pulls", method: "get", ...variables });

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const usePullsList = (
  variables: PullsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListResponse,
      Responses.NotModified | Responses.ValidationFailed,
      PullsListResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    PullsListResponse,
    Responses.NotModified | Responses.ValidationFailed,
    PullsListResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls",
      operationId: "pullsList",
      variables,
    }),
    () => fetchPullsList({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PullsCreatePathParams = {
  owner: string;
  repo: string;
};

export type PullsCreateRequestBody = {
  /*
   * The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
   */
  base: string;
  /*
   * The contents of the pull request.
   */
  body?: string;
  /*
   * Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://help.github.com/en/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more.
   */
  draft?: boolean;
  /*
   * The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.
   */
  head: string;
  /*
   * @example 1
   */
  issue?: number;
  /*
   * Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
   */
  maintainer_can_modify?: boolean;
  /*
   * The title of the new pull request.
   */
  title?: string;
};

export type PullsCreateVariables = {
  body: PullsCreateRequestBody;
  pathParams: PullsCreatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
 *
 * You can create a new pull request.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const fetchPullsCreate = (variables: PullsCreateVariables) =>
  githubFetch<
    Schemas.PullRequest,
    PullsCreateRequestBody,
    {},
    {},
    PullsCreatePathParams
  >({ url: "/repos/{owner}/{repo}/pulls", method: "post", ...variables });

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
 *
 * You can create a new pull request.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const usePullsCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequest,
      Responses.Forbidden | Responses.ValidationFailed,
      PullsCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequest,
    Responses.Forbidden | Responses.ValidationFailed,
    PullsCreateVariables
  >(
    (variables: PullsCreateVariables) =>
      fetchPullsCreate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsListReviewCommentsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type PullsListReviewCommentsForRepoQueryParams = {
  sort?: "created" | "updated" | "created_at";
  /*
   * Can be either `asc` or `desc`. Ignored without `sort` parameter.
   */
  direction?: "asc" | "desc";
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type PullsListReviewCommentsForRepoResponse =
  Schemas.PullRequestReviewComment[];

export type PullsListReviewCommentsForRepoVariables = {
  pathParams: PullsListReviewCommentsForRepoPathParams;
  queryParams?: PullsListReviewCommentsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
 */
export const fetchPullsListReviewCommentsForRepo = (
  variables: PullsListReviewCommentsForRepoVariables
) =>
  githubFetch<
    PullsListReviewCommentsForRepoResponse,
    undefined,
    {},
    PullsListReviewCommentsForRepoQueryParams,
    PullsListReviewCommentsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/comments",
    method: "get",
    ...variables,
  });

/**
 * Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
 */
export const usePullsListReviewCommentsForRepo = (
  variables: PullsListReviewCommentsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListReviewCommentsForRepoResponse,
      undefined,
      PullsListReviewCommentsForRepoResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    PullsListReviewCommentsForRepoResponse,
    undefined,
    PullsListReviewCommentsForRepoResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls/comments",
      operationId: "pullsListReviewCommentsForRepo",
      variables,
    }),
    () =>
      fetchPullsListReviewCommentsForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PullsDeleteReviewCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type PullsDeleteReviewCommentVariables = {
  pathParams: PullsDeleteReviewCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a review comment.
 */
export const fetchPullsDeleteReviewComment = (
  variables: PullsDeleteReviewCommentVariables
) =>
  githubFetch<undefined, undefined, {}, {}, PullsDeleteReviewCommentPathParams>(
    {
      url: "/repos/{owner}/{repo}/pulls/comments/{commentId}",
      method: "delete",
      ...variables,
    }
  );

/**
 * Deletes a review comment.
 */
export const usePullsDeleteReviewComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotFound,
      PullsDeleteReviewCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotFound,
    PullsDeleteReviewCommentVariables
  >(
    (variables: PullsDeleteReviewCommentVariables) =>
      fetchPullsDeleteReviewComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsGetReviewCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type PullsGetReviewCommentVariables = {
  pathParams: PullsGetReviewCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Provides details for a review comment.
 */
export const fetchPullsGetReviewComment = (
  variables: PullsGetReviewCommentVariables
) =>
  githubFetch<
    Schemas.PullRequestReviewComment,
    undefined,
    {},
    {},
    PullsGetReviewCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/comments/{commentId}",
    method: "get",
    ...variables,
  });

/**
 * Provides details for a review comment.
 */
export const usePullsGetReviewComment = (
  variables: PullsGetReviewCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PullRequestReviewComment,
      Responses.NotFound,
      Schemas.PullRequestReviewComment
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PullRequestReviewComment,
    Responses.NotFound,
    Schemas.PullRequestReviewComment
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls/comments/{comment_id}",
      operationId: "pullsGetReviewComment",
      variables,
    }),
    () => fetchPullsGetReviewComment({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PullsUpdateReviewCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type PullsUpdateReviewCommentRequestBody = {
  /*
   * The text of the reply to the review comment.
   */
  body: string;
};

export type PullsUpdateReviewCommentVariables = {
  body: PullsUpdateReviewCommentRequestBody;
  pathParams: PullsUpdateReviewCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables you to edit a review comment.
 */
export const fetchPullsUpdateReviewComment = (
  variables: PullsUpdateReviewCommentVariables
) =>
  githubFetch<
    Schemas.PullRequestReviewComment,
    PullsUpdateReviewCommentRequestBody,
    {},
    {},
    PullsUpdateReviewCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/comments/{commentId}",
    method: "patch",
    ...variables,
  });

/**
 * Enables you to edit a review comment.
 */
export const usePullsUpdateReviewComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestReviewComment,
      undefined,
      PullsUpdateReviewCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestReviewComment,
    undefined,
    PullsUpdateReviewCommentVariables
  >(
    (variables: PullsUpdateReviewCommentVariables) =>
      fetchPullsUpdateReviewComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReactionsListForPullRequestReviewCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type ReactionsListForPullRequestReviewCommentQueryParams = {
  /*
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForPullRequestReviewCommentResponse =
  Schemas.Reaction[];

export type ReactionsListForPullRequestReviewCommentVariables = {
  pathParams: ReactionsListForPullRequestReviewCommentPathParams;
  queryParams?: ReactionsListForPullRequestReviewCommentQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
 */
export const fetchReactionsListForPullRequestReviewComment = (
  variables: ReactionsListForPullRequestReviewCommentVariables
) =>
  githubFetch<
    ReactionsListForPullRequestReviewCommentResponse,
    undefined,
    {},
    ReactionsListForPullRequestReviewCommentQueryParams,
    ReactionsListForPullRequestReviewCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/comments/{commentId}/reactions",
    method: "get",
    ...variables,
  });

/**
 * List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
 */
export const useReactionsListForPullRequestReviewComment = (
  variables: ReactionsListForPullRequestReviewCommentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForPullRequestReviewCommentResponse,
      Responses.NotFound | Responses.PreviewHeaderMissing,
      ReactionsListForPullRequestReviewCommentResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForPullRequestReviewCommentResponse,
    Responses.NotFound | Responses.PreviewHeaderMissing,
    ReactionsListForPullRequestReviewCommentResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
      operationId: "reactionsListForPullRequestReviewComment",
      variables,
    }),
    () =>
      fetchReactionsListForPullRequestReviewComment({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReactionsCreateForPullRequestReviewCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type ReactionsCreateForPullRequestReviewCommentRequestBody = {
  /*
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the pull request review comment.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
};

export type ReactionsCreateForPullRequestReviewCommentVariables = {
  body: ReactionsCreateForPullRequestReviewCommentRequestBody;
  pathParams: ReactionsCreateForPullRequestReviewCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this pull request review comment.
 */
export const fetchReactionsCreateForPullRequestReviewComment = (
  variables: ReactionsCreateForPullRequestReviewCommentVariables
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForPullRequestReviewCommentRequestBody,
    {},
    {},
    ReactionsCreateForPullRequestReviewCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/comments/{commentId}/reactions",
    method: "post",
    ...variables,
  });

/**
 * Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this pull request review comment.
 */
export const useReactionsCreateForPullRequestReviewComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      Responses.PreviewHeaderMissing | Responses.ValidationFailed,
      ReactionsCreateForPullRequestReviewCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    Responses.PreviewHeaderMissing | Responses.ValidationFailed,
    ReactionsCreateForPullRequestReviewCommentVariables
  >(
    (variables: ReactionsCreateForPullRequestReviewCommentVariables) =>
      fetchReactionsCreateForPullRequestReviewComment({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReactionsDeleteForPullRequestCommentPathParams = {
  owner: string;
  repo: string;
  /*
   * comment_id parameter
   */
  commentId: number;
  reactionId: number;
};

export type ReactionsDeleteForPullRequestCommentVariables = {
  pathParams: ReactionsDeleteForPullRequestCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
 *
 * Delete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
 */
export const fetchReactionsDeleteForPullRequestComment = (
  variables: ReactionsDeleteForPullRequestCommentVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ReactionsDeleteForPullRequestCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/comments/{commentId}/reactions/{reactionId}",
    method: "delete",
    ...variables,
  });

/**
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
 *
 * Delete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
 */
export const useReactionsDeleteForPullRequestComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ReactionsDeleteForPullRequestCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ReactionsDeleteForPullRequestCommentVariables
  >(
    (variables: ReactionsDeleteForPullRequestCommentVariables) =>
      fetchReactionsDeleteForPullRequestComment({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type PullsGetPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsGetVariables = {
  pathParams: PullsGetPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists details of a pull request by providing its number.
 *
 * When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 *
 * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
 *
 * The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
 *
 * *   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
 * *   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
 * *   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
 *
 * Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
 */
export const fetchPullsGet = (variables: PullsGetVariables) =>
  githubFetch<Schemas.PullRequest, undefined, {}, {}, PullsGetPathParams>({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}",
    method: "get",
    ...variables,
  });

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Lists details of a pull request by providing its number.
 *
 * When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 *
 * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
 *
 * The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
 *
 * *   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
 * *   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
 * *   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
 *
 * Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
 */
export const usePullsGet = (
  variables: PullsGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PullRequest,
      Responses.NotModified | Responses.NotFound | Responses.InternalError,
      Schemas.PullRequest
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PullRequest,
    Responses.NotModified | Responses.NotFound | Responses.InternalError,
    Schemas.PullRequest
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls/{pull_number}",
      operationId: "pullsGet",
      variables,
    }),
    () => fetchPullsGet({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PullsUpdatePathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsUpdateRequestBody = {
  /*
   * The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
   */
  base?: string;
  /*
   * The contents of the pull request.
   */
  body?: string;
  /*
   * Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
   */
  maintainer_can_modify?: boolean;
  /*
   * State of this Pull Request. Either `open` or `closed`.
   */
  state?: "open" | "closed";
  /*
   * The title of the pull request.
   */
  title?: string;
};

export type PullsUpdateVariables = {
  body?: PullsUpdateRequestBody;
  pathParams: PullsUpdatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
 */
export const fetchPullsUpdate = (variables: PullsUpdateVariables) =>
  githubFetch<
    Schemas.PullRequest,
    PullsUpdateRequestBody,
    {},
    {},
    PullsUpdatePathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}",
    method: "patch",
    ...variables,
  });

/**
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
 */
export const usePullsUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequest,
      Responses.Forbidden | Responses.ValidationFailed,
      PullsUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequest,
    Responses.Forbidden | Responses.ValidationFailed,
    PullsUpdateVariables
  >(
    (variables: PullsUpdateVariables) =>
      fetchPullsUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsListReviewCommentsPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsListReviewCommentsQueryParams = {
  /*
   * One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
   *
   * @default created
   */
  sort?: "created" | "updated";
  /*
   * Can be either `asc` or `desc`. Ignored without `sort` parameter.
   */
  direction?: "asc" | "desc";
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type PullsListReviewCommentsResponse =
  Schemas.PullRequestReviewComment[];

export type PullsListReviewCommentsVariables = {
  pathParams: PullsListReviewCommentsPathParams;
  queryParams?: PullsListReviewCommentsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
 */
export const fetchPullsListReviewComments = (
  variables: PullsListReviewCommentsVariables
) =>
  githubFetch<
    PullsListReviewCommentsResponse,
    undefined,
    {},
    PullsListReviewCommentsQueryParams,
    PullsListReviewCommentsPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/comments",
    method: "get",
    ...variables,
  });

/**
 * Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
 */
export const usePullsListReviewComments = (
  variables: PullsListReviewCommentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListReviewCommentsResponse,
      undefined,
      PullsListReviewCommentsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    PullsListReviewCommentsResponse,
    undefined,
    PullsListReviewCommentsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/comments",
      operationId: "pullsListReviewComments",
      variables,
    }),
    () => fetchPullsListReviewComments({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PullsCreateReviewCommentPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsCreateReviewCommentRequestBody = {
  /*
   * The text of the review comment.
   */
  body: string;
  /*
   * The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.
   */
  commit_id?: string;
  /*
   * @example 2
   */
  in_reply_to?: number;
  /*
   * **Required with `comfort-fade` preview**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.
   */
  line?: number;
  /*
   * The relative path to the file that necessitates a comment.
   */
  path?: string;
  /*
   * **Required without `comfort-fade` preview**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.
   */
  position?: number;
  /*
   * **Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://help.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
   */
  side?: "LEFT" | "RIGHT";
  /*
   * **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation.
   */
  start_line?: number;
  /*
   * **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
   */
  start_side?: "LEFT" | "RIGHT" | "side";
};

export type PullsCreateReviewCommentVariables = {
  body: PullsCreateReviewCommentRequestBody;
  pathParams: PullsCreateReviewCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.
 *
 * You can still create a review comment using the `position` parameter. When you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required. For more information, see the [`comfort-fade` preview notice](https://docs.github.com/rest/reference/pulls#create-a-review-comment-for-a-pull-request-preview-notices).
 *
 * **Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const fetchPullsCreateReviewComment = (
  variables: PullsCreateReviewCommentVariables
) =>
  githubFetch<
    Schemas.PullRequestReviewComment,
    PullsCreateReviewCommentRequestBody,
    {},
    {},
    PullsCreateReviewCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/comments",
    method: "post",
    ...variables,
  });

/**
 * Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.
 *
 * You can still create a review comment using the `position` parameter. When you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required. For more information, see the [`comfort-fade` preview notice](https://docs.github.com/rest/reference/pulls#create-a-review-comment-for-a-pull-request-preview-notices).
 *
 * **Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const usePullsCreateReviewComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestReviewComment,
      Responses.Forbidden | Responses.ValidationFailed,
      PullsCreateReviewCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestReviewComment,
    Responses.Forbidden | Responses.ValidationFailed,
    PullsCreateReviewCommentVariables
  >(
    (variables: PullsCreateReviewCommentVariables) =>
      fetchPullsCreateReviewComment({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsCreateReplyForReviewCommentPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
  /*
   * comment_id parameter
   */
  commentId: number;
};

export type PullsCreateReplyForReviewCommentRequestBody = {
  /*
   * The text of the review comment.
   */
  body: string;
};

export type PullsCreateReplyForReviewCommentVariables = {
  body: PullsCreateReplyForReviewCommentRequestBody;
  pathParams: PullsCreateReplyForReviewCommentPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const fetchPullsCreateReplyForReviewComment = (
  variables: PullsCreateReplyForReviewCommentVariables
) =>
  githubFetch<
    Schemas.PullRequestReviewComment,
    PullsCreateReplyForReviewCommentRequestBody,
    {},
    {},
    PullsCreateReplyForReviewCommentPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/comments/{commentId}/replies",
    method: "post",
    ...variables,
  });

/**
 * Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const usePullsCreateReplyForReviewComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestReviewComment,
      Responses.NotFound,
      PullsCreateReplyForReviewCommentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestReviewComment,
    Responses.NotFound,
    PullsCreateReplyForReviewCommentVariables
  >(
    (variables: PullsCreateReplyForReviewCommentVariables) =>
      fetchPullsCreateReplyForReviewComment({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type PullsListCommitsPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsListCommitsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type PullsListCommitsResponse = Schemas.Commit[];

export type PullsListCommitsVariables = {
  pathParams: PullsListCommitsPathParams;
  queryParams?: PullsListCommitsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint.
 */
export const fetchPullsListCommits = (variables: PullsListCommitsVariables) =>
  githubFetch<
    PullsListCommitsResponse,
    undefined,
    {},
    PullsListCommitsQueryParams,
    PullsListCommitsPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/commits",
    method: "get",
    ...variables,
  });

/**
 * Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint.
 */
export const usePullsListCommits = (
  variables: PullsListCommitsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListCommitsResponse,
      undefined,
      PullsListCommitsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    PullsListCommitsResponse,
    undefined,
    PullsListCommitsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/commits",
      operationId: "pullsListCommits",
      variables,
    }),
    () => fetchPullsListCommits({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PullsListFilesPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsListFilesQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type PullsListFilesResponse = Schemas.DiffEntry[];

export type PullsListFilesVariables = {
  pathParams: PullsListFilesPathParams;
  queryParams?: PullsListFilesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
 */
export const fetchPullsListFiles = (variables: PullsListFilesVariables) =>
  githubFetch<
    PullsListFilesResponse,
    undefined,
    {},
    PullsListFilesQueryParams,
    PullsListFilesPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/files",
    method: "get",
    ...variables,
  });

/**
 * **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
 */
export const usePullsListFiles = (
  variables: PullsListFilesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListFilesResponse,
      Responses.ValidationFailed | Responses.InternalError,
      PullsListFilesResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    PullsListFilesResponse,
    Responses.ValidationFailed | Responses.InternalError,
    PullsListFilesResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/files",
      operationId: "pullsListFiles",
      variables,
    }),
    () => fetchPullsListFiles({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PullsCheckIfMergedPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsCheckIfMergedVariables = {
  pathParams: PullsCheckIfMergedPathParams;
} & GithubContext["fetcherOptions"];

export const fetchPullsCheckIfMerged = (
  variables: PullsCheckIfMergedVariables
) =>
  githubFetch<undefined, undefined, {}, {}, PullsCheckIfMergedPathParams>({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/merge",
    method: "get",
    ...variables,
  });

export const usePullsCheckIfMerged = (
  variables: PullsCheckIfMergedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, undefined, undefined>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, undefined, undefined>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/merge",
      operationId: "pullsCheckIfMerged",
      variables,
    }),
    () => fetchPullsCheckIfMerged({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PullsMergePathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsMergeVariables = {
  body?: {
    /*
     * Extra detail to append to automatic commit message.
     */
    commit_message?: string;
    /*
     * Title for the automatic commit message.
     */
    commit_title?: string;
    /*
     * Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.
     */
    merge_method?: "merge" | "squash" | "rebase";
    /*
     * SHA that pull request head must match to allow merge.
     */
    sha?: string;
  } | null;
  pathParams: PullsMergePathParams;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details.
 */
export const fetchPullsMerge = (variables: PullsMergeVariables) =>
  githubFetch<
    Schemas.PullRequestMergeResult,
    {
      /*
       * Extra detail to append to automatic commit message.
       */
      commit_message?: string;
      /*
       * Title for the automatic commit message.
       */
      commit_title?: string;
      /*
       * Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.
       */
      merge_method?: "merge" | "squash" | "rebase";
      /*
       * SHA that pull request head must match to allow merge.
       */
      sha?: string;
    } | null,
    {},
    {},
    PullsMergePathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/merge",
    method: "put",
    ...variables,
  });

/**
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details.
 */
export const usePullsMerge = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestMergeResult,
      | Responses.Forbidden
      | Responses.NotFound
      | {
          documentation_url?: string;
          message?: string;
        }
      | Responses.ValidationFailed,
      PullsMergeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestMergeResult,
    | Responses.Forbidden
    | Responses.NotFound
    | {
        documentation_url?: string;
        message?: string;
      }
    | Responses.ValidationFailed,
    PullsMergeVariables
  >(
    (variables: PullsMergeVariables) =>
      fetchPullsMerge({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsRemoveRequestedReviewersPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsRemoveRequestedReviewersRequestBody = {
  /*
   * An array of user `login`s that will be removed.
   */
  reviewers: string[];
  /*
   * An array of team `slug`s that will be removed.
   */
  team_reviewers?: string[];
};

export type PullsRemoveRequestedReviewersVariables = {
  body: PullsRemoveRequestedReviewersRequestBody;
  pathParams: PullsRemoveRequestedReviewersPathParams;
} & GithubContext["fetcherOptions"];

export const fetchPullsRemoveRequestedReviewers = (
  variables: PullsRemoveRequestedReviewersVariables
) =>
  githubFetch<
    undefined,
    PullsRemoveRequestedReviewersRequestBody,
    {},
    {},
    PullsRemoveRequestedReviewersPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/requested_reviewers",
    method: "delete",
    ...variables,
  });

export const usePullsRemoveRequestedReviewers = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.ValidationFailed,
      PullsRemoveRequestedReviewersVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.ValidationFailed,
    PullsRemoveRequestedReviewersVariables
  >(
    (variables: PullsRemoveRequestedReviewersVariables) =>
      fetchPullsRemoveRequestedReviewers({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsListRequestedReviewersPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsListRequestedReviewersQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type PullsListRequestedReviewersVariables = {
  pathParams: PullsListRequestedReviewersPathParams;
  queryParams?: PullsListRequestedReviewersQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchPullsListRequestedReviewers = (
  variables: PullsListRequestedReviewersVariables
) =>
  githubFetch<
    Schemas.PullRequestReviewRequest,
    undefined,
    {},
    PullsListRequestedReviewersQueryParams,
    PullsListRequestedReviewersPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/requested_reviewers",
    method: "get",
    ...variables,
  });

export const usePullsListRequestedReviewers = (
  variables: PullsListRequestedReviewersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PullRequestReviewRequest,
      undefined,
      Schemas.PullRequestReviewRequest
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PullRequestReviewRequest,
    undefined,
    Schemas.PullRequestReviewRequest
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
      operationId: "pullsListRequestedReviewers",
      variables,
    }),
    () => fetchPullsListRequestedReviewers({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PullsRequestReviewersPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsRequestReviewersVariables = {
  body?:
    | {
        /*
         * An array of user `login`s that will be requested.
         */
        reviewers: string[];
        /*
         * An array of team `slug`s that will be requested.
         */
        team_reviewers?: string[];
      }
    | {
        /*
         * An array of user `login`s that will be requested.
         */
        reviewers?: string[];
        /*
         * An array of team `slug`s that will be requested.
         */
        team_reviewers: string[];
      };
  pathParams: PullsRequestReviewersPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details.
 */
export const fetchPullsRequestReviewers = (
  variables: PullsRequestReviewersVariables
) =>
  githubFetch<
    Schemas.PullRequestSimple,
    | {
        /*
         * An array of user `login`s that will be requested.
         */
        reviewers: string[];
        /*
         * An array of team `slug`s that will be requested.
         */
        team_reviewers?: string[];
      }
    | {
        /*
         * An array of user `login`s that will be requested.
         */
        reviewers?: string[];
        /*
         * An array of team `slug`s that will be requested.
         */
        team_reviewers: string[];
      },
    {},
    {},
    PullsRequestReviewersPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/requested_reviewers",
    method: "post",
    ...variables,
  });

/**
 * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details.
 */
export const usePullsRequestReviewers = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestSimple,
      Responses.Forbidden,
      PullsRequestReviewersVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestSimple,
    Responses.Forbidden,
    PullsRequestReviewersVariables
  >(
    (variables: PullsRequestReviewersVariables) =>
      fetchPullsRequestReviewers({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsListReviewsPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsListReviewsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type PullsListReviewsResponse = Schemas.PullRequestReview[];

export type PullsListReviewsVariables = {
  pathParams: PullsListReviewsPathParams;
  queryParams?: PullsListReviewsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * The list of reviews returns in chronological order.
 */
export const fetchPullsListReviews = (variables: PullsListReviewsVariables) =>
  githubFetch<
    PullsListReviewsResponse,
    undefined,
    {},
    PullsListReviewsQueryParams,
    PullsListReviewsPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews",
    method: "get",
    ...variables,
  });

/**
 * The list of reviews returns in chronological order.
 */
export const usePullsListReviews = (
  variables: PullsListReviewsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListReviewsResponse,
      undefined,
      PullsListReviewsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    PullsListReviewsResponse,
    undefined,
    PullsListReviewsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews",
      operationId: "pullsListReviews",
      variables,
    }),
    () => fetchPullsListReviews({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PullsCreateReviewPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsCreateReviewRequestBody = {
  /*
   * **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.
   */
  body?: string;
  /*
   * Use the following table to specify the location, destination, and contents of the draft review comment.
   */
  comments?: {
    /*
     * Text of the review comment.
     */
    body: string;
    /*
     * @example 28
     */
    line?: number;
    /*
     * The relative path to the file that necessitates a review comment.
     */
    path: string;
    /*
     * The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.
     */
    position?: number;
    /*
     * @example RIGHT
     */
    side?: string;
    /*
     * @example 26
     */
    start_line?: number;
    /*
     * @example LEFT
     */
    start_side?: string;
  }[];
  /*
   * The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.
   */
  commit_id?: string;
  /*
   * The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready.
   */
  event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
};

export type PullsCreateReviewVariables = {
  body?: PullsCreateReviewRequestBody;
  pathParams: PullsCreateReviewPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 *
 * Pull request reviews created in the `PENDING` state do not include the `submitted_at` property in the response.
 *
 * **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint.
 *
 * The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
 */
export const fetchPullsCreateReview = (variables: PullsCreateReviewVariables) =>
  githubFetch<
    Schemas.PullRequestReview,
    PullsCreateReviewRequestBody,
    {},
    {},
    PullsCreateReviewPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews",
    method: "post",
    ...variables,
  });

/**
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 *
 * Pull request reviews created in the `PENDING` state do not include the `submitted_at` property in the response.
 *
 * **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint.
 *
 * The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
 */
export const usePullsCreateReview = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestReview,
      Responses.Forbidden | Responses.ValidationFailedSimple,
      PullsCreateReviewVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestReview,
    Responses.Forbidden | Responses.ValidationFailedSimple,
    PullsCreateReviewVariables
  >(
    (variables: PullsCreateReviewVariables) =>
      fetchPullsCreateReview({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsDeletePendingReviewPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
  /*
   * review_id parameter
   */
  reviewId: number;
};

export type PullsDeletePendingReviewVariables = {
  pathParams: PullsDeletePendingReviewPathParams;
} & GithubContext["fetcherOptions"];

export const fetchPullsDeletePendingReview = (
  variables: PullsDeletePendingReviewVariables
) =>
  githubFetch<
    Schemas.PullRequestReview,
    undefined,
    {},
    {},
    PullsDeletePendingReviewPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}",
    method: "delete",
    ...variables,
  });

export const usePullsDeletePendingReview = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestReview,
      Responses.NotFound | Responses.ValidationFailedSimple,
      PullsDeletePendingReviewVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestReview,
    Responses.NotFound | Responses.ValidationFailedSimple,
    PullsDeletePendingReviewVariables
  >(
    (variables: PullsDeletePendingReviewVariables) =>
      fetchPullsDeletePendingReview({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsGetReviewPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
  /*
   * review_id parameter
   */
  reviewId: number;
};

export type PullsGetReviewVariables = {
  pathParams: PullsGetReviewPathParams;
} & GithubContext["fetcherOptions"];

export const fetchPullsGetReview = (variables: PullsGetReviewVariables) =>
  githubFetch<
    Schemas.PullRequestReview,
    undefined,
    {},
    {},
    PullsGetReviewPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}",
    method: "get",
    ...variables,
  });

export const usePullsGetReview = (
  variables: PullsGetReviewVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PullRequestReview,
      Responses.NotFound,
      Schemas.PullRequestReview
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PullRequestReview,
    Responses.NotFound,
    Schemas.PullRequestReview
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
      operationId: "pullsGetReview",
      variables,
    }),
    () => fetchPullsGetReview({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PullsUpdateReviewPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
  /*
   * review_id parameter
   */
  reviewId: number;
};

export type PullsUpdateReviewRequestBody = {
  /*
   * The body text of the pull request review.
   */
  body: string;
};

export type PullsUpdateReviewVariables = {
  body: PullsUpdateReviewRequestBody;
  pathParams: PullsUpdateReviewPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Update the review summary comment with new text.
 */
export const fetchPullsUpdateReview = (variables: PullsUpdateReviewVariables) =>
  githubFetch<
    Schemas.PullRequestReview,
    PullsUpdateReviewRequestBody,
    {},
    {},
    PullsUpdateReviewPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}",
    method: "put",
    ...variables,
  });

/**
 * Update the review summary comment with new text.
 */
export const usePullsUpdateReview = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestReview,
      Responses.ValidationFailedSimple,
      PullsUpdateReviewVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestReview,
    Responses.ValidationFailedSimple,
    PullsUpdateReviewVariables
  >(
    (variables: PullsUpdateReviewVariables) =>
      fetchPullsUpdateReview({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsListCommentsForReviewPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
  /*
   * review_id parameter
   */
  reviewId: number;
};

export type PullsListCommentsForReviewQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type PullsListCommentsForReviewResponse = Schemas.ReviewComment[];

export type PullsListCommentsForReviewVariables = {
  pathParams: PullsListCommentsForReviewPathParams;
  queryParams?: PullsListCommentsForReviewQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List comments for a specific pull request review.
 */
export const fetchPullsListCommentsForReview = (
  variables: PullsListCommentsForReviewVariables
) =>
  githubFetch<
    PullsListCommentsForReviewResponse,
    undefined,
    {},
    PullsListCommentsForReviewQueryParams,
    PullsListCommentsForReviewPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}/comments",
    method: "get",
    ...variables,
  });

/**
 * List comments for a specific pull request review.
 */
export const usePullsListCommentsForReview = (
  variables: PullsListCommentsForReviewVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PullsListCommentsForReviewResponse,
      Responses.NotFound,
      PullsListCommentsForReviewResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    PullsListCommentsForReviewResponse,
    Responses.NotFound,
    PullsListCommentsForReviewResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
      operationId: "pullsListCommentsForReview",
      variables,
    }),
    () => fetchPullsListCommentsForReview({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PullsDismissReviewPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
  /*
   * review_id parameter
   */
  reviewId: number;
};

export type PullsDismissReviewRequestBody = {
  /*
   * @example "APPROVE"
   */
  event?: string;
  /*
   * The message for the pull request review dismissal
   */
  message: string;
};

export type PullsDismissReviewVariables = {
  body: PullsDismissReviewRequestBody;
  pathParams: PullsDismissReviewPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
 */
export const fetchPullsDismissReview = (
  variables: PullsDismissReviewVariables
) =>
  githubFetch<
    Schemas.PullRequestReview,
    PullsDismissReviewRequestBody,
    {},
    {},
    PullsDismissReviewPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}/dismissals",
    method: "put",
    ...variables,
  });

/**
 * **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
 */
export const usePullsDismissReview = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestReview,
      Responses.NotFound | Responses.ValidationFailedSimple,
      PullsDismissReviewVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestReview,
    Responses.NotFound | Responses.ValidationFailedSimple,
    PullsDismissReviewVariables
  >(
    (variables: PullsDismissReviewVariables) =>
      fetchPullsDismissReview({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsSubmitReviewPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
  /*
   * review_id parameter
   */
  reviewId: number;
};

export type PullsSubmitReviewRequestBody = {
  /*
   * The body text of the pull request review
   */
  body?: string;
  /*
   * The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
   */
  event: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
};

export type PullsSubmitReviewVariables = {
  body: PullsSubmitReviewRequestBody;
  pathParams: PullsSubmitReviewPathParams;
} & GithubContext["fetcherOptions"];

export const fetchPullsSubmitReview = (variables: PullsSubmitReviewVariables) =>
  githubFetch<
    Schemas.PullRequestReview,
    PullsSubmitReviewRequestBody,
    {},
    {},
    PullsSubmitReviewPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/reviews/{reviewId}/events",
    method: "post",
    ...variables,
  });

export const usePullsSubmitReview = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PullRequestReview,
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.ValidationFailedSimple,
      PullsSubmitReviewVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PullRequestReview,
    Responses.Forbidden | Responses.NotFound | Responses.ValidationFailedSimple,
    PullsSubmitReviewVariables
  >(
    (variables: PullsSubmitReviewVariables) =>
      fetchPullsSubmitReview({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PullsUpdateBranchPathParams = {
  owner: string;
  repo: string;
  pullNumber: number;
};

export type PullsUpdateBranchResponse = {
  message?: string;
  url?: string;
};

export type PullsUpdateBranchVariables = {
  body?: {
    /*
     * The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/rest/reference/repos#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.
     */
    expected_head_sha?: string;
  } | null;
  pathParams: PullsUpdateBranchPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
 */
export const fetchPullsUpdateBranch = (variables: PullsUpdateBranchVariables) =>
  githubFetch<
    PullsUpdateBranchResponse,
    {
      /*
       * The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/rest/reference/repos#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.
       */
      expected_head_sha?: string;
    } | null,
    {},
    {},
    PullsUpdateBranchPathParams
  >({
    url: "/repos/{owner}/{repo}/pulls/{pullNumber}/update-branch",
    method: "put",
    ...variables,
  });

/**
 * Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
 */
export const usePullsUpdateBranch = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PullsUpdateBranchResponse,
      | Responses.Forbidden
      | Responses.PreviewHeaderMissing
      | Responses.ValidationFailed,
      PullsUpdateBranchVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    PullsUpdateBranchResponse,
    | Responses.Forbidden
    | Responses.PreviewHeaderMissing
    | Responses.ValidationFailed,
    PullsUpdateBranchVariables
  >(
    (variables: PullsUpdateBranchVariables) =>
      fetchPullsUpdateBranch({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetReadmePathParams = {
  owner: string;
  repo: string;
};

export type ReposGetReadmeQueryParams = {
  /*
   * The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
   */
  ref?: string;
};

export type ReposGetReadmeVariables = {
  pathParams: ReposGetReadmePathParams;
  queryParams?: ReposGetReadmeQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the preferred README for a repository.
 *
 * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
 */
export const fetchReposGetReadme = (variables: ReposGetReadmeVariables) =>
  githubFetch<
    Schemas.ContentFile,
    undefined,
    {},
    ReposGetReadmeQueryParams,
    ReposGetReadmePathParams
  >({ url: "/repos/{owner}/{repo}/readme", method: "get", ...variables });

/**
 * Gets the preferred README for a repository.
 *
 * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
 */
export const useReposGetReadme = (
  variables: ReposGetReadmeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ContentFile,
      Responses.NotFound | Responses.ValidationFailed,
      Schemas.ContentFile
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ContentFile,
    Responses.NotFound | Responses.ValidationFailed,
    Schemas.ContentFile
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/readme",
      operationId: "reposGetReadme",
      variables,
    }),
    () => fetchReposGetReadme({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetReadmeFromAltPathPathParams = {
  owner: string;
  repo: string;
  /*
   * The alternate path to look for a README file
   */
  dir: string;
};

export type ReposGetReadmeFromAltPathQueryParams = {
  /*
   * The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
   */
  ref?: string;
};

export type ReposGetReadmeFromAltPathVariables = {
  pathParams: ReposGetReadmeFromAltPathPathParams;
  queryParams?: ReposGetReadmeFromAltPathQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the preferred README for a repository.
 *
 * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
 */
export const fetchReposGetReadmeFromAltPath = (
  variables: ReposGetReadmeFromAltPathVariables
) =>
  githubFetch<
    Schemas.ContentFile,
    undefined,
    {},
    ReposGetReadmeFromAltPathQueryParams,
    ReposGetReadmeFromAltPathPathParams
  >({ url: "/repos/{owner}/{repo}/readme/{dir}", method: "get", ...variables });

/**
 * Gets the preferred README for a repository.
 *
 * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
 */
export const useReposGetReadmeFromAltPath = (
  variables: ReposGetReadmeFromAltPathVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ContentFile,
      Responses.NotFound | Responses.ValidationFailed,
      Schemas.ContentFile
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ContentFile,
    Responses.NotFound | Responses.ValidationFailed,
    Schemas.ContentFile
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/readme/{dir}",
      operationId: "reposGetReadmeFromAltPath",
      variables,
    }),
    () => fetchReposGetReadmeFromAltPath({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListReleasesPathParams = {
  owner: string;
  repo: string;
};

export type ReposListReleasesQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListReleasesResponse = Schemas.Release[];

export type ReposListReleasesVariables = {
  pathParams: ReposListReleasesPathParams;
  queryParams?: ReposListReleasesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
 *
 * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
 */
export const fetchReposListReleases = (variables: ReposListReleasesVariables) =>
  githubFetch<
    ReposListReleasesResponse,
    undefined,
    {},
    ReposListReleasesQueryParams,
    ReposListReleasesPathParams
  >({ url: "/repos/{owner}/{repo}/releases", method: "get", ...variables });

/**
 * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
 *
 * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
 */
export const useReposListReleases = (
  variables: ReposListReleasesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListReleasesResponse,
      Responses.NotFound,
      ReposListReleasesResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListReleasesResponse,
    Responses.NotFound,
    ReposListReleasesResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/releases",
      operationId: "reposListReleases",
      variables,
    }),
    () => fetchReposListReleases({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateReleasePathParams = {
  owner: string;
  repo: string;
};

export type ReposCreateReleaseRequestBody = {
  /*
   * Text describing the contents of the tag.
   */
  body?: string;
  /*
   * `true` to create a draft (unpublished) release, `false` to create a published one.
   *
   * @default false
   */
  draft?: boolean;
  /*
   * The name of the release.
   */
  name?: string;
  /*
   * `true` to identify the release as a prerelease. `false` to identify the release as a full release.
   *
   * @default false
   */
  prerelease?: boolean;
  /*
   * The name of the tag.
   */
  tag_name: string;
  /*
   * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
   */
  target_commitish?: string;
};

export type ReposCreateReleaseVariables = {
  body: ReposCreateReleaseRequestBody;
  pathParams: ReposCreateReleasePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with push access to the repository can create a release.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const fetchReposCreateRelease = (
  variables: ReposCreateReleaseVariables
) =>
  githubFetch<
    Schemas.Release,
    ReposCreateReleaseRequestBody,
    {},
    {},
    ReposCreateReleasePathParams
  >({ url: "/repos/{owner}/{repo}/releases", method: "post", ...variables });

/**
 * Users with push access to the repository can create a release.
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const useReposCreateRelease = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Release,
      Responses.ValidationFailed,
      ReposCreateReleaseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Release,
    Responses.ValidationFailed,
    ReposCreateReleaseVariables
  >(
    (variables: ReposCreateReleaseVariables) =>
      fetchReposCreateRelease({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposDeleteReleaseAssetPathParams = {
  owner: string;
  repo: string;
  /*
   * asset_id parameter
   */
  assetId: number;
};

export type ReposDeleteReleaseAssetVariables = {
  pathParams: ReposDeleteReleaseAssetPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposDeleteReleaseAsset = (
  variables: ReposDeleteReleaseAssetVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ReposDeleteReleaseAssetPathParams>({
    url: "/repos/{owner}/{repo}/releases/assets/{assetId}",
    method: "delete",
    ...variables,
  });

export const useReposDeleteReleaseAsset = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ReposDeleteReleaseAssetVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ReposDeleteReleaseAssetVariables
  >(
    (variables: ReposDeleteReleaseAssetVariables) =>
      fetchReposDeleteReleaseAsset({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetReleaseAssetPathParams = {
  owner: string;
  repo: string;
  /*
   * asset_id parameter
   */
  assetId: number;
};

export type ReposGetReleaseAssetVariables = {
  pathParams: ReposGetReleaseAssetPathParams;
} & GithubContext["fetcherOptions"];

/**
 * To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
 */
export const fetchReposGetReleaseAsset = (
  variables: ReposGetReleaseAssetVariables
) =>
  githubFetch<
    Schemas.ReleaseAsset,
    undefined,
    {},
    {},
    ReposGetReleaseAssetPathParams
  >({
    url: "/repos/{owner}/{repo}/releases/assets/{assetId}",
    method: "get",
    ...variables,
  });

/**
 * To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
 */
export const useReposGetReleaseAsset = (
  variables: ReposGetReleaseAssetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ReleaseAsset,
      Responses.Found | Responses.NotFound | Responses.PreviewHeaderMissing,
      Schemas.ReleaseAsset
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ReleaseAsset,
    Responses.Found | Responses.NotFound | Responses.PreviewHeaderMissing,
    Schemas.ReleaseAsset
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/releases/assets/{asset_id}",
      operationId: "reposGetReleaseAsset",
      variables,
    }),
    () => fetchReposGetReleaseAsset({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposUpdateReleaseAssetPathParams = {
  owner: string;
  repo: string;
  /*
   * asset_id parameter
   */
  assetId: number;
};

export type ReposUpdateReleaseAssetRequestBody = {
  /*
   * An alternate short description of the asset. Used in place of the filename.
   */
  label?: string;
  /*
   * The file name of the asset.
   */
  name?: string;
  /*
   * @example "uploaded"
   */
  state?: string;
};

export type ReposUpdateReleaseAssetVariables = {
  body?: ReposUpdateReleaseAssetRequestBody;
  pathParams: ReposUpdateReleaseAssetPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with push access to the repository can edit a release asset.
 */
export const fetchReposUpdateReleaseAsset = (
  variables: ReposUpdateReleaseAssetVariables
) =>
  githubFetch<
    Schemas.ReleaseAsset,
    ReposUpdateReleaseAssetRequestBody,
    {},
    {},
    ReposUpdateReleaseAssetPathParams
  >({
    url: "/repos/{owner}/{repo}/releases/assets/{assetId}",
    method: "patch",
    ...variables,
  });

/**
 * Users with push access to the repository can edit a release asset.
 */
export const useReposUpdateReleaseAsset = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ReleaseAsset,
      undefined,
      ReposUpdateReleaseAssetVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ReleaseAsset,
    undefined,
    ReposUpdateReleaseAssetVariables
  >(
    (variables: ReposUpdateReleaseAssetVariables) =>
      fetchReposUpdateReleaseAsset({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetLatestReleasePathParams = {
  owner: string;
  repo: string;
};

export type ReposGetLatestReleaseVariables = {
  pathParams: ReposGetLatestReleasePathParams;
} & GithubContext["fetcherOptions"];

/**
 * View the latest published full release for the repository.
 *
 * The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
 */
export const fetchReposGetLatestRelease = (
  variables: ReposGetLatestReleaseVariables
) =>
  githubFetch<
    Schemas.Release,
    undefined,
    {},
    {},
    ReposGetLatestReleasePathParams
  >({
    url: "/repos/{owner}/{repo}/releases/latest",
    method: "get",
    ...variables,
  });

/**
 * View the latest published full release for the repository.
 *
 * The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
 */
export const useReposGetLatestRelease = (
  variables: ReposGetLatestReleaseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Release, undefined, Schemas.Release>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Release, undefined, Schemas.Release>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/releases/latest",
      operationId: "reposGetLatestRelease",
      variables,
    }),
    () => fetchReposGetLatestRelease({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetReleaseByTagPathParams = {
  owner: string;
  repo: string;
  /*
   * tag parameter
   */
  tag: string;
};

export type ReposGetReleaseByTagVariables = {
  pathParams: ReposGetReleaseByTagPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Get a published release with the specified tag.
 */
export const fetchReposGetReleaseByTag = (
  variables: ReposGetReleaseByTagVariables
) =>
  githubFetch<
    Schemas.Release,
    undefined,
    {},
    {},
    ReposGetReleaseByTagPathParams
  >({
    url: "/repos/{owner}/{repo}/releases/tags/{tag}",
    method: "get",
    ...variables,
  });

/**
 * Get a published release with the specified tag.
 */
export const useReposGetReleaseByTag = (
  variables: ReposGetReleaseByTagVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Release,
      Responses.NotFound,
      Schemas.Release
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Release,
    Responses.NotFound,
    Schemas.Release
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/releases/tags/{tag}",
      operationId: "reposGetReleaseByTag",
      variables,
    }),
    () => fetchReposGetReleaseByTag({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposDeleteReleasePathParams = {
  owner: string;
  repo: string;
  /*
   * release_id parameter
   */
  releaseId: number;
};

export type ReposDeleteReleaseVariables = {
  pathParams: ReposDeleteReleasePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with push access to the repository can delete a release.
 */
export const fetchReposDeleteRelease = (
  variables: ReposDeleteReleaseVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ReposDeleteReleasePathParams>({
    url: "/repos/{owner}/{repo}/releases/{releaseId}",
    method: "delete",
    ...variables,
  });

/**
 * Users with push access to the repository can delete a release.
 */
export const useReposDeleteRelease = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ReposDeleteReleaseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ReposDeleteReleaseVariables
  >(
    (variables: ReposDeleteReleaseVariables) =>
      fetchReposDeleteRelease({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetReleasePathParams = {
  owner: string;
  repo: string;
  /*
   * release_id parameter
   */
  releaseId: number;
};

export type ReposGetReleaseVariables = {
  pathParams: ReposGetReleasePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).
 */
export const fetchReposGetRelease = (variables: ReposGetReleaseVariables) =>
  githubFetch<Schemas.Release, undefined, {}, {}, ReposGetReleasePathParams>({
    url: "/repos/{owner}/{repo}/releases/{releaseId}",
    method: "get",
    ...variables,
  });

/**
 * **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).
 */
export const useReposGetRelease = (
  variables: ReposGetReleaseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Release,
      Responses.NotFound,
      Schemas.Release
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Release,
    Responses.NotFound,
    Schemas.Release
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/releases/{release_id}",
      operationId: "reposGetRelease",
      variables,
    }),
    () => fetchReposGetRelease({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposUpdateReleasePathParams = {
  owner: string;
  repo: string;
  /*
   * release_id parameter
   */
  releaseId: number;
};

export type ReposUpdateReleaseRequestBody = {
  /*
   * Text describing the contents of the tag.
   */
  body?: string;
  /*
   * `true` makes the release a draft, and `false` publishes the release.
   */
  draft?: boolean;
  /*
   * The name of the release.
   */
  name?: string;
  /*
   * `true` to identify the release as a prerelease, `false` to identify the release as a full release.
   */
  prerelease?: boolean;
  /*
   * The name of the tag.
   */
  tag_name?: string;
  /*
   * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
   */
  target_commitish?: string;
};

export type ReposUpdateReleaseVariables = {
  body?: ReposUpdateReleaseRequestBody;
  pathParams: ReposUpdateReleasePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with push access to the repository can edit a release.
 */
export const fetchReposUpdateRelease = (
  variables: ReposUpdateReleaseVariables
) =>
  githubFetch<
    Schemas.Release,
    ReposUpdateReleaseRequestBody,
    {},
    {},
    ReposUpdateReleasePathParams
  >({
    url: "/repos/{owner}/{repo}/releases/{releaseId}",
    method: "patch",
    ...variables,
  });

/**
 * Users with push access to the repository can edit a release.
 */
export const useReposUpdateRelease = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Release,
      undefined,
      ReposUpdateReleaseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Release,
    undefined,
    ReposUpdateReleaseVariables
  >(
    (variables: ReposUpdateReleaseVariables) =>
      fetchReposUpdateRelease({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposListReleaseAssetsPathParams = {
  owner: string;
  repo: string;
  /*
   * release_id parameter
   */
  releaseId: number;
};

export type ReposListReleaseAssetsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListReleaseAssetsResponse = Schemas.ReleaseAsset[];

export type ReposListReleaseAssetsVariables = {
  pathParams: ReposListReleaseAssetsPathParams;
  queryParams?: ReposListReleaseAssetsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposListReleaseAssets = (
  variables: ReposListReleaseAssetsVariables
) =>
  githubFetch<
    ReposListReleaseAssetsResponse,
    undefined,
    {},
    ReposListReleaseAssetsQueryParams,
    ReposListReleaseAssetsPathParams
  >({
    url: "/repos/{owner}/{repo}/releases/{releaseId}/assets",
    method: "get",
    ...variables,
  });

export const useReposListReleaseAssets = (
  variables: ReposListReleaseAssetsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListReleaseAssetsResponse,
      undefined,
      ReposListReleaseAssetsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListReleaseAssetsResponse,
    undefined,
    ReposListReleaseAssetsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/releases/{release_id}/assets",
      operationId: "reposListReleaseAssets",
      variables,
    }),
    () => fetchReposListReleaseAssets({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposUploadReleaseAssetPathParams = {
  owner: string;
  repo: string;
  /*
   * release_id parameter
   */
  releaseId: number;
};

export type ReposUploadReleaseAssetQueryParams = {
  name?: string;
  label?: string;
};

export type ReposUploadReleaseAssetVariables = {
  body?: string;
  pathParams: ReposUploadReleaseAssetPathParams;
  queryParams?: ReposUploadReleaseAssetQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint makes use of [a Hypermedia relation](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
 * the response of the [Create a release endpoint](https://docs.github.com/rest/reference/repos#create-a-release) to upload a release asset.
 *
 * You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
 *
 * Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:
 *
 * `application/zip`
 *
 * GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
 * you'll still need to pass your authentication to be able to upload an asset.
 *
 * When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
 *
 * **Notes:**
 * *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List assets for a release](https://docs.github.com/rest/reference/repos#list-assets-for-a-release)"
 * endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact).
 * *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
 */
export const fetchReposUploadReleaseAsset = (
  variables: ReposUploadReleaseAssetVariables
) =>
  githubFetch<
    Schemas.ReleaseAsset,
    string,
    {},
    ReposUploadReleaseAssetQueryParams,
    ReposUploadReleaseAssetPathParams
  >({
    url: "/repos/{owner}/{repo}/releases/{releaseId}/assets",
    method: "post",
    ...variables,
  });

/**
 * This endpoint makes use of [a Hypermedia relation](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
 * the response of the [Create a release endpoint](https://docs.github.com/rest/reference/repos#create-a-release) to upload a release asset.
 *
 * You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
 *
 * Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:
 *
 * `application/zip`
 *
 * GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
 * you'll still need to pass your authentication to be able to upload an asset.
 *
 * When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
 *
 * **Notes:**
 * *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List assets for a release](https://docs.github.com/rest/reference/repos#list-assets-for-a-release)"
 * endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact).
 * *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
 */
export const useReposUploadReleaseAsset = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ReleaseAsset,
      undefined,
      ReposUploadReleaseAssetVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ReleaseAsset,
    undefined,
    ReposUploadReleaseAssetVariables
  >(
    (variables: ReposUploadReleaseAssetVariables) =>
      fetchReposUploadReleaseAsset({ ...fetcherOptions, ...variables }),
    options
  );
};

export type SecretScanningListAlertsForRepoPathParams = {
  owner: string;
  repo: string;
};

export type SecretScanningListAlertsForRepoQueryParams = {
  /*
   * Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
   */
  state?: "open" | "resolved";
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type SecretScanningListAlertsForRepoResponse =
  Schemas.SecretScanningAlert[];

export type SecretScanningListAlertsForRepoVariables = {
  pathParams: SecretScanningListAlertsForRepoPathParams;
  queryParams?: SecretScanningListAlertsForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all secret scanning alerts for a private repository, from newest to oldest. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
 */
export const fetchSecretScanningListAlertsForRepo = (
  variables: SecretScanningListAlertsForRepoVariables
) =>
  githubFetch<
    SecretScanningListAlertsForRepoResponse,
    undefined,
    {},
    SecretScanningListAlertsForRepoQueryParams,
    SecretScanningListAlertsForRepoPathParams
  >({
    url: "/repos/{owner}/{repo}/secret-scanning/alerts",
    method: "get",
    ...variables,
  });

/**
 * Lists all secret scanning alerts for a private repository, from newest to oldest. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
 */
export const useSecretScanningListAlertsForRepo = (
  variables: SecretScanningListAlertsForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SecretScanningListAlertsForRepoResponse,
      Responses.ServiceUnavailable,
      SecretScanningListAlertsForRepoResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    SecretScanningListAlertsForRepoResponse,
    Responses.ServiceUnavailable,
    SecretScanningListAlertsForRepoResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/secret-scanning/alerts",
      operationId: "secretScanningListAlertsForRepo",
      variables,
    }),
    () =>
      fetchSecretScanningListAlertsForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SecretScanningGetAlertPathParams = {
  owner: string;
  repo: string;
  /*
   * The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
   */
  alertNumber: Schemas.AlertNumber;
};

export type SecretScanningGetAlertVariables = {
  pathParams: SecretScanningGetAlertPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
 */
export const fetchSecretScanningGetAlert = (
  variables: SecretScanningGetAlertVariables
) =>
  githubFetch<
    Schemas.SecretScanningAlert,
    undefined,
    {},
    {},
    SecretScanningGetAlertPathParams
  >({
    url: "/repos/{owner}/{repo}/secret-scanning/alerts/{alertNumber}",
    method: "get",
    ...variables,
  });

/**
 * Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
 */
export const useSecretScanningGetAlert = (
  variables: SecretScanningGetAlertVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SecretScanningAlert,
      Responses.ServiceUnavailable,
      Schemas.SecretScanningAlert
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.SecretScanningAlert,
    Responses.ServiceUnavailable,
    Schemas.SecretScanningAlert
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}",
      operationId: "secretScanningGetAlert",
      variables,
    }),
    () => fetchSecretScanningGetAlert({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SecretScanningUpdateAlertPathParams = {
  owner: string;
  repo: string;
  /*
   * The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
   */
  alertNumber: Schemas.AlertNumber;
};

export type SecretScanningUpdateAlertRequestBody = {
  resolution?: Schemas.SecretScanningAlertResolution;
  state: Schemas.SecretScanningAlertState;
};

export type SecretScanningUpdateAlertVariables = {
  body: SecretScanningUpdateAlertRequestBody;
  pathParams: SecretScanningUpdateAlertPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Updates the status of a secret scanning alert in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
 */
export const fetchSecretScanningUpdateAlert = (
  variables: SecretScanningUpdateAlertVariables
) =>
  githubFetch<
    Schemas.SecretScanningAlert,
    SecretScanningUpdateAlertRequestBody,
    {},
    {},
    SecretScanningUpdateAlertPathParams
  >({
    url: "/repos/{owner}/{repo}/secret-scanning/alerts/{alertNumber}",
    method: "patch",
    ...variables,
  });

/**
 * Updates the status of a secret scanning alert in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
 *
 * GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
 */
export const useSecretScanningUpdateAlert = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SecretScanningAlert,
      Responses.ServiceUnavailable,
      SecretScanningUpdateAlertVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.SecretScanningAlert,
    Responses.ServiceUnavailable,
    SecretScanningUpdateAlertVariables
  >(
    (variables: SecretScanningUpdateAlertVariables) =>
      fetchSecretScanningUpdateAlert({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActivityListStargazersForRepoPathParams = {
  owner: string;
  repo: string;
};

export type ActivityListStargazersForRepoQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListStargazersForRepoResponse = Schemas.SimpleUser[];

export type ActivityListStargazersForRepoVariables = {
  pathParams: ActivityListStargazersForRepoPathParams;
  queryParams?: ActivityListStargazersForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the people that have starred the repository.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
 */
export const fetchActivityListStargazersForRepo = (
  variables: ActivityListStargazersForRepoVariables
) =>
  githubFetch<
    ActivityListStargazersForRepoResponse,
    undefined,
    {},
    ActivityListStargazersForRepoQueryParams,
    ActivityListStargazersForRepoPathParams
  >({ url: "/repos/{owner}/{repo}/stargazers", method: "get", ...variables });

/**
 * Lists the people that have starred the repository.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
 */
export const useActivityListStargazersForRepo = (
  variables: ActivityListStargazersForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListStargazersForRepoResponse,
      Responses.ValidationFailed,
      ActivityListStargazersForRepoResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListStargazersForRepoResponse,
    Responses.ValidationFailed,
    ActivityListStargazersForRepoResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/stargazers",
      operationId: "activityListStargazersForRepo",
      variables,
    }),
    () =>
      fetchActivityListStargazersForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetCodeFrequencyStatsPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetCodeFrequencyStatsResponse = Schemas.CodeFrequencyStat[];

export type ReposGetCodeFrequencyStatsVariables = {
  pathParams: ReposGetCodeFrequencyStatsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
 */
export const fetchReposGetCodeFrequencyStats = (
  variables: ReposGetCodeFrequencyStatsVariables
) =>
  githubFetch<
    ReposGetCodeFrequencyStatsResponse,
    undefined,
    {},
    {},
    ReposGetCodeFrequencyStatsPathParams
  >({
    url: "/repos/{owner}/{repo}/stats/code_frequency",
    method: "get",
    ...variables,
  });

/**
 * Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
 */
export const useReposGetCodeFrequencyStats = (
  variables: ReposGetCodeFrequencyStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetCodeFrequencyStatsResponse,
      undefined,
      ReposGetCodeFrequencyStatsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetCodeFrequencyStatsResponse,
    undefined,
    ReposGetCodeFrequencyStatsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/stats/code_frequency",
      operationId: "reposGetCodeFrequencyStats",
      variables,
    }),
    () => fetchReposGetCodeFrequencyStats({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetCommitActivityStatsPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetCommitActivityStatsResponse = Schemas.CommitActivity[];

export type ReposGetCommitActivityStatsVariables = {
  pathParams: ReposGetCommitActivityStatsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
 */
export const fetchReposGetCommitActivityStats = (
  variables: ReposGetCommitActivityStatsVariables
) =>
  githubFetch<
    ReposGetCommitActivityStatsResponse,
    undefined,
    {},
    {},
    ReposGetCommitActivityStatsPathParams
  >({
    url: "/repos/{owner}/{repo}/stats/commit_activity",
    method: "get",
    ...variables,
  });

/**
 * Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
 */
export const useReposGetCommitActivityStats = (
  variables: ReposGetCommitActivityStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetCommitActivityStatsResponse,
      undefined,
      ReposGetCommitActivityStatsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetCommitActivityStatsResponse,
    undefined,
    ReposGetCommitActivityStatsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/stats/commit_activity",
      operationId: "reposGetCommitActivityStats",
      variables,
    }),
    () => fetchReposGetCommitActivityStats({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetContributorsStatsPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetContributorsStatsResponse = Schemas.ContributorActivity[];

export type ReposGetContributorsStatsVariables = {
  pathParams: ReposGetContributorsStatsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
 *
 * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
 * *   `a` - Number of additions
 * *   `d` - Number of deletions
 * *   `c` - Number of commits
 */
export const fetchReposGetContributorsStats = (
  variables: ReposGetContributorsStatsVariables
) =>
  githubFetch<
    ReposGetContributorsStatsResponse,
    undefined,
    {},
    {},
    ReposGetContributorsStatsPathParams
  >({
    url: "/repos/{owner}/{repo}/stats/contributors",
    method: "get",
    ...variables,
  });

/**
 * Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
 *
 * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
 * *   `a` - Number of additions
 * *   `d` - Number of deletions
 * *   `c` - Number of commits
 */
export const useReposGetContributorsStats = (
  variables: ReposGetContributorsStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetContributorsStatsResponse,
      undefined,
      ReposGetContributorsStatsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetContributorsStatsResponse,
    undefined,
    ReposGetContributorsStatsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/stats/contributors",
      operationId: "reposGetContributorsStats",
      variables,
    }),
    () => fetchReposGetContributorsStats({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetParticipationStatsPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetParticipationStatsVariables = {
  pathParams: ReposGetParticipationStatsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
 *
 * The array order is oldest week (index 0) to most recent week.
 */
export const fetchReposGetParticipationStats = (
  variables: ReposGetParticipationStatsVariables
) =>
  githubFetch<
    Schemas.ParticipationStats,
    undefined,
    {},
    {},
    ReposGetParticipationStatsPathParams
  >({
    url: "/repos/{owner}/{repo}/stats/participation",
    method: "get",
    ...variables,
  });

/**
 * Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
 *
 * The array order is oldest week (index 0) to most recent week.
 */
export const useReposGetParticipationStats = (
  variables: ReposGetParticipationStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ParticipationStats,
      Responses.NotFound,
      Schemas.ParticipationStats
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ParticipationStats,
    Responses.NotFound,
    Schemas.ParticipationStats
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/stats/participation",
      operationId: "reposGetParticipationStats",
      variables,
    }),
    () => fetchReposGetParticipationStats({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetPunchCardStatsPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetPunchCardStatsResponse = Schemas.CodeFrequencyStat[];

export type ReposGetPunchCardStatsVariables = {
  pathParams: ReposGetPunchCardStatsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Each array contains the day number, hour number, and number of commits:
 *
 * *   `0-6`: Sunday - Saturday
 * *   `0-23`: Hour of day
 * *   Number of commits
 *
 * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
 */
export const fetchReposGetPunchCardStats = (
  variables: ReposGetPunchCardStatsVariables
) =>
  githubFetch<
    ReposGetPunchCardStatsResponse,
    undefined,
    {},
    {},
    ReposGetPunchCardStatsPathParams
  >({
    url: "/repos/{owner}/{repo}/stats/punch_card",
    method: "get",
    ...variables,
  });

/**
 * Each array contains the day number, hour number, and number of commits:
 *
 * *   `0-6`: Sunday - Saturday
 * *   `0-23`: Hour of day
 * *   Number of commits
 *
 * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
 */
export const useReposGetPunchCardStats = (
  variables: ReposGetPunchCardStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetPunchCardStatsResponse,
      undefined,
      ReposGetPunchCardStatsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetPunchCardStatsResponse,
    undefined,
    ReposGetPunchCardStatsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/stats/punch_card",
      operationId: "reposGetPunchCardStats",
      variables,
    }),
    () => fetchReposGetPunchCardStats({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateCommitStatusPathParams = {
  owner: string;
  repo: string;
  sha: string;
};

export type ReposCreateCommitStatusRequestBody = {
  /*
   * A string label to differentiate this status from the status of other systems. This field is case-insensitive.
   *
   * @default default
   */
  context?: string;
  /*
   * A short description of the status.
   */
  description?: string;
  /*
   * The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.
   */
  state: "error" | "failure" | "pending" | "success";
  /*
   * The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.
   * For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:
   * `http://ci.example.com/user/repo/build/sha`
   */
  target_url?: string;
};

export type ReposCreateCommitStatusVariables = {
  body: ReposCreateCommitStatusRequestBody;
  pathParams: ReposCreateCommitStatusPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Users with push access in a repository can create commit statuses for a given SHA.
 *
 * Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
 */
export const fetchReposCreateCommitStatus = (
  variables: ReposCreateCommitStatusVariables
) =>
  githubFetch<
    Schemas.Status,
    ReposCreateCommitStatusRequestBody,
    {},
    {},
    ReposCreateCommitStatusPathParams
  >({
    url: "/repos/{owner}/{repo}/statuses/{sha}",
    method: "post",
    ...variables,
  });

/**
 * Users with push access in a repository can create commit statuses for a given SHA.
 *
 * Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
 */
export const useReposCreateCommitStatus = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Status,
      undefined,
      ReposCreateCommitStatusVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Status,
    undefined,
    ReposCreateCommitStatusVariables
  >(
    (variables: ReposCreateCommitStatusVariables) =>
      fetchReposCreateCommitStatus({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActivityListWatchersForRepoPathParams = {
  owner: string;
  repo: string;
};

export type ActivityListWatchersForRepoQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListWatchersForRepoResponse = Schemas.SimpleUser[];

export type ActivityListWatchersForRepoVariables = {
  pathParams: ActivityListWatchersForRepoPathParams;
  queryParams?: ActivityListWatchersForRepoQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the people watching the specified repository.
 */
export const fetchActivityListWatchersForRepo = (
  variables: ActivityListWatchersForRepoVariables
) =>
  githubFetch<
    ActivityListWatchersForRepoResponse,
    undefined,
    {},
    ActivityListWatchersForRepoQueryParams,
    ActivityListWatchersForRepoPathParams
  >({ url: "/repos/{owner}/{repo}/subscribers", method: "get", ...variables });

/**
 * Lists the people watching the specified repository.
 */
export const useActivityListWatchersForRepo = (
  variables: ActivityListWatchersForRepoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListWatchersForRepoResponse,
      undefined,
      ActivityListWatchersForRepoResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListWatchersForRepoResponse,
    undefined,
    ActivityListWatchersForRepoResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/subscribers",
      operationId: "activityListWatchersForRepo",
      variables,
    }),
    () => fetchActivityListWatchersForRepo({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityDeleteRepoSubscriptionPathParams = {
  owner: string;
  repo: string;
};

export type ActivityDeleteRepoSubscriptionVariables = {
  pathParams: ActivityDeleteRepoSubscriptionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/reference/activity#set-a-repository-subscription).
 */
export const fetchActivityDeleteRepoSubscription = (
  variables: ActivityDeleteRepoSubscriptionVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ActivityDeleteRepoSubscriptionPathParams
  >({
    url: "/repos/{owner}/{repo}/subscription",
    method: "delete",
    ...variables,
  });

/**
 * This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/reference/activity#set-a-repository-subscription).
 */
export const useActivityDeleteRepoSubscription = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActivityDeleteRepoSubscriptionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActivityDeleteRepoSubscriptionVariables
  >(
    (variables: ActivityDeleteRepoSubscriptionVariables) =>
      fetchActivityDeleteRepoSubscription({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActivityGetRepoSubscriptionPathParams = {
  owner: string;
  repo: string;
};

export type ActivityGetRepoSubscriptionVariables = {
  pathParams: ActivityGetRepoSubscriptionPathParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityGetRepoSubscription = (
  variables: ActivityGetRepoSubscriptionVariables
) =>
  githubFetch<
    Schemas.RepositorySubscription,
    undefined,
    {},
    {},
    ActivityGetRepoSubscriptionPathParams
  >({ url: "/repos/{owner}/{repo}/subscription", method: "get", ...variables });

export const useActivityGetRepoSubscription = (
  variables: ActivityGetRepoSubscriptionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RepositorySubscription,
      Responses.Forbidden,
      Schemas.RepositorySubscription
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.RepositorySubscription,
    Responses.Forbidden,
    Schemas.RepositorySubscription
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/subscription",
      operationId: "activityGetRepoSubscription",
      variables,
    }),
    () => fetchActivityGetRepoSubscription({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivitySetRepoSubscriptionPathParams = {
  owner: string;
  repo: string;
};

export type ActivitySetRepoSubscriptionRequestBody = {
  /*
   * Determines if all notifications should be blocked from this repository.
   */
  ignored?: boolean;
  /*
   * Determines if notifications should be received from this repository.
   */
  subscribed?: boolean;
};

export type ActivitySetRepoSubscriptionVariables = {
  body?: ActivitySetRepoSubscriptionRequestBody;
  pathParams: ActivitySetRepoSubscriptionPathParams;
} & GithubContext["fetcherOptions"];

/**
 * If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/reference/activity#delete-a-repository-subscription) completely.
 */
export const fetchActivitySetRepoSubscription = (
  variables: ActivitySetRepoSubscriptionVariables
) =>
  githubFetch<
    Schemas.RepositorySubscription,
    ActivitySetRepoSubscriptionRequestBody,
    {},
    {},
    ActivitySetRepoSubscriptionPathParams
  >({ url: "/repos/{owner}/{repo}/subscription", method: "put", ...variables });

/**
 * If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/reference/activity#delete-a-repository-subscription) completely.
 */
export const useActivitySetRepoSubscription = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RepositorySubscription,
      undefined,
      ActivitySetRepoSubscriptionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.RepositorySubscription,
    undefined,
    ActivitySetRepoSubscriptionVariables
  >(
    (variables: ActivitySetRepoSubscriptionVariables) =>
      fetchActivitySetRepoSubscription({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposListTagsPathParams = {
  owner: string;
  repo: string;
};

export type ReposListTagsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListTagsResponse = Schemas.Tag[];

export type ReposListTagsVariables = {
  pathParams: ReposListTagsPathParams;
  queryParams?: ReposListTagsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposListTags = (variables: ReposListTagsVariables) =>
  githubFetch<
    ReposListTagsResponse,
    undefined,
    {},
    ReposListTagsQueryParams,
    ReposListTagsPathParams
  >({ url: "/repos/{owner}/{repo}/tags", method: "get", ...variables });

export const useReposListTags = (
  variables: ReposListTagsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListTagsResponse,
      undefined,
      ReposListTagsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListTagsResponse,
    undefined,
    ReposListTagsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/tags",
      operationId: "reposListTags",
      variables,
    }),
    () => fetchReposListTags({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposDownloadTarballArchivePathParams = {
  owner: string;
  repo: string;
  ref: string;
};

export type ReposDownloadTarballArchiveVariables = {
  pathParams: ReposDownloadTarballArchivePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
 * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
 * the `Location` header to make a second `GET` request.
 * **Note**: For private repositories, these links are temporary and expire after five minutes.
 */
export const fetchReposDownloadTarballArchive = (
  variables: ReposDownloadTarballArchiveVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ReposDownloadTarballArchivePathParams
  >({
    url: "/repos/{owner}/{repo}/tarball/{ref}",
    method: "get",
    ...variables,
  });

/**
 * Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
 * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
 * the `Location` header to make a second `GET` request.
 * **Note**: For private repositories, these links are temporary and expire after five minutes.
 */
export const useReposDownloadTarballArchive = (
  variables: ReposDownloadTarballArchiveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, undefined, undefined>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, undefined, undefined>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/tarball/{ref}",
      operationId: "reposDownloadTarballArchive",
      variables,
    }),
    () => fetchReposDownloadTarballArchive({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListTeamsPathParams = {
  owner: string;
  repo: string;
};

export type ReposListTeamsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListTeamsResponse = Schemas.Team[];

export type ReposListTeamsVariables = {
  pathParams: ReposListTeamsPathParams;
  queryParams?: ReposListTeamsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposListTeams = (variables: ReposListTeamsVariables) =>
  githubFetch<
    ReposListTeamsResponse,
    undefined,
    {},
    ReposListTeamsQueryParams,
    ReposListTeamsPathParams
  >({ url: "/repos/{owner}/{repo}/teams", method: "get", ...variables });

export const useReposListTeams = (
  variables: ReposListTeamsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListTeamsResponse,
      undefined,
      ReposListTeamsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListTeamsResponse,
    undefined,
    ReposListTeamsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/teams",
      operationId: "reposListTeams",
      variables,
    }),
    () => fetchReposListTeams({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetAllTopicsPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetAllTopicsQueryParams = {
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type ReposGetAllTopicsVariables = {
  pathParams: ReposGetAllTopicsPathParams;
  queryParams?: ReposGetAllTopicsQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchReposGetAllTopics = (variables: ReposGetAllTopicsVariables) =>
  githubFetch<
    Schemas.Topic,
    undefined,
    {},
    ReposGetAllTopicsQueryParams,
    ReposGetAllTopicsPathParams
  >({ url: "/repos/{owner}/{repo}/topics", method: "get", ...variables });

export const useReposGetAllTopics = (
  variables: ReposGetAllTopicsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Topic,
      Responses.NotFound | Responses.PreviewHeaderMissing,
      Schemas.Topic
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Topic,
    Responses.NotFound | Responses.PreviewHeaderMissing,
    Schemas.Topic
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/topics",
      operationId: "reposGetAllTopics",
      variables,
    }),
    () => fetchReposGetAllTopics({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposReplaceAllTopicsPathParams = {
  owner: string;
  repo: string;
};

export type ReposReplaceAllTopicsRequestBody = {
  /*
   * An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.
   */
  names: string[];
};

export type ReposReplaceAllTopicsVariables = {
  body: ReposReplaceAllTopicsRequestBody;
  pathParams: ReposReplaceAllTopicsPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposReplaceAllTopics = (
  variables: ReposReplaceAllTopicsVariables
) =>
  githubFetch<
    Schemas.Topic,
    ReposReplaceAllTopicsRequestBody,
    {},
    {},
    ReposReplaceAllTopicsPathParams
  >({ url: "/repos/{owner}/{repo}/topics", method: "put", ...variables });

export const useReposReplaceAllTopics = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Topic,
      | Responses.NotFound
      | Responses.PreviewHeaderMissing
      | Responses.ValidationFailedSimple,
      ReposReplaceAllTopicsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Topic,
    | Responses.NotFound
    | Responses.PreviewHeaderMissing
    | Responses.ValidationFailedSimple,
    ReposReplaceAllTopicsVariables
  >(
    (variables: ReposReplaceAllTopicsVariables) =>
      fetchReposReplaceAllTopics({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposGetClonesPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetClonesQueryParams = {
  /*
   * Must be one of: `day`, `week`.
   *
   * @default day
   */
  per?: "" | "day" | "week";
};

export type ReposGetClonesVariables = {
  pathParams: ReposGetClonesPathParams;
  queryParams?: ReposGetClonesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
 */
export const fetchReposGetClones = (variables: ReposGetClonesVariables) =>
  githubFetch<
    Schemas.CloneTraffic,
    undefined,
    {},
    ReposGetClonesQueryParams,
    ReposGetClonesPathParams
  >({
    url: "/repos/{owner}/{repo}/traffic/clones",
    method: "get",
    ...variables,
  });

/**
 * Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
 */
export const useReposGetClones = (
  variables: ReposGetClonesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CloneTraffic,
      Responses.Forbidden,
      Schemas.CloneTraffic
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CloneTraffic,
    Responses.Forbidden,
    Schemas.CloneTraffic
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/traffic/clones",
      operationId: "reposGetClones",
      variables,
    }),
    () => fetchReposGetClones({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetTopPathsPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetTopPathsResponse = Schemas.ContentTraffic[];

export type ReposGetTopPathsVariables = {
  pathParams: ReposGetTopPathsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Get the top 10 popular contents over the last 14 days.
 */
export const fetchReposGetTopPaths = (variables: ReposGetTopPathsVariables) =>
  githubFetch<
    ReposGetTopPathsResponse,
    undefined,
    {},
    {},
    ReposGetTopPathsPathParams
  >({
    url: "/repos/{owner}/{repo}/traffic/popular/paths",
    method: "get",
    ...variables,
  });

/**
 * Get the top 10 popular contents over the last 14 days.
 */
export const useReposGetTopPaths = (
  variables: ReposGetTopPathsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetTopPathsResponse,
      Responses.Forbidden,
      ReposGetTopPathsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetTopPathsResponse,
    Responses.Forbidden,
    ReposGetTopPathsResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/traffic/popular/paths",
      operationId: "reposGetTopPaths",
      variables,
    }),
    () => fetchReposGetTopPaths({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetTopReferrersPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetTopReferrersResponse = Schemas.ReferrerTraffic[];

export type ReposGetTopReferrersVariables = {
  pathParams: ReposGetTopReferrersPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Get the top 10 referrers over the last 14 days.
 */
export const fetchReposGetTopReferrers = (
  variables: ReposGetTopReferrersVariables
) =>
  githubFetch<
    ReposGetTopReferrersResponse,
    undefined,
    {},
    {},
    ReposGetTopReferrersPathParams
  >({
    url: "/repos/{owner}/{repo}/traffic/popular/referrers",
    method: "get",
    ...variables,
  });

/**
 * Get the top 10 referrers over the last 14 days.
 */
export const useReposGetTopReferrers = (
  variables: ReposGetTopReferrersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposGetTopReferrersResponse,
      Responses.Forbidden,
      ReposGetTopReferrersResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposGetTopReferrersResponse,
    Responses.Forbidden,
    ReposGetTopReferrersResponse
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/traffic/popular/referrers",
      operationId: "reposGetTopReferrers",
      variables,
    }),
    () => fetchReposGetTopReferrers({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposGetViewsPathParams = {
  owner: string;
  repo: string;
};

export type ReposGetViewsQueryParams = {
  /*
   * Must be one of: `day`, `week`.
   *
   * @default day
   */
  per?: "" | "day" | "week";
};

export type ReposGetViewsVariables = {
  pathParams: ReposGetViewsPathParams;
  queryParams?: ReposGetViewsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
 */
export const fetchReposGetViews = (variables: ReposGetViewsVariables) =>
  githubFetch<
    Schemas.ViewTraffic,
    undefined,
    {},
    ReposGetViewsQueryParams,
    ReposGetViewsPathParams
  >({
    url: "/repos/{owner}/{repo}/traffic/views",
    method: "get",
    ...variables,
  });

/**
 * Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
 */
export const useReposGetViews = (
  variables: ReposGetViewsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ViewTraffic,
      Responses.Forbidden,
      Schemas.ViewTraffic
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ViewTraffic,
    Responses.Forbidden,
    Schemas.ViewTraffic
  >(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/traffic/views",
      operationId: "reposGetViews",
      variables,
    }),
    () => fetchReposGetViews({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposTransferPathParams = {
  owner: string;
  repo: string;
};

export type ReposTransferRequestBody = {
  /*
   * The username or organization name the repository will be transferred to.
   */
  new_owner: string;
  /*
   * ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.
   */
  team_ids?: number[];
};

export type ReposTransferVariables = {
  body: ReposTransferRequestBody;
  pathParams: ReposTransferPathParams;
} & GithubContext["fetcherOptions"];

/**
 * A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/).
 */
export const fetchReposTransfer = (variables: ReposTransferVariables) =>
  githubFetch<
    Schemas.Repository,
    ReposTransferRequestBody,
    {},
    {},
    ReposTransferPathParams
  >({ url: "/repos/{owner}/{repo}/transfer", method: "post", ...variables });

/**
 * A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/).
 */
export const useReposTransfer = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Repository,
      undefined,
      ReposTransferVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Repository,
    undefined,
    ReposTransferVariables
  >(
    (variables: ReposTransferVariables) =>
      fetchReposTransfer({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposDisableVulnerabilityAlertsPathParams = {
  owner: string;
  repo: string;
};

export type ReposDisableVulnerabilityAlertsVariables = {
  pathParams: ReposDisableVulnerabilityAlertsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
 */
export const fetchReposDisableVulnerabilityAlerts = (
  variables: ReposDisableVulnerabilityAlertsVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ReposDisableVulnerabilityAlertsPathParams
  >({
    url: "/repos/{owner}/{repo}/vulnerability-alerts",
    method: "delete",
    ...variables,
  });

/**
 * Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
 */
export const useReposDisableVulnerabilityAlerts = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ReposDisableVulnerabilityAlertsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ReposDisableVulnerabilityAlertsVariables
  >(
    (variables: ReposDisableVulnerabilityAlertsVariables) =>
      fetchReposDisableVulnerabilityAlerts({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposCheckVulnerabilityAlertsPathParams = {
  owner: string;
  repo: string;
};

export type ReposCheckVulnerabilityAlertsVariables = {
  pathParams: ReposCheckVulnerabilityAlertsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
 */
export const fetchReposCheckVulnerabilityAlerts = (
  variables: ReposCheckVulnerabilityAlertsVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ReposCheckVulnerabilityAlertsPathParams
  >({
    url: "/repos/{owner}/{repo}/vulnerability-alerts",
    method: "get",
    ...variables,
  });

/**
 * Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
 */
export const useReposCheckVulnerabilityAlerts = (
  variables: ReposCheckVulnerabilityAlertsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, undefined, undefined>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, undefined, undefined>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/vulnerability-alerts",
      operationId: "reposCheckVulnerabilityAlerts",
      variables,
    }),
    () =>
      fetchReposCheckVulnerabilityAlerts({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposEnableVulnerabilityAlertsPathParams = {
  owner: string;
  repo: string;
};

export type ReposEnableVulnerabilityAlertsVariables = {
  pathParams: ReposEnableVulnerabilityAlertsPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
 */
export const fetchReposEnableVulnerabilityAlerts = (
  variables: ReposEnableVulnerabilityAlertsVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ReposEnableVulnerabilityAlertsPathParams
  >({
    url: "/repos/{owner}/{repo}/vulnerability-alerts",
    method: "put",
    ...variables,
  });

/**
 * Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
 */
export const useReposEnableVulnerabilityAlerts = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ReposEnableVulnerabilityAlertsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ReposEnableVulnerabilityAlertsVariables
  >(
    (variables: ReposEnableVulnerabilityAlertsVariables) =>
      fetchReposEnableVulnerabilityAlerts({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposDownloadZipballArchivePathParams = {
  owner: string;
  repo: string;
  ref: string;
};

export type ReposDownloadZipballArchiveVariables = {
  pathParams: ReposDownloadZipballArchivePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
 * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
 * the `Location` header to make a second `GET` request.
 * **Note**: For private repositories, these links are temporary and expire after five minutes.
 */
export const fetchReposDownloadZipballArchive = (
  variables: ReposDownloadZipballArchiveVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ReposDownloadZipballArchivePathParams
  >({
    url: "/repos/{owner}/{repo}/zipball/{ref}",
    method: "get",
    ...variables,
  });

/**
 * Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
 * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
 * the `Location` header to make a second `GET` request.
 * **Note**: For private repositories, these links are temporary and expire after five minutes.
 */
export const useReposDownloadZipballArchive = (
  variables: ReposDownloadZipballArchiveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, undefined, undefined>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, undefined, undefined>(
    queryKeyFn({
      path: "/repos/{owner}/{repo}/zipball/{ref}",
      operationId: "reposDownloadZipballArchive",
      variables,
    }),
    () => fetchReposDownloadZipballArchive({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateUsingTemplatePathParams = {
  templateOwner: string;
  templateRepo: string;
};

export type ReposCreateUsingTemplateRequestBody = {
  /*
   * A short description of the new repository.
   */
  description?: string;
  /*
   * Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.
   *
   * @default false
   */
  include_all_branches?: boolean;
  /*
   * The name of the new repository.
   */
  name: string;
  /*
   * The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.
   */
  owner?: string;
  /*
   * Either `true` to create a new private repository or `false` to create a new public one.
   *
   * @default false
   */
  private?: boolean;
};

export type ReposCreateUsingTemplateVariables = {
  body: ReposCreateUsingTemplateRequestBody;
  pathParams: ReposCreateUsingTemplatePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
 * *   `repo` scope to create a private repository
 */
export const fetchReposCreateUsingTemplate = (
  variables: ReposCreateUsingTemplateVariables
) =>
  githubFetch<
    Schemas.Repository,
    ReposCreateUsingTemplateRequestBody,
    {},
    {},
    ReposCreateUsingTemplatePathParams
  >({
    url: "/repos/{templateOwner}/{templateRepo}/generate",
    method: "post",
    ...variables,
  });

/**
 * Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
 * *   `repo` scope to create a private repository
 */
export const useReposCreateUsingTemplate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Repository,
      undefined,
      ReposCreateUsingTemplateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Repository,
    undefined,
    ReposCreateUsingTemplateVariables
  >(
    (variables: ReposCreateUsingTemplateVariables) =>
      fetchReposCreateUsingTemplate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposListPublicQueryParams = {
  /*
   * A repository ID. Only return repositories with an ID greater than this ID.
   */
  since?: number;
};

export type ReposListPublicResponse = Schemas.MinimalRepository[];

export type ReposListPublicVariables = {
  queryParams?: ReposListPublicQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all public repositories in the order that they were created.
 *
 * Notes:
 * - For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise.
 * - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
 */
export const fetchReposListPublic = (variables: ReposListPublicVariables) =>
  githubFetch<
    ReposListPublicResponse,
    undefined,
    {},
    ReposListPublicQueryParams,
    {}
  >({ url: "/repositories", method: "get", ...variables });

/**
 * Lists all public repositories in the order that they were created.
 *
 * Notes:
 * - For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise.
 * - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
 */
export const useReposListPublic = (
  variables: ReposListPublicVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListPublicResponse,
      Responses.NotModified | Responses.ValidationFailed,
      ReposListPublicResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListPublicResponse,
    Responses.NotModified | Responses.ValidationFailed,
    ReposListPublicResponse
  >(
    queryKeyFn({
      path: "/repositories",
      operationId: "reposListPublic",
      variables,
    }),
    () => fetchReposListPublic({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsListEnvironmentSecretsPathParams = {
  repositoryId: number;
  /*
   * The name of the environment
   */
  environmentName: string;
};

export type ActionsListEnvironmentSecretsQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActionsListEnvironmentSecretsResponse = {
  secrets: Schemas.ActionsSecret[];
  total_count: number;
};

export type ActionsListEnvironmentSecretsVariables = {
  pathParams: ActionsListEnvironmentSecretsPathParams;
  queryParams?: ActionsListEnvironmentSecretsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const fetchActionsListEnvironmentSecrets = (
  variables: ActionsListEnvironmentSecretsVariables
) =>
  githubFetch<
    ActionsListEnvironmentSecretsResponse,
    undefined,
    {},
    ActionsListEnvironmentSecretsQueryParams,
    ActionsListEnvironmentSecretsPathParams
  >({
    url: "/repositories/{repositoryId}/environments/{environmentName}/secrets",
    method: "get",
    ...variables,
  });

/**
 * Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useActionsListEnvironmentSecrets = (
  variables: ActionsListEnvironmentSecretsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActionsListEnvironmentSecretsResponse,
      undefined,
      ActionsListEnvironmentSecretsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActionsListEnvironmentSecretsResponse,
    undefined,
    ActionsListEnvironmentSecretsResponse
  >(
    queryKeyFn({
      path: "/repositories/{repository_id}/environments/{environment_name}/secrets",
      operationId: "actionsListEnvironmentSecrets",
      variables,
    }),
    () =>
      fetchActionsListEnvironmentSecrets({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsGetEnvironmentPublicKeyPathParams = {
  repositoryId: number;
  /*
   * The name of the environment
   */
  environmentName: string;
};

export type ActionsGetEnvironmentPublicKeyVariables = {
  pathParams: ActionsGetEnvironmentPublicKeyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const fetchActionsGetEnvironmentPublicKey = (
  variables: ActionsGetEnvironmentPublicKeyVariables
) =>
  githubFetch<
    Schemas.ActionsPublicKey,
    undefined,
    {},
    {},
    ActionsGetEnvironmentPublicKeyPathParams
  >({
    url: "/repositories/{repositoryId}/environments/{environmentName}/secrets/public-key",
    method: "get",
    ...variables,
  });

/**
 * Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useActionsGetEnvironmentPublicKey = (
  variables: ActionsGetEnvironmentPublicKeyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsPublicKey,
      undefined,
      Schemas.ActionsPublicKey
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsPublicKey,
    undefined,
    Schemas.ActionsPublicKey
  >(
    queryKeyFn({
      path: "/repositories/{repository_id}/environments/{environment_name}/secrets/public-key",
      operationId: "actionsGetEnvironmentPublicKey",
      variables,
    }),
    () =>
      fetchActionsGetEnvironmentPublicKey({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsDeleteEnvironmentSecretPathParams = {
  repositoryId: number;
  /*
   * The name of the environment
   */
  environmentName: string;
  /*
   * secret_name parameter
   */
  secretName: string;
};

export type ActionsDeleteEnvironmentSecretVariables = {
  pathParams: ActionsDeleteEnvironmentSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a secret in an environment using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const fetchActionsDeleteEnvironmentSecret = (
  variables: ActionsDeleteEnvironmentSecretVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ActionsDeleteEnvironmentSecretPathParams
  >({
    url: "/repositories/{repositoryId}/environments/{environmentName}/secrets/{secretName}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a secret in an environment using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useActionsDeleteEnvironmentSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsDeleteEnvironmentSecretVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsDeleteEnvironmentSecretVariables
  >(
    (variables: ActionsDeleteEnvironmentSecretVariables) =>
      fetchActionsDeleteEnvironmentSecret({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActionsGetEnvironmentSecretPathParams = {
  repositoryId: number;
  /*
   * The name of the environment
   */
  environmentName: string;
  /*
   * secret_name parameter
   */
  secretName: string;
};

export type ActionsGetEnvironmentSecretVariables = {
  pathParams: ActionsGetEnvironmentSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const fetchActionsGetEnvironmentSecret = (
  variables: ActionsGetEnvironmentSecretVariables
) =>
  githubFetch<
    Schemas.ActionsSecret,
    undefined,
    {},
    {},
    ActionsGetEnvironmentSecretPathParams
  >({
    url: "/repositories/{repositoryId}/environments/{environmentName}/secrets/{secretName}",
    method: "get",
    ...variables,
  });

/**
 * Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const useActionsGetEnvironmentSecret = (
  variables: ActionsGetEnvironmentSecretVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsSecret,
      undefined,
      Schemas.ActionsSecret
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsSecret,
    undefined,
    Schemas.ActionsSecret
  >(
    queryKeyFn({
      path: "/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}",
      operationId: "actionsGetEnvironmentSecret",
      variables,
    }),
    () => fetchActionsGetEnvironmentSecret({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActionsCreateOrUpdateEnvironmentSecretPathParams = {
  repositoryId: number;
  /*
   * The name of the environment
   */
  environmentName: string;
  /*
   * secret_name parameter
   */
  secretName: string;
};

export type ActionsCreateOrUpdateEnvironmentSecretRequestBody = {
  /*
   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/reference/actions#get-an-environment-public-key) endpoint.
   *
   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
   */
  encrypted_value?: string;
  /*
   * ID of the key you used to encrypt the secret.
   */
  key_id?: string;
};

export type ActionsCreateOrUpdateEnvironmentSecretVariables = {
  body?: ActionsCreateOrUpdateEnvironmentSecretRequestBody;
  pathParams: ActionsCreateOrUpdateEnvironmentSecretPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Creates or updates an environment secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
 * this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * ```
 * const sodium = require('tweetsodium');
 *
 * const key = "base64-encoded-public-key";
 * const value = "plain-text-secret";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * ```
 *
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const fetchActionsCreateOrUpdateEnvironmentSecret = (
  variables: ActionsCreateOrUpdateEnvironmentSecretVariables
) =>
  githubFetch<
    undefined,
    ActionsCreateOrUpdateEnvironmentSecretRequestBody,
    {},
    {},
    ActionsCreateOrUpdateEnvironmentSecretPathParams
  >({
    url: "/repositories/{repositoryId}/environments/{environmentName}/secrets/{secretName}",
    method: "put",
    ...variables,
  });

/**
 * Creates or updates an environment secret with an encrypted value. Encrypt your secret using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
 * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
 * this endpoint.
 *
 * #### Example encrypting a secret using Node.js
 *
 * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
 *
 * ```
 * const sodium = require('tweetsodium');
 *
 * const key = "base64-encoded-public-key";
 * const value = "plain-text-secret";
 *
 * // Convert the message and key to Uint8Array's (Buffer implements that interface)
 * const messageBytes = Buffer.from(value);
 * const keyBytes = Buffer.from(key, 'base64');
 *
 * // Encrypt using LibSodium.
 * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
 *
 * // Base64 the encrypted secret
 * const encrypted = Buffer.from(encryptedBytes).toString('base64');
 *
 * console.log(encrypted);
 * ```
 *
 *
 * #### Example encrypting a secret using Python
 *
 * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
 *
 * ```
 * from base64 import b64encode
 * from nacl import encoding, public
 *
 * def encrypt(public_key: str, secret_value: str) -> str:
 *   """Encrypt a Unicode string using the public key."""
 *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
 *   sealed_box = public.SealedBox(public_key)
 *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
 *   return b64encode(encrypted).decode("utf-8")
 * ```
 *
 * #### Example encrypting a secret using C#
 *
 * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
 *
 * ```
 * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
 * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
 *
 * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
 *
 * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
 * ```
 *
 * #### Example encrypting a secret using Ruby
 *
 * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
 *
 * ```ruby
 * require "rbnacl"
 * require "base64"
 *
 * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
 * public_key = RbNaCl::PublicKey.new(key)
 *
 * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
 * encrypted_secret = box.encrypt("my_secret")
 *
 * # Print the base64 encoded secret
 * puts Base64.strict_encode64(encrypted_secret)
 * ```
 */
export const useActionsCreateOrUpdateEnvironmentSecret = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      ActionsCreateOrUpdateEnvironmentSecretVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    ActionsCreateOrUpdateEnvironmentSecretVariables
  >(
    (variables: ActionsCreateOrUpdateEnvironmentSecretVariables) =>
      fetchActionsCreateOrUpdateEnvironmentSecret({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminListProvisionedGroupsEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminListProvisionedGroupsEnterpriseQueryParams = {
  /*
   * Used for pagination: the index of the first result to return.
   */
  startIndex?: number;
  /*
   * Used for pagination: the number of results to return.
   */
  count?: number;
  /*
   * filter results
   */
  filter?: string;
  /*
   * attributes to exclude
   */
  excludedAttributes?: string;
};

export type EnterpriseAdminListProvisionedGroupsEnterpriseVariables = {
  pathParams: EnterpriseAdminListProvisionedGroupsEnterprisePathParams;
  queryParams?: EnterpriseAdminListProvisionedGroupsEnterpriseQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const fetchEnterpriseAdminListProvisionedGroupsEnterprise = (
  variables: EnterpriseAdminListProvisionedGroupsEnterpriseVariables
) =>
  githubFetch<
    Schemas.ScimGroupListEnterprise,
    undefined,
    {},
    EnterpriseAdminListProvisionedGroupsEnterpriseQueryParams,
    EnterpriseAdminListProvisionedGroupsEnterprisePathParams
  >({
    url: "/scim/v2/enterprises/{enterprise}/Groups",
    method: "get",
    ...variables,
  });

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const useEnterpriseAdminListProvisionedGroupsEnterprise = (
  variables: EnterpriseAdminListProvisionedGroupsEnterpriseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ScimGroupListEnterprise,
      undefined,
      Schemas.ScimGroupListEnterprise
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ScimGroupListEnterprise,
    undefined,
    Schemas.ScimGroupListEnterprise
  >(
    queryKeyFn({
      path: "/scim/v2/enterprises/{enterprise}/Groups",
      operationId: "enterpriseAdminListProvisionedGroupsEnterprise",
      variables,
    }),
    () =>
      fetchEnterpriseAdminListProvisionedGroupsEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EnterpriseAdminProvisionAndInviteEnterpriseGroupPathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminProvisionAndInviteEnterpriseGroupRequestBody = {
  /*
   * The name of the SCIM group. This must match the GitHub organization that the group maps to.
   */
  displayName: string;
  members?: {
    /*
     * The SCIM user ID for a user.
     */
    value: string;
  }[];
  /*
   * The SCIM schema URIs.
   */
  schemas: string[];
};

export type EnterpriseAdminProvisionAndInviteEnterpriseGroupVariables = {
  body: EnterpriseAdminProvisionAndInviteEnterpriseGroupRequestBody;
  pathParams: EnterpriseAdminProvisionAndInviteEnterpriseGroupPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Provision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.
 */
export const fetchEnterpriseAdminProvisionAndInviteEnterpriseGroup = (
  variables: EnterpriseAdminProvisionAndInviteEnterpriseGroupVariables
) =>
  githubFetch<
    Schemas.ScimEnterpriseGroup,
    EnterpriseAdminProvisionAndInviteEnterpriseGroupRequestBody,
    {},
    {},
    EnterpriseAdminProvisionAndInviteEnterpriseGroupPathParams
  >({
    url: "/scim/v2/enterprises/{enterprise}/Groups",
    method: "post",
    ...variables,
  });

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Provision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.
 */
export const useEnterpriseAdminProvisionAndInviteEnterpriseGroup = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ScimEnterpriseGroup,
      undefined,
      EnterpriseAdminProvisionAndInviteEnterpriseGroupVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ScimEnterpriseGroup,
    undefined,
    EnterpriseAdminProvisionAndInviteEnterpriseGroupVariables
  >(
    (variables: EnterpriseAdminProvisionAndInviteEnterpriseGroupVariables) =>
      fetchEnterpriseAdminProvisionAndInviteEnterpriseGroup({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminDeleteScimGroupFromEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
  /*
   * Identifier generated by the GitHub SCIM endpoint.
   */
  scimGroupId: string;
};

export type EnterpriseAdminDeleteScimGroupFromEnterpriseVariables = {
  pathParams: EnterpriseAdminDeleteScimGroupFromEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const fetchEnterpriseAdminDeleteScimGroupFromEnterprise = (
  variables: EnterpriseAdminDeleteScimGroupFromEnterpriseVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    EnterpriseAdminDeleteScimGroupFromEnterprisePathParams
  >({
    url: "/scim/v2/enterprises/{enterprise}/Groups/{scimGroupId}",
    method: "delete",
    ...variables,
  });

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const useEnterpriseAdminDeleteScimGroupFromEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      EnterpriseAdminDeleteScimGroupFromEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    EnterpriseAdminDeleteScimGroupFromEnterpriseVariables
  >(
    (variables: EnterpriseAdminDeleteScimGroupFromEnterpriseVariables) =>
      fetchEnterpriseAdminDeleteScimGroupFromEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminGetProvisioningInformationForEnterpriseGroupPathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Identifier generated by the GitHub SCIM endpoint.
     */
    scimGroupId: string;
  };

export type EnterpriseAdminGetProvisioningInformationForEnterpriseGroupQueryParams =
  {
    /*
     * Attributes to exclude.
     */
    excludedAttributes?: string;
  };

export type EnterpriseAdminGetProvisioningInformationForEnterpriseGroupVariables =
  {
    pathParams: EnterpriseAdminGetProvisioningInformationForEnterpriseGroupPathParams;
    queryParams?: EnterpriseAdminGetProvisioningInformationForEnterpriseGroupQueryParams;
  } & GithubContext["fetcherOptions"];

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const fetchEnterpriseAdminGetProvisioningInformationForEnterpriseGroup =
  (
    variables: EnterpriseAdminGetProvisioningInformationForEnterpriseGroupVariables
  ) =>
    githubFetch<
      Schemas.ScimEnterpriseGroup,
      undefined,
      {},
      EnterpriseAdminGetProvisioningInformationForEnterpriseGroupQueryParams,
      EnterpriseAdminGetProvisioningInformationForEnterpriseGroupPathParams
    >({
      url: "/scim/v2/enterprises/{enterprise}/Groups/{scimGroupId}",
      method: "get",
      ...variables,
    });

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const useEnterpriseAdminGetProvisioningInformationForEnterpriseGroup = (
  variables: EnterpriseAdminGetProvisioningInformationForEnterpriseGroupVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ScimEnterpriseGroup,
      undefined,
      Schemas.ScimEnterpriseGroup
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ScimEnterpriseGroup,
    undefined,
    Schemas.ScimEnterpriseGroup
  >(
    queryKeyFn({
      path: "/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}",
      operationId:
        "enterpriseAdminGetProvisioningInformationForEnterpriseGroup",
      variables,
    }),
    () =>
      fetchEnterpriseAdminGetProvisioningInformationForEnterpriseGroup({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EnterpriseAdminUpdateAttributeForEnterpriseGroupPathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
  /*
   * Identifier generated by the GitHub SCIM endpoint.
   */
  scimGroupId: string;
};

export type EnterpriseAdminUpdateAttributeForEnterpriseGroupRequestBody = {
  /*
   * Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
   *
   * @minItems 1
   */
  Operations: {
    op: "add" | "Add" | "remove" | "Remove" | "replace" | "Replace";
    path?: string;
    value?: string | Record<string, any> | any[];
  }[];
  /*
   * The SCIM schema URIs.
   */
  schemas: string[];
};

export type EnterpriseAdminUpdateAttributeForEnterpriseGroupVariables = {
  body: EnterpriseAdminUpdateAttributeForEnterpriseGroupRequestBody;
  pathParams: EnterpriseAdminUpdateAttributeForEnterpriseGroupPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Allows you to change a provisioned group’s individual attributes. To change a group’s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
 */
export const fetchEnterpriseAdminUpdateAttributeForEnterpriseGroup = (
  variables: EnterpriseAdminUpdateAttributeForEnterpriseGroupVariables
) =>
  githubFetch<
    Schemas.ScimEnterpriseGroup,
    EnterpriseAdminUpdateAttributeForEnterpriseGroupRequestBody,
    {},
    {},
    EnterpriseAdminUpdateAttributeForEnterpriseGroupPathParams
  >({
    url: "/scim/v2/enterprises/{enterprise}/Groups/{scimGroupId}",
    method: "patch",
    ...variables,
  });

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Allows you to change a provisioned group’s individual attributes. To change a group’s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
 */
export const useEnterpriseAdminUpdateAttributeForEnterpriseGroup = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ScimEnterpriseGroup,
      undefined,
      EnterpriseAdminUpdateAttributeForEnterpriseGroupVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ScimEnterpriseGroup,
    undefined,
    EnterpriseAdminUpdateAttributeForEnterpriseGroupVariables
  >(
    (variables: EnterpriseAdminUpdateAttributeForEnterpriseGroupVariables) =>
      fetchEnterpriseAdminUpdateAttributeForEnterpriseGroup({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminSetInformationForProvisionedEnterpriseGroupPathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * Identifier generated by the GitHub SCIM endpoint.
     */
    scimGroupId: string;
  };

export type EnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequestBody =
  {
    /*
     * The name of the SCIM group. This must match the GitHub organization that the group maps to.
     */
    displayName: string;
    members?: {
      /*
       * The SCIM user ID for a user.
       */
      value: string;
    }[];
    /*
     * The SCIM schema URIs.
     */
    schemas: string[];
  };

export type EnterpriseAdminSetInformationForProvisionedEnterpriseGroupVariables =
  {
    body: EnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequestBody;
    pathParams: EnterpriseAdminSetInformationForProvisionedEnterpriseGroupPathParams;
  } & GithubContext["fetcherOptions"];

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Replaces an existing provisioned group’s information. You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don't provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.
 */
export const fetchEnterpriseAdminSetInformationForProvisionedEnterpriseGroup = (
  variables: EnterpriseAdminSetInformationForProvisionedEnterpriseGroupVariables
) =>
  githubFetch<
    Schemas.ScimEnterpriseGroup,
    EnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequestBody,
    {},
    {},
    EnterpriseAdminSetInformationForProvisionedEnterpriseGroupPathParams
  >({
    url: "/scim/v2/enterprises/{enterprise}/Groups/{scimGroupId}",
    method: "put",
    ...variables,
  });

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Replaces an existing provisioned group’s information. You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don't provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.
 */
export const useEnterpriseAdminSetInformationForProvisionedEnterpriseGroup = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ScimEnterpriseGroup,
      undefined,
      EnterpriseAdminSetInformationForProvisionedEnterpriseGroupVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ScimEnterpriseGroup,
    undefined,
    EnterpriseAdminSetInformationForProvisionedEnterpriseGroupVariables
  >(
    (
      variables: EnterpriseAdminSetInformationForProvisionedEnterpriseGroupVariables
    ) =>
      fetchEnterpriseAdminSetInformationForProvisionedEnterpriseGroup({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminListProvisionedIdentitiesEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminListProvisionedIdentitiesEnterpriseQueryParams = {
  /*
   * Used for pagination: the index of the first result to return.
   */
  startIndex?: number;
  /*
   * Used for pagination: the number of results to return.
   */
  count?: number;
  /*
   * filter results
   */
  filter?: string;
};

export type EnterpriseAdminListProvisionedIdentitiesEnterpriseVariables = {
  pathParams: EnterpriseAdminListProvisionedIdentitiesEnterprisePathParams;
  queryParams?: EnterpriseAdminListProvisionedIdentitiesEnterpriseQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Retrieves a paginated list of all provisioned enterprise members, including pending invitations.
 *
 * When a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
 *   - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account's metadata is preserved to allow the user to re-join the organization in the future.
 *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
 *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
 *
 * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
 *
 * 1. The user is granted access by the IdP and is not a member of the GitHub enterprise.
 *
 * 1. The user attempts to access the GitHub enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
 *
 * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:
 *    - If the user signs in, their GitHub account is linked to this entry.
 *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub enterprise, and the external identity `null` entry remains in place.
 */
export const fetchEnterpriseAdminListProvisionedIdentitiesEnterprise = (
  variables: EnterpriseAdminListProvisionedIdentitiesEnterpriseVariables
) =>
  githubFetch<
    Schemas.ScimUserListEnterprise,
    undefined,
    {},
    EnterpriseAdminListProvisionedIdentitiesEnterpriseQueryParams,
    EnterpriseAdminListProvisionedIdentitiesEnterprisePathParams
  >({
    url: "/scim/v2/enterprises/{enterprise}/Users",
    method: "get",
    ...variables,
  });

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Retrieves a paginated list of all provisioned enterprise members, including pending invitations.
 *
 * When a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
 *   - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account's metadata is preserved to allow the user to re-join the organization in the future.
 *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
 *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
 *
 * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
 *
 * 1. The user is granted access by the IdP and is not a member of the GitHub enterprise.
 *
 * 1. The user attempts to access the GitHub enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
 *
 * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:
 *    - If the user signs in, their GitHub account is linked to this entry.
 *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub enterprise, and the external identity `null` entry remains in place.
 */
export const useEnterpriseAdminListProvisionedIdentitiesEnterprise = (
  variables: EnterpriseAdminListProvisionedIdentitiesEnterpriseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ScimUserListEnterprise,
      undefined,
      Schemas.ScimUserListEnterprise
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ScimUserListEnterprise,
    undefined,
    Schemas.ScimUserListEnterprise
  >(
    queryKeyFn({
      path: "/scim/v2/enterprises/{enterprise}/Users",
      operationId: "enterpriseAdminListProvisionedIdentitiesEnterprise",
      variables,
    }),
    () =>
      fetchEnterpriseAdminListProvisionedIdentitiesEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EnterpriseAdminProvisionAndInviteEnterpriseUserPathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
};

export type EnterpriseAdminProvisionAndInviteEnterpriseUserRequestBody = {
  /*
   * List of user emails.
   */
  emails: {
    /*
     * Whether this email address is the primary address.
     */
    primary: boolean;
    /*
     * The type of email address.
     */
    type: string;
    /*
     * The email address.
     */
    value: string;
  }[];
  /*
   * List of SCIM group IDs the user is a member of.
   */
  groups?: {
    value?: string;
  }[];
  name: {
    /*
     * The last name of the user.
     */
    familyName: string;
    /*
     * The first name of the user.
     */
    givenName: string;
  };
  /*
   * The SCIM schema URIs.
   */
  schemas: string[];
  /*
   * The username for the user.
   */
  userName: string;
};

export type EnterpriseAdminProvisionAndInviteEnterpriseUserVariables = {
  body: EnterpriseAdminProvisionAndInviteEnterpriseUserRequestBody;
  pathParams: EnterpriseAdminProvisionAndInviteEnterpriseUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Provision enterprise membership for a user, and send organization invitation emails to the email address.
 *
 * You can optionally include the groups a user will be invited to join. If you do not provide a list of `groups`, the user is provisioned for the enterprise, but no organization invitation emails will be sent.
 */
export const fetchEnterpriseAdminProvisionAndInviteEnterpriseUser = (
  variables: EnterpriseAdminProvisionAndInviteEnterpriseUserVariables
) =>
  githubFetch<
    Schemas.ScimEnterpriseUser,
    EnterpriseAdminProvisionAndInviteEnterpriseUserRequestBody,
    {},
    {},
    EnterpriseAdminProvisionAndInviteEnterpriseUserPathParams
  >({
    url: "/scim/v2/enterprises/{enterprise}/Users",
    method: "post",
    ...variables,
  });

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Provision enterprise membership for a user, and send organization invitation emails to the email address.
 *
 * You can optionally include the groups a user will be invited to join. If you do not provide a list of `groups`, the user is provisioned for the enterprise, but no organization invitation emails will be sent.
 */
export const useEnterpriseAdminProvisionAndInviteEnterpriseUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ScimEnterpriseUser,
      undefined,
      EnterpriseAdminProvisionAndInviteEnterpriseUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ScimEnterpriseUser,
    undefined,
    EnterpriseAdminProvisionAndInviteEnterpriseUserVariables
  >(
    (variables: EnterpriseAdminProvisionAndInviteEnterpriseUserVariables) =>
      fetchEnterpriseAdminProvisionAndInviteEnterpriseUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminDeleteUserFromEnterprisePathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
  /*
   * scim_user_id parameter
   */
  scimUserId: string;
};

export type EnterpriseAdminDeleteUserFromEnterpriseVariables = {
  pathParams: EnterpriseAdminDeleteUserFromEnterprisePathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const fetchEnterpriseAdminDeleteUserFromEnterprise = (
  variables: EnterpriseAdminDeleteUserFromEnterpriseVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    EnterpriseAdminDeleteUserFromEnterprisePathParams
  >({
    url: "/scim/v2/enterprises/{enterprise}/Users/{scimUserId}",
    method: "delete",
    ...variables,
  });

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const useEnterpriseAdminDeleteUserFromEnterprise = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      EnterpriseAdminDeleteUserFromEnterpriseVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    EnterpriseAdminDeleteUserFromEnterpriseVariables
  >(
    (variables: EnterpriseAdminDeleteUserFromEnterpriseVariables) =>
      fetchEnterpriseAdminDeleteUserFromEnterprise({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminGetProvisioningInformationForEnterpriseUserPathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * scim_user_id parameter
     */
    scimUserId: string;
  };

export type EnterpriseAdminGetProvisioningInformationForEnterpriseUserVariables =
  {
    pathParams: EnterpriseAdminGetProvisioningInformationForEnterpriseUserPathParams;
  } & GithubContext["fetcherOptions"];

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const fetchEnterpriseAdminGetProvisioningInformationForEnterpriseUser = (
  variables: EnterpriseAdminGetProvisioningInformationForEnterpriseUserVariables
) =>
  githubFetch<
    Schemas.ScimEnterpriseUser,
    undefined,
    {},
    {},
    EnterpriseAdminGetProvisioningInformationForEnterpriseUserPathParams
  >({
    url: "/scim/v2/enterprises/{enterprise}/Users/{scimUserId}",
    method: "get",
    ...variables,
  });

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 */
export const useEnterpriseAdminGetProvisioningInformationForEnterpriseUser = (
  variables: EnterpriseAdminGetProvisioningInformationForEnterpriseUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ScimEnterpriseUser,
      undefined,
      Schemas.ScimEnterpriseUser
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ScimEnterpriseUser,
    undefined,
    Schemas.ScimEnterpriseUser
  >(
    queryKeyFn({
      path: "/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}",
      operationId: "enterpriseAdminGetProvisioningInformationForEnterpriseUser",
      variables,
    }),
    () =>
      fetchEnterpriseAdminGetProvisioningInformationForEnterpriseUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EnterpriseAdminUpdateAttributeForEnterpriseUserPathParams = {
  /*
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  enterprise: string;
  /*
   * scim_user_id parameter
   */
  scimUserId: string;
};

export type EnterpriseAdminUpdateAttributeForEnterpriseUserRequestBody = {
  /*
   * Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
   */
  Operations: Record<string, any>[];
  /*
   * The SCIM schema URIs.
   */
  schemas: string[];
};

export type EnterpriseAdminUpdateAttributeForEnterpriseUserVariables = {
  body: EnterpriseAdminUpdateAttributeForEnterpriseUserRequestBody;
  pathParams: EnterpriseAdminUpdateAttributeForEnterpriseUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
 *
 * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
 *
 * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the enterprise, deletes the external identity, and deletes the associated `:scim_user_id`.
 *
 * ```
 * {
 *   "Operations":[{
 *     "op":"replace",
 *     "value":{
 *       "active":false
 *     }
 *   }]
 * }
 * ```
 */
export const fetchEnterpriseAdminUpdateAttributeForEnterpriseUser = (
  variables: EnterpriseAdminUpdateAttributeForEnterpriseUserVariables
) =>
  githubFetch<
    Schemas.ScimEnterpriseUser,
    EnterpriseAdminUpdateAttributeForEnterpriseUserRequestBody,
    {},
    {},
    EnterpriseAdminUpdateAttributeForEnterpriseUserPathParams
  >({
    url: "/scim/v2/enterprises/{enterprise}/Users/{scimUserId}",
    method: "patch",
    ...variables,
  });

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
 *
 * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
 *
 * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the enterprise, deletes the external identity, and deletes the associated `:scim_user_id`.
 *
 * ```
 * {
 *   "Operations":[{
 *     "op":"replace",
 *     "value":{
 *       "active":false
 *     }
 *   }]
 * }
 * ```
 */
export const useEnterpriseAdminUpdateAttributeForEnterpriseUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ScimEnterpriseUser,
      undefined,
      EnterpriseAdminUpdateAttributeForEnterpriseUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ScimEnterpriseUser,
    undefined,
    EnterpriseAdminUpdateAttributeForEnterpriseUserVariables
  >(
    (variables: EnterpriseAdminUpdateAttributeForEnterpriseUserVariables) =>
      fetchEnterpriseAdminUpdateAttributeForEnterpriseUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type EnterpriseAdminSetInformationForProvisionedEnterpriseUserPathParams =
  {
    /*
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
    /*
     * scim_user_id parameter
     */
    scimUserId: string;
  };

export type EnterpriseAdminSetInformationForProvisionedEnterpriseUserRequestBody =
  {
    /*
     * List of user emails.
     */
    emails: {
      /*
       * Whether this email address is the primary address.
       */
      primary: boolean;
      /*
       * The type of email address.
       */
      type: string;
      /*
       * The email address.
       */
      value: string;
    }[];
    /*
     * List of SCIM group IDs the user is a member of.
     */
    groups?: {
      value?: string;
    }[];
    name: {
      /*
       * The last name of the user.
       */
      familyName: string;
      /*
       * The first name of the user.
       */
      givenName: string;
    };
    /*
     * The SCIM schema URIs.
     */
    schemas: string[];
    /*
     * The username for the user.
     */
    userName: string;
  };

export type EnterpriseAdminSetInformationForProvisionedEnterpriseUserVariables =
  {
    body: EnterpriseAdminSetInformationForProvisionedEnterpriseUserRequestBody;
    pathParams: EnterpriseAdminSetInformationForProvisionedEnterpriseUserPathParams;
  } & GithubContext["fetcherOptions"];

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead.
 *
 * You must at least provide the required values for the user: `userName`, `name`, and `emails`.
 *
 * **Warning:** Setting `active: false` removes the user from the enterprise, deletes the external identity, and deletes the associated `{scim_user_id}`.
 */
export const fetchEnterpriseAdminSetInformationForProvisionedEnterpriseUser = (
  variables: EnterpriseAdminSetInformationForProvisionedEnterpriseUserVariables
) =>
  githubFetch<
    Schemas.ScimEnterpriseUser,
    EnterpriseAdminSetInformationForProvisionedEnterpriseUserRequestBody,
    {},
    {},
    EnterpriseAdminSetInformationForProvisionedEnterpriseUserPathParams
  >({
    url: "/scim/v2/enterprises/{enterprise}/Users/{scimUserId}",
    method: "put",
    ...variables,
  });

/**
 * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
 *
 * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead.
 *
 * You must at least provide the required values for the user: `userName`, `name`, and `emails`.
 *
 * **Warning:** Setting `active: false` removes the user from the enterprise, deletes the external identity, and deletes the associated `{scim_user_id}`.
 */
export const useEnterpriseAdminSetInformationForProvisionedEnterpriseUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ScimEnterpriseUser,
      undefined,
      EnterpriseAdminSetInformationForProvisionedEnterpriseUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.ScimEnterpriseUser,
    undefined,
    EnterpriseAdminSetInformationForProvisionedEnterpriseUserVariables
  >(
    (
      variables: EnterpriseAdminSetInformationForProvisionedEnterpriseUserVariables
    ) =>
      fetchEnterpriseAdminSetInformationForProvisionedEnterpriseUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ScimListProvisionedIdentitiesPathParams = {
  org: string;
};

export type ScimListProvisionedIdentitiesQueryParams = {
  /*
   * Used for pagination: the index of the first result to return.
   */
  startIndex?: number;
  /*
   * Used for pagination: the number of results to return.
   */
  count?: number;
  /*
   * Filters results using the equals query parameter operator (`eq`). You can filter results that are equal to `id`, `userName`, `emails`, and `external_id`. For example, to search for an identity with the `userName` Octocat, you would use this query:
   *
   * `?filter=userName%20eq%20\"Octocat\"`.
   *
   * To filter results for the identity with the email `octocat@github.com`, you would use this query:
   *
   * `?filter=emails%20eq%20\"octocat@github.com\"`.
   */
  filter?: string;
};

export type ScimListProvisionedIdentitiesVariables = {
  pathParams: ScimListProvisionedIdentitiesPathParams;
  queryParams?: ScimListProvisionedIdentitiesQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Retrieves a paginated list of all provisioned organization members, including pending invitations. If you provide the `filter` parameter, the resources for all matching provisions members are returned.
 *
 * When a user with a SAML-provisioned external identity leaves (or is removed from) an organization, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
 *   - When a user with a SCIM-provisioned external identity is removed from an organization, the account's metadata is preserved to allow the user to re-join the organization in the future.
 *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
 *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
 *
 * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
 *
 * 1. The user is granted access by the IdP and is not a member of the GitHub organization.
 *
 * 1. The user attempts to access the GitHub organization and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
 *
 * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:
 *    - If the user signs in, their GitHub account is linked to this entry.
 *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub organization, and the external identity `null` entry remains in place.
 */
export const fetchScimListProvisionedIdentities = (
  variables: ScimListProvisionedIdentitiesVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    ScimListProvisionedIdentitiesQueryParams,
    ScimListProvisionedIdentitiesPathParams
  >({ url: "/scim/v2/organizations/{org}/Users", method: "get", ...variables });

/**
 * Retrieves a paginated list of all provisioned organization members, including pending invitations. If you provide the `filter` parameter, the resources for all matching provisions members are returned.
 *
 * When a user with a SAML-provisioned external identity leaves (or is removed from) an organization, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
 *   - When a user with a SCIM-provisioned external identity is removed from an organization, the account's metadata is preserved to allow the user to re-join the organization in the future.
 *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
 *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
 *
 * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
 *
 * 1. The user is granted access by the IdP and is not a member of the GitHub organization.
 *
 * 1. The user attempts to access the GitHub organization and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
 *
 * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:
 *    - If the user signs in, their GitHub account is linked to this entry.
 *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub organization, and the external identity `null` entry remains in place.
 */
export const useScimListProvisionedIdentities = (
  variables: ScimListProvisionedIdentitiesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      | Responses.NotModified
      | Responses.ScimBadRequest
      | Responses.ScimForbidden
      | Responses.ScimNotFound,
      undefined
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    | Responses.NotModified
    | Responses.ScimBadRequest
    | Responses.ScimForbidden
    | Responses.ScimNotFound,
    undefined
  >(
    queryKeyFn({
      path: "/scim/v2/organizations/{org}/Users",
      operationId: "scimListProvisionedIdentities",
      variables,
    }),
    () =>
      fetchScimListProvisionedIdentities({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ScimProvisionAndInviteUserPathParams = {
  org: string;
};

export type ScimProvisionAndInviteUserRequestBody = {
  active?: boolean;
  /*
   * The name of the user, suitable for display to end-users
   *
   * @example Jon Doe
   */
  displayName?: string;
  /*
   * user emails
   *
   * @example [object Object]
   * @example [object Object]
   * @minItems 1
   */
  emails: {
    primary?: boolean;
    type?: string;
    value: string;
  }[];
  externalId?: string;
  groups?: string[];
  /*
   * @example {"familyName":"User","givenName":"Jane"}
   */
  name: {
    familyName: string;
    formatted?: string;
    givenName: string;
  };
  schemas?: string[];
  /*
   * Configured by the admin. Could be an email, login, or username
   *
   * @example someone@example.com
   */
  userName: string;
};

export type ScimProvisionAndInviteUserVariables = {
  body: ScimProvisionAndInviteUserRequestBody;
  pathParams: ScimProvisionAndInviteUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Provision organization membership for a user, and send an activation email to the email address.
 */
export const fetchScimProvisionAndInviteUser = (
  variables: ScimProvisionAndInviteUserVariables
) =>
  githubFetch<
    undefined,
    ScimProvisionAndInviteUserRequestBody,
    {},
    {},
    ScimProvisionAndInviteUserPathParams
  >({
    url: "/scim/v2/organizations/{org}/Users",
    method: "post",
    ...variables,
  });

/**
 * Provision organization membership for a user, and send an activation email to the email address.
 */
export const useScimProvisionAndInviteUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotModified
      | Responses.ScimBadRequest
      | Responses.ScimForbidden
      | Responses.ScimNotFound
      | Responses.ScimConflict
      | Responses.ScimInternalError,
      ScimProvisionAndInviteUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotModified
    | Responses.ScimBadRequest
    | Responses.ScimForbidden
    | Responses.ScimNotFound
    | Responses.ScimConflict
    | Responses.ScimInternalError,
    ScimProvisionAndInviteUserVariables
  >(
    (variables: ScimProvisionAndInviteUserVariables) =>
      fetchScimProvisionAndInviteUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ScimDeleteUserFromOrgPathParams = {
  org: string;
  /*
   * scim_user_id parameter
   */
  scimUserId: string;
};

export type ScimDeleteUserFromOrgVariables = {
  pathParams: ScimDeleteUserFromOrgPathParams;
} & GithubContext["fetcherOptions"];

export const fetchScimDeleteUserFromOrg = (
  variables: ScimDeleteUserFromOrgVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ScimDeleteUserFromOrgPathParams>({
    url: "/scim/v2/organizations/{org}/Users/{scimUserId}",
    method: "delete",
    ...variables,
  });

export const useScimDeleteUserFromOrg = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotModified | Responses.ScimForbidden | Responses.ScimNotFound,
      ScimDeleteUserFromOrgVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotModified | Responses.ScimForbidden | Responses.ScimNotFound,
    ScimDeleteUserFromOrgVariables
  >(
    (variables: ScimDeleteUserFromOrgVariables) =>
      fetchScimDeleteUserFromOrg({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ScimGetProvisioningInformationForUserPathParams = {
  org: string;
  /*
   * scim_user_id parameter
   */
  scimUserId: string;
};

export type ScimGetProvisioningInformationForUserVariables = {
  pathParams: ScimGetProvisioningInformationForUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchScimGetProvisioningInformationForUser = (
  variables: ScimGetProvisioningInformationForUserVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ScimGetProvisioningInformationForUserPathParams
  >({
    url: "/scim/v2/organizations/{org}/Users/{scimUserId}",
    method: "get",
    ...variables,
  });

export const useScimGetProvisioningInformationForUser = (
  variables: ScimGetProvisioningInformationForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      Responses.NotModified | Responses.ScimForbidden | Responses.ScimNotFound,
      undefined
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    Responses.NotModified | Responses.ScimForbidden | Responses.ScimNotFound,
    undefined
  >(
    queryKeyFn({
      path: "/scim/v2/organizations/{org}/Users/{scim_user_id}",
      operationId: "scimGetProvisioningInformationForUser",
      variables,
    }),
    () =>
      fetchScimGetProvisioningInformationForUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ScimUpdateAttributeForUserPathParams = {
  org: string;
  /*
   * scim_user_id parameter
   */
  scimUserId: string;
};

export type ScimUpdateAttributeForUserRequestBody = {
  /*
   * Set of operations to be performed
   *
   * @example [object Object]
   * @minItems 1
   */
  Operations: {
    op: "add" | "remove" | "replace";
    path?: string;
    value?:
      | {
          active?: boolean | null;
          externalId?: string | null;
          familyName?: string | null;
          givenName?: string | null;
          userName?: string | null;
        }
      | {
          primary?: boolean;
          value?: string;
        }[]
      | string;
  }[];
  schemas?: string[];
};

export type ScimUpdateAttributeForUserVariables = {
  body: ScimUpdateAttributeForUserRequestBody;
  pathParams: ScimUpdateAttributeForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
 *
 * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
 *
 * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the organization, deletes the external identity, and deletes the associated `:scim_user_id`.
 *
 * ```
 * {
 *   "Operations":[{
 *     "op":"replace",
 *     "value":{
 *       "active":false
 *     }
 *   }]
 * }
 * ```
 */
export const fetchScimUpdateAttributeForUser = (
  variables: ScimUpdateAttributeForUserVariables
) =>
  githubFetch<
    undefined,
    ScimUpdateAttributeForUserRequestBody,
    {},
    {},
    ScimUpdateAttributeForUserPathParams
  >({
    url: "/scim/v2/organizations/{org}/Users/{scimUserId}",
    method: "patch",
    ...variables,
  });

/**
 * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
 *
 * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
 *
 * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the organization, deletes the external identity, and deletes the associated `:scim_user_id`.
 *
 * ```
 * {
 *   "Operations":[{
 *     "op":"replace",
 *     "value":{
 *       "active":false
 *     }
 *   }]
 * }
 * ```
 */
export const useScimUpdateAttributeForUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotModified
      | Responses.ScimBadRequest
      | Responses.ScimForbidden
      | Responses.ScimNotFound
      | Schemas.BasicError,
      ScimUpdateAttributeForUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotModified
    | Responses.ScimBadRequest
    | Responses.ScimForbidden
    | Responses.ScimNotFound
    | Schemas.BasicError,
    ScimUpdateAttributeForUserVariables
  >(
    (variables: ScimUpdateAttributeForUserVariables) =>
      fetchScimUpdateAttributeForUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ScimSetInformationForProvisionedUserPathParams = {
  org: string;
  /*
   * scim_user_id parameter
   */
  scimUserId: string;
};

export type ScimSetInformationForProvisionedUserRequestBody = {
  active?: boolean;
  /*
   * The name of the user, suitable for display to end-users
   *
   * @example Jon Doe
   */
  displayName?: string;
  /*
   * user emails
   *
   * @example [object Object]
   * @example [object Object]
   * @minItems 1
   */
  emails: {
    primary?: boolean;
    type?: string;
    value: string;
  }[];
  externalId?: string;
  groups?: string[];
  /*
   * @example {"familyName":"User","givenName":"Jane"}
   */
  name: {
    familyName: string;
    formatted?: string;
    givenName: string;
  };
  schemas?: string[];
  /*
   * Configured by the admin. Could be an email, login, or username
   *
   * @example someone@example.com
   */
  userName: string;
};

export type ScimSetInformationForProvisionedUserVariables = {
  body: ScimSetInformationForProvisionedUserRequestBody;
  pathParams: ScimSetInformationForProvisionedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](https://docs.github.com/rest/reference/scim#update-an-attribute-for-a-scim-user) endpoint instead.
 *
 * You must at least provide the required values for the user: `userName`, `name`, and `emails`.
 *
 * **Warning:** Setting `active: false` removes the user from the organization, deletes the external identity, and deletes the associated `{scim_user_id}`.
 */
export const fetchScimSetInformationForProvisionedUser = (
  variables: ScimSetInformationForProvisionedUserVariables
) =>
  githubFetch<
    undefined,
    ScimSetInformationForProvisionedUserRequestBody,
    {},
    {},
    ScimSetInformationForProvisionedUserPathParams
  >({
    url: "/scim/v2/organizations/{org}/Users/{scimUserId}",
    method: "put",
    ...variables,
  });

/**
 * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](https://docs.github.com/rest/reference/scim#update-an-attribute-for-a-scim-user) endpoint instead.
 *
 * You must at least provide the required values for the user: `userName`, `name`, and `emails`.
 *
 * **Warning:** Setting `active: false` removes the user from the organization, deletes the external identity, and deletes the associated `{scim_user_id}`.
 */
export const useScimSetInformationForProvisionedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotModified | Responses.ScimForbidden | Responses.ScimNotFound,
      ScimSetInformationForProvisionedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotModified | Responses.ScimForbidden | Responses.ScimNotFound,
    ScimSetInformationForProvisionedUserVariables
  >(
    (variables: ScimSetInformationForProvisionedUserVariables) =>
      fetchScimSetInformationForProvisionedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type SearchCodeQueryParams = {
  /*
   * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching code](https://help.github.com/articles/searching-code/)" for a detailed list of qualifiers.
   */
  q: string;
  /*
   * Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
   */
  sort?: "indexed";
  /*
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   *
   * @default desc
   */
  order?: "desc" | "asc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type SearchCodeResponse = {
  incomplete_results: boolean;
  items: Schemas.CodeSearchResultItem[];
  total_count: number;
};

export type SearchCodeVariables = {
  queryParams: SearchCodeQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
 *
 * `q=addClass+in:file+language:js+repo:jquery/jquery`
 *
 * This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
 *
 * #### Considerations for code search
 *
 * Due to the complexity of searching code, there are a few restrictions on how searches are performed:
 *
 * *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
 * *   Only files smaller than 384 KB are searchable.
 * *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
 * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
 */
export const fetchSearchCode = (variables: SearchCodeVariables) =>
  githubFetch<SearchCodeResponse, undefined, {}, SearchCodeQueryParams, {}>({
    url: "/search/code",
    method: "get",
    ...variables,
  });

/**
 * Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
 *
 * `q=addClass+in:file+language:js+repo:jquery/jquery`
 *
 * This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
 *
 * #### Considerations for code search
 *
 * Due to the complexity of searching code, there are a few restrictions on how searches are performed:
 *
 * *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
 * *   Only files smaller than 384 KB are searchable.
 * *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
 * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
 */
export const useSearchCode = (
  variables: SearchCodeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SearchCodeResponse,
      | Responses.NotModified
      | Responses.Forbidden
      | Responses.ValidationFailed
      | Responses.ServiceUnavailable,
      SearchCodeResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    SearchCodeResponse,
    | Responses.NotModified
    | Responses.Forbidden
    | Responses.ValidationFailed
    | Responses.ServiceUnavailable,
    SearchCodeResponse
  >(
    queryKeyFn({ path: "/search/code", operationId: "searchCode", variables }),
    () => fetchSearchCode({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SearchCommitsQueryParams = {
  /*
   * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching commits](https://help.github.com/articles/searching-commits/)" for a detailed list of qualifiers.
   */
  q: string;
  /*
   * Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
   */
  sort?: "author-date" | "committer-date";
  /*
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   *
   * @default desc
   */
  order?: "desc" | "asc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type SearchCommitsResponse = {
  incomplete_results: boolean;
  items: Schemas.CommitSearchResultItem[];
  total_count: number;
};

export type SearchCommitsVariables = {
  queryParams: SearchCommitsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
 * metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
 *
 * `q=repo:octocat/Spoon-Knife+css`
 */
export const fetchSearchCommits = (variables: SearchCommitsVariables) =>
  githubFetch<
    SearchCommitsResponse,
    undefined,
    {},
    SearchCommitsQueryParams,
    {}
  >({ url: "/search/commits", method: "get", ...variables });

/**
 * Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
 * metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
 *
 * `q=repo:octocat/Spoon-Knife+css`
 */
export const useSearchCommits = (
  variables: SearchCommitsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SearchCommitsResponse,
      Responses.NotModified | Responses.PreviewHeaderMissing,
      SearchCommitsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    SearchCommitsResponse,
    Responses.NotModified | Responses.PreviewHeaderMissing,
    SearchCommitsResponse
  >(
    queryKeyFn({
      path: "/search/commits",
      operationId: "searchCommits",
      variables,
    }),
    () => fetchSearchCommits({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SearchIssuesAndPullRequestsQueryParams = {
  /*
   * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching issues and pull requests](https://help.github.com/articles/searching-issues-and-pull-requests/)" for a detailed list of qualifiers.
   */
  q: string;
  /*
   * Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
   */
  sort?:
    | "comments"
    | "reactions"
    | "reactions-+1"
    | "reactions--1"
    | "reactions-smile"
    | "reactions-thinking_face"
    | "reactions-heart"
    | "reactions-tada"
    | "interactions"
    | "created"
    | "updated";
  /*
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   *
   * @default desc
   */
  order?: "desc" | "asc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type SearchIssuesAndPullRequestsResponse = {
  incomplete_results: boolean;
  items: Schemas.IssueSearchResultItem[];
  total_count: number;
};

export type SearchIssuesAndPullRequestsVariables = {
  queryParams: SearchIssuesAndPullRequestsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
 * search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
 *
 * `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
 *
 * This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
 *
 * **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
 */
export const fetchSearchIssuesAndPullRequests = (
  variables: SearchIssuesAndPullRequestsVariables
) =>
  githubFetch<
    SearchIssuesAndPullRequestsResponse,
    undefined,
    {},
    SearchIssuesAndPullRequestsQueryParams,
    {}
  >({ url: "/search/issues", method: "get", ...variables });

/**
 * Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
 * search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
 *
 * `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
 *
 * This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
 *
 * **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
 */
export const useSearchIssuesAndPullRequests = (
  variables: SearchIssuesAndPullRequestsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SearchIssuesAndPullRequestsResponse,
      | Responses.NotModified
      | Responses.Forbidden
      | Responses.ValidationFailed
      | Responses.ServiceUnavailable,
      SearchIssuesAndPullRequestsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    SearchIssuesAndPullRequestsResponse,
    | Responses.NotModified
    | Responses.Forbidden
    | Responses.ValidationFailed
    | Responses.ServiceUnavailable,
    SearchIssuesAndPullRequestsResponse
  >(
    queryKeyFn({
      path: "/search/issues",
      operationId: "searchIssuesAndPullRequests",
      variables,
    }),
    () => fetchSearchIssuesAndPullRequests({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SearchLabelsQueryParams = {
  /*
   * The id of the repository.
   */
  repository_id: number;
  /*
   * The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
   */
  q: string;
  /*
   * Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
   */
  sort?: "created" | "updated";
  /*
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   *
   * @default desc
   */
  order?: "desc" | "asc";
};

export type SearchLabelsResponse = {
  incomplete_results: boolean;
  items: Schemas.LabelSearchResultItem[];
  total_count: number;
};

export type SearchLabelsVariables = {
  queryParams: SearchLabelsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
 *
 * `q=bug+defect+enhancement&repository_id=64778136`
 *
 * The labels that best match the query appear first in the search results.
 */
export const fetchSearchLabels = (variables: SearchLabelsVariables) =>
  githubFetch<SearchLabelsResponse, undefined, {}, SearchLabelsQueryParams, {}>(
    { url: "/search/labels", method: "get", ...variables }
  );

/**
 * Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
 *
 * `q=bug+defect+enhancement&repository_id=64778136`
 *
 * The labels that best match the query appear first in the search results.
 */
export const useSearchLabels = (
  variables: SearchLabelsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SearchLabelsResponse,
      | Responses.NotModified
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.ValidationFailed,
      SearchLabelsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    SearchLabelsResponse,
    | Responses.NotModified
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.ValidationFailed,
    SearchLabelsResponse
  >(
    queryKeyFn({
      path: "/search/labels",
      operationId: "searchLabels",
      variables,
    }),
    () => fetchSearchLabels({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SearchReposQueryParams = {
  /*
   * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching for repositories](https://help.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers.
   */
  q: string;
  /*
   * Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
   */
  sort?: "stars" | "forks" | "help-wanted-issues" | "updated";
  /*
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   *
   * @default desc
   */
  order?: "desc" | "asc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type SearchReposResponse = {
  incomplete_results: boolean;
  items: Schemas.RepoSearchResultItem[];
  total_count: number;
};

export type SearchReposVariables = {
  queryParams: SearchReposQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
 *
 * `q=tetris+language:assembly&sort=stars&order=desc`
 *
 * This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
 *
 * When you include the `mercy` preview header, you can also search for multiple topics by adding more `topic:` instances. For example, your query might look like this:
 *
 * `q=topic:ruby+topic:rails`
 */
export const fetchSearchRepos = (variables: SearchReposVariables) =>
  githubFetch<SearchReposResponse, undefined, {}, SearchReposQueryParams, {}>({
    url: "/search/repositories",
    method: "get",
    ...variables,
  });

/**
 * Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
 *
 * `q=tetris+language:assembly&sort=stars&order=desc`
 *
 * This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
 *
 * When you include the `mercy` preview header, you can also search for multiple topics by adding more `topic:` instances. For example, your query might look like this:
 *
 * `q=topic:ruby+topic:rails`
 */
export const useSearchRepos = (
  variables: SearchReposVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SearchReposResponse,
      | Responses.NotModified
      | Responses.ValidationFailed
      | Responses.ServiceUnavailable,
      SearchReposResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    SearchReposResponse,
    | Responses.NotModified
    | Responses.ValidationFailed
    | Responses.ServiceUnavailable,
    SearchReposResponse
  >(
    queryKeyFn({
      path: "/search/repositories",
      operationId: "searchRepos",
      variables,
    }),
    () => fetchSearchRepos({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SearchTopicsQueryParams = {
  /*
   * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
   */
  q: string;
};

export type SearchTopicsResponse = {
  incomplete_results: boolean;
  items: Schemas.TopicSearchResultItem[];
  total_count: number;
};

export type SearchTopicsVariables = {
  queryParams: SearchTopicsQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://help.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
 *
 * When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
 *
 * `q=ruby+is:featured`
 *
 * This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
 */
export const fetchSearchTopics = (variables: SearchTopicsVariables) =>
  githubFetch<SearchTopicsResponse, undefined, {}, SearchTopicsQueryParams, {}>(
    { url: "/search/topics", method: "get", ...variables }
  );

/**
 * Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://help.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
 *
 * When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
 *
 * `q=ruby+is:featured`
 *
 * This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
 */
export const useSearchTopics = (
  variables: SearchTopicsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SearchTopicsResponse,
      Responses.NotModified | Responses.PreviewHeaderMissing,
      SearchTopicsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    SearchTopicsResponse,
    Responses.NotModified | Responses.PreviewHeaderMissing,
    SearchTopicsResponse
  >(
    queryKeyFn({
      path: "/search/topics",
      operationId: "searchTopics",
      variables,
    }),
    () => fetchSearchTopics({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SearchUsersQueryParams = {
  /*
   * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching users](https://help.github.com/articles/searching-users/)" for a detailed list of qualifiers.
   */
  q: string;
  /*
   * Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
   */
  sort?: "followers" | "repositories" | "joined";
  /*
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   *
   * @default desc
   */
  order?: "desc" | "asc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type SearchUsersResponse = {
  incomplete_results: boolean;
  items: Schemas.UserSearchResultItem[];
  total_count: number;
};

export type SearchUsersVariables = {
  queryParams: SearchUsersQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you're looking for a list of popular users, you might try this query:
 *
 * `q=tom+repos:%3E42+followers:%3E1000`
 *
 * This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
 */
export const fetchSearchUsers = (variables: SearchUsersVariables) =>
  githubFetch<SearchUsersResponse, undefined, {}, SearchUsersQueryParams, {}>({
    url: "/search/users",
    method: "get",
    ...variables,
  });

/**
 * Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
 *
 * When searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
 *
 * For example, if you're looking for a list of popular users, you might try this query:
 *
 * `q=tom+repos:%3E42+followers:%3E1000`
 *
 * This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
 */
export const useSearchUsers = (
  variables: SearchUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SearchUsersResponse,
      | Responses.NotModified
      | Responses.ValidationFailed
      | Responses.ServiceUnavailable,
      SearchUsersResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    SearchUsersResponse,
    | Responses.NotModified
    | Responses.ValidationFailed
    | Responses.ServiceUnavailable,
    SearchUsersResponse
  >(
    queryKeyFn({
      path: "/search/users",
      operationId: "searchUsers",
      variables,
    }),
    () => fetchSearchUsers({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsDeleteLegacyPathParams = {
  teamId: number;
};

export type TeamsDeleteLegacyVariables = {
  pathParams: TeamsDeleteLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint.
 *
 * To delete a team, the authenticated user must be an organization owner or team maintainer.
 *
 * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
 */
export const fetchTeamsDeleteLegacy = (variables: TeamsDeleteLegacyVariables) =>
  githubFetch<undefined, undefined, {}, {}, TeamsDeleteLegacyPathParams>({
    url: "/teams/{teamId}",
    method: "delete",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint.
 *
 * To delete a team, the authenticated user must be an organization owner or team maintainer.
 *
 * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
 */
export const useTeamsDeleteLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotFound | Responses.ValidationFailed,
      TeamsDeleteLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotFound | Responses.ValidationFailed,
    TeamsDeleteLegacyVariables
  >(
    (variables: TeamsDeleteLegacyVariables) =>
      fetchTeamsDeleteLegacy({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsGetLegacyPathParams = {
  teamId: number;
};

export type TeamsGetLegacyVariables = {
  pathParams: TeamsGetLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint.
 */
export const fetchTeamsGetLegacy = (variables: TeamsGetLegacyVariables) =>
  githubFetch<Schemas.TeamFull, undefined, {}, {}, TeamsGetLegacyPathParams>({
    url: "/teams/{teamId}",
    method: "get",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint.
 */
export const useTeamsGetLegacy = (
  variables: TeamsGetLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamFull,
      Responses.NotFound,
      Schemas.TeamFull
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamFull,
    Responses.NotFound,
    Schemas.TeamFull
  >(
    queryKeyFn({
      path: "/teams/{team_id}",
      operationId: "teamsGetLegacy",
      variables,
    }),
    () => fetchTeamsGetLegacy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsUpdateLegacyPathParams = {
  teamId: number;
};

export type TeamsUpdateLegacyRequestBody = {
  /*
   * The description of the team.
   */
  description?: string;
  /*
   * The name of the team.
   */
  name: string;
  /*
   * The ID of a team to set as the parent team.
   */
  parent_team_id?: number | null;
  /*
   * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
   * \* `pull` - team members can pull, but not push to or administer newly-added repositories.
   * \* `push` - team members can pull and push, but not administer newly-added repositories.
   * \* `admin` - team members can pull, push and administer newly-added repositories.
   *
   * @default pull
   */
  permission?: "pull" | "push" | "admin";
  /*
   * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:
   * **For a non-nested team:**
   * \* `secret` - only visible to organization owners and members of this team.
   * \* `closed` - visible to all members of this organization.
   * **For a parent or child team:**
   * \* `closed` - visible to all members of this organization.
   */
  privacy?: "secret" | "closed";
};

export type TeamsUpdateLegacyVariables = {
  body: TeamsUpdateLegacyRequestBody;
  pathParams: TeamsUpdateLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint.
 *
 * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
 *
 * **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
 */
export const fetchTeamsUpdateLegacy = (variables: TeamsUpdateLegacyVariables) =>
  githubFetch<
    Schemas.TeamFull,
    TeamsUpdateLegacyRequestBody,
    {},
    {},
    TeamsUpdateLegacyPathParams
  >({ url: "/teams/{teamId}", method: "patch", ...variables });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint.
 *
 * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
 *
 * **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
 */
export const useTeamsUpdateLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamFull,
      Responses.Forbidden | Responses.NotFound | Responses.ValidationFailed,
      TeamsUpdateLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamFull,
    Responses.Forbidden | Responses.NotFound | Responses.ValidationFailed,
    TeamsUpdateLegacyVariables
  >(
    (variables: TeamsUpdateLegacyVariables) =>
      fetchTeamsUpdateLegacy({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsListDiscussionsLegacyPathParams = {
  teamId: number;
};

export type TeamsListDiscussionsLegacyQueryParams = {
  /*
   * One of `asc` (ascending) or `desc` (descending).
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListDiscussionsLegacyResponse = Schemas.TeamDiscussion[];

export type TeamsListDiscussionsLegacyVariables = {
  pathParams: TeamsListDiscussionsLegacyPathParams;
  queryParams?: TeamsListDiscussionsLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.
 *
 * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchTeamsListDiscussionsLegacy = (
  variables: TeamsListDiscussionsLegacyVariables
) =>
  githubFetch<
    TeamsListDiscussionsLegacyResponse,
    undefined,
    {},
    TeamsListDiscussionsLegacyQueryParams,
    TeamsListDiscussionsLegacyPathParams
  >({ url: "/teams/{teamId}/discussions", method: "get", ...variables });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.
 *
 * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useTeamsListDiscussionsLegacy = (
  variables: TeamsListDiscussionsLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListDiscussionsLegacyResponse,
      undefined,
      TeamsListDiscussionsLegacyResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListDiscussionsLegacyResponse,
    undefined,
    TeamsListDiscussionsLegacyResponse
  >(
    queryKeyFn({
      path: "/teams/{team_id}/discussions",
      operationId: "teamsListDiscussionsLegacy",
      variables,
    }),
    () => fetchTeamsListDiscussionsLegacy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsCreateDiscussionLegacyPathParams = {
  teamId: number;
};

export type TeamsCreateDiscussionLegacyRequestBody = {
  /*
   * The discussion post's body text.
   */
  body: string;
  /*
   * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
   *
   * @default false
   */
  private?: boolean;
  /*
   * The discussion post's title.
   */
  title: string;
};

export type TeamsCreateDiscussionLegacyVariables = {
  body: TeamsCreateDiscussionLegacyRequestBody;
  pathParams: TeamsCreateDiscussionLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.
 *
 * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const fetchTeamsCreateDiscussionLegacy = (
  variables: TeamsCreateDiscussionLegacyVariables
) =>
  githubFetch<
    Schemas.TeamDiscussion,
    TeamsCreateDiscussionLegacyRequestBody,
    {},
    {},
    TeamsCreateDiscussionLegacyPathParams
  >({ url: "/teams/{teamId}/discussions", method: "post", ...variables });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.
 *
 * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const useTeamsCreateDiscussionLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamDiscussion,
      undefined,
      TeamsCreateDiscussionLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamDiscussion,
    undefined,
    TeamsCreateDiscussionLegacyVariables
  >(
    (variables: TeamsCreateDiscussionLegacyVariables) =>
      fetchTeamsCreateDiscussionLegacy({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsDeleteDiscussionLegacyPathParams = {
  teamId: number;
  discussionNumber: number;
};

export type TeamsDeleteDiscussionLegacyVariables = {
  pathParams: TeamsDeleteDiscussionLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.
 *
 * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchTeamsDeleteDiscussionLegacy = (
  variables: TeamsDeleteDiscussionLegacyVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    TeamsDeleteDiscussionLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}",
    method: "delete",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.
 *
 * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useTeamsDeleteDiscussionLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      TeamsDeleteDiscussionLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    TeamsDeleteDiscussionLegacyVariables
  >(
    (variables: TeamsDeleteDiscussionLegacyVariables) =>
      fetchTeamsDeleteDiscussionLegacy({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsGetDiscussionLegacyPathParams = {
  teamId: number;
  discussionNumber: number;
};

export type TeamsGetDiscussionLegacyVariables = {
  pathParams: TeamsGetDiscussionLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.
 *
 * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchTeamsGetDiscussionLegacy = (
  variables: TeamsGetDiscussionLegacyVariables
) =>
  githubFetch<
    Schemas.TeamDiscussion,
    undefined,
    {},
    {},
    TeamsGetDiscussionLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}",
    method: "get",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.
 *
 * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useTeamsGetDiscussionLegacy = (
  variables: TeamsGetDiscussionLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamDiscussion,
      undefined,
      Schemas.TeamDiscussion
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamDiscussion,
    undefined,
    Schemas.TeamDiscussion
  >(
    queryKeyFn({
      path: "/teams/{team_id}/discussions/{discussion_number}",
      operationId: "teamsGetDiscussionLegacy",
      variables,
    }),
    () => fetchTeamsGetDiscussionLegacy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsUpdateDiscussionLegacyPathParams = {
  teamId: number;
  discussionNumber: number;
};

export type TeamsUpdateDiscussionLegacyRequestBody = {
  /*
   * The discussion post's body text.
   */
  body?: string;
  /*
   * The discussion post's title.
   */
  title?: string;
};

export type TeamsUpdateDiscussionLegacyVariables = {
  body?: TeamsUpdateDiscussionLegacyRequestBody;
  pathParams: TeamsUpdateDiscussionLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint.
 *
 * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchTeamsUpdateDiscussionLegacy = (
  variables: TeamsUpdateDiscussionLegacyVariables
) =>
  githubFetch<
    Schemas.TeamDiscussion,
    TeamsUpdateDiscussionLegacyRequestBody,
    {},
    {},
    TeamsUpdateDiscussionLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}",
    method: "patch",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint.
 *
 * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useTeamsUpdateDiscussionLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamDiscussion,
      undefined,
      TeamsUpdateDiscussionLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamDiscussion,
    undefined,
    TeamsUpdateDiscussionLegacyVariables
  >(
    (variables: TeamsUpdateDiscussionLegacyVariables) =>
      fetchTeamsUpdateDiscussionLegacy({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsListDiscussionCommentsLegacyPathParams = {
  teamId: number;
  discussionNumber: number;
};

export type TeamsListDiscussionCommentsLegacyQueryParams = {
  /*
   * One of `asc` (ascending) or `desc` (descending).
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListDiscussionCommentsLegacyResponse =
  Schemas.TeamDiscussionComment[];

export type TeamsListDiscussionCommentsLegacyVariables = {
  pathParams: TeamsListDiscussionCommentsLegacyPathParams;
  queryParams?: TeamsListDiscussionCommentsLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.
 *
 * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchTeamsListDiscussionCommentsLegacy = (
  variables: TeamsListDiscussionCommentsLegacyVariables
) =>
  githubFetch<
    TeamsListDiscussionCommentsLegacyResponse,
    undefined,
    {},
    TeamsListDiscussionCommentsLegacyQueryParams,
    TeamsListDiscussionCommentsLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/comments",
    method: "get",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.
 *
 * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useTeamsListDiscussionCommentsLegacy = (
  variables: TeamsListDiscussionCommentsLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListDiscussionCommentsLegacyResponse,
      undefined,
      TeamsListDiscussionCommentsLegacyResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListDiscussionCommentsLegacyResponse,
    undefined,
    TeamsListDiscussionCommentsLegacyResponse
  >(
    queryKeyFn({
      path: "/teams/{team_id}/discussions/{discussion_number}/comments",
      operationId: "teamsListDiscussionCommentsLegacy",
      variables,
    }),
    () =>
      fetchTeamsListDiscussionCommentsLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsCreateDiscussionCommentLegacyPathParams = {
  teamId: number;
  discussionNumber: number;
};

export type TeamsCreateDiscussionCommentLegacyRequestBody = {
  /*
   * The discussion comment's body text.
   */
  body: string;
};

export type TeamsCreateDiscussionCommentLegacyVariables = {
  body: TeamsCreateDiscussionCommentLegacyRequestBody;
  pathParams: TeamsCreateDiscussionCommentLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.
 *
 * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const fetchTeamsCreateDiscussionCommentLegacy = (
  variables: TeamsCreateDiscussionCommentLegacyVariables
) =>
  githubFetch<
    Schemas.TeamDiscussionComment,
    TeamsCreateDiscussionCommentLegacyRequestBody,
    {},
    {},
    TeamsCreateDiscussionCommentLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/comments",
    method: "post",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.
 *
 * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 *
 * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const useTeamsCreateDiscussionCommentLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamDiscussionComment,
      undefined,
      TeamsCreateDiscussionCommentLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamDiscussionComment,
    undefined,
    TeamsCreateDiscussionCommentLegacyVariables
  >(
    (variables: TeamsCreateDiscussionCommentLegacyVariables) =>
      fetchTeamsCreateDiscussionCommentLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsDeleteDiscussionCommentLegacyPathParams = {
  teamId: number;
  discussionNumber: number;
  commentNumber: number;
};

export type TeamsDeleteDiscussionCommentLegacyVariables = {
  pathParams: TeamsDeleteDiscussionCommentLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.
 *
 * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchTeamsDeleteDiscussionCommentLegacy = (
  variables: TeamsDeleteDiscussionCommentLegacyVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    TeamsDeleteDiscussionCommentLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/comments/{commentNumber}",
    method: "delete",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.
 *
 * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useTeamsDeleteDiscussionCommentLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      TeamsDeleteDiscussionCommentLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    TeamsDeleteDiscussionCommentLegacyVariables
  >(
    (variables: TeamsDeleteDiscussionCommentLegacyVariables) =>
      fetchTeamsDeleteDiscussionCommentLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsGetDiscussionCommentLegacyPathParams = {
  teamId: number;
  discussionNumber: number;
  commentNumber: number;
};

export type TeamsGetDiscussionCommentLegacyVariables = {
  pathParams: TeamsGetDiscussionCommentLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.
 *
 * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchTeamsGetDiscussionCommentLegacy = (
  variables: TeamsGetDiscussionCommentLegacyVariables
) =>
  githubFetch<
    Schemas.TeamDiscussionComment,
    undefined,
    {},
    {},
    TeamsGetDiscussionCommentLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/comments/{commentNumber}",
    method: "get",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.
 *
 * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useTeamsGetDiscussionCommentLegacy = (
  variables: TeamsGetDiscussionCommentLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamDiscussionComment,
      undefined,
      Schemas.TeamDiscussionComment
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamDiscussionComment,
    undefined,
    Schemas.TeamDiscussionComment
  >(
    queryKeyFn({
      path: "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}",
      operationId: "teamsGetDiscussionCommentLegacy",
      variables,
    }),
    () =>
      fetchTeamsGetDiscussionCommentLegacy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsUpdateDiscussionCommentLegacyPathParams = {
  teamId: number;
  discussionNumber: number;
  commentNumber: number;
};

export type TeamsUpdateDiscussionCommentLegacyRequestBody = {
  /*
   * The discussion comment's body text.
   */
  body: string;
};

export type TeamsUpdateDiscussionCommentLegacyVariables = {
  body: TeamsUpdateDiscussionCommentLegacyRequestBody;
  pathParams: TeamsUpdateDiscussionCommentLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.
 *
 * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchTeamsUpdateDiscussionCommentLegacy = (
  variables: TeamsUpdateDiscussionCommentLegacyVariables
) =>
  githubFetch<
    Schemas.TeamDiscussionComment,
    TeamsUpdateDiscussionCommentLegacyRequestBody,
    {},
    {},
    TeamsUpdateDiscussionCommentLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/comments/{commentNumber}",
    method: "patch",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.
 *
 * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useTeamsUpdateDiscussionCommentLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamDiscussionComment,
      undefined,
      TeamsUpdateDiscussionCommentLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamDiscussionComment,
    undefined,
    TeamsUpdateDiscussionCommentLegacyVariables
  >(
    (variables: TeamsUpdateDiscussionCommentLegacyVariables) =>
      fetchTeamsUpdateDiscussionCommentLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReactionsListForTeamDiscussionCommentLegacyPathParams = {
  teamId: number;
  discussionNumber: number;
  commentNumber: number;
};

export type ReactionsListForTeamDiscussionCommentLegacyQueryParams = {
  /*
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForTeamDiscussionCommentLegacyResponse =
  Schemas.Reaction[];

export type ReactionsListForTeamDiscussionCommentLegacyVariables = {
  pathParams: ReactionsListForTeamDiscussionCommentLegacyPathParams;
  queryParams?: ReactionsListForTeamDiscussionCommentLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
 *
 * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchReactionsListForTeamDiscussionCommentLegacy = (
  variables: ReactionsListForTeamDiscussionCommentLegacyVariables
) =>
  githubFetch<
    ReactionsListForTeamDiscussionCommentLegacyResponse,
    undefined,
    {},
    ReactionsListForTeamDiscussionCommentLegacyQueryParams,
    ReactionsListForTeamDiscussionCommentLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/comments/{commentNumber}/reactions",
    method: "get",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
 *
 * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useReactionsListForTeamDiscussionCommentLegacy = (
  variables: ReactionsListForTeamDiscussionCommentLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForTeamDiscussionCommentLegacyResponse,
      undefined,
      ReactionsListForTeamDiscussionCommentLegacyResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForTeamDiscussionCommentLegacyResponse,
    undefined,
    ReactionsListForTeamDiscussionCommentLegacyResponse
  >(
    queryKeyFn({
      path: "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
      operationId: "reactionsListForTeamDiscussionCommentLegacy",
      variables,
    }),
    () =>
      fetchReactionsListForTeamDiscussionCommentLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReactionsCreateForTeamDiscussionCommentLegacyPathParams = {
  teamId: number;
  discussionNumber: number;
  commentNumber: number;
};

export type ReactionsCreateForTeamDiscussionCommentLegacyRequestBody = {
  /*
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
};

export type ReactionsCreateForTeamDiscussionCommentLegacyVariables = {
  body: ReactionsCreateForTeamDiscussionCommentLegacyRequestBody;
  pathParams: ReactionsCreateForTeamDiscussionCommentLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.
 *
 * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.
 */
export const fetchReactionsCreateForTeamDiscussionCommentLegacy = (
  variables: ReactionsCreateForTeamDiscussionCommentLegacyVariables
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForTeamDiscussionCommentLegacyRequestBody,
    {},
    {},
    ReactionsCreateForTeamDiscussionCommentLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/comments/{commentNumber}/reactions",
    method: "post",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.
 *
 * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.
 */
export const useReactionsCreateForTeamDiscussionCommentLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      undefined,
      ReactionsCreateForTeamDiscussionCommentLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    undefined,
    ReactionsCreateForTeamDiscussionCommentLegacyVariables
  >(
    (variables: ReactionsCreateForTeamDiscussionCommentLegacyVariables) =>
      fetchReactionsCreateForTeamDiscussionCommentLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReactionsListForTeamDiscussionLegacyPathParams = {
  teamId: number;
  discussionNumber: number;
};

export type ReactionsListForTeamDiscussionLegacyQueryParams = {
  /*
   * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
   */
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReactionsListForTeamDiscussionLegacyResponse = Schemas.Reaction[];

export type ReactionsListForTeamDiscussionLegacyVariables = {
  pathParams: ReactionsListForTeamDiscussionLegacyPathParams;
  queryParams?: ReactionsListForTeamDiscussionLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
 *
 * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchReactionsListForTeamDiscussionLegacy = (
  variables: ReactionsListForTeamDiscussionLegacyVariables
) =>
  githubFetch<
    ReactionsListForTeamDiscussionLegacyResponse,
    undefined,
    {},
    ReactionsListForTeamDiscussionLegacyQueryParams,
    ReactionsListForTeamDiscussionLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/reactions",
    method: "get",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
 *
 * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useReactionsListForTeamDiscussionLegacy = (
  variables: ReactionsListForTeamDiscussionLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReactionsListForTeamDiscussionLegacyResponse,
      undefined,
      ReactionsListForTeamDiscussionLegacyResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReactionsListForTeamDiscussionLegacyResponse,
    undefined,
    ReactionsListForTeamDiscussionLegacyResponse
  >(
    queryKeyFn({
      path: "/teams/{team_id}/discussions/{discussion_number}/reactions",
      operationId: "reactionsListForTeamDiscussionLegacy",
      variables,
    }),
    () =>
      fetchReactionsListForTeamDiscussionLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReactionsCreateForTeamDiscussionLegacyPathParams = {
  teamId: number;
  discussionNumber: number;
};

export type ReactionsCreateForTeamDiscussionLegacyRequestBody = {
  /*
   * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.
   */
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes";
};

export type ReactionsCreateForTeamDiscussionLegacyVariables = {
  body: ReactionsCreateForTeamDiscussionLegacyRequestBody;
  pathParams: ReactionsCreateForTeamDiscussionLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.
 *
 * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.
 */
export const fetchReactionsCreateForTeamDiscussionLegacy = (
  variables: ReactionsCreateForTeamDiscussionLegacyVariables
) =>
  githubFetch<
    Schemas.Reaction,
    ReactionsCreateForTeamDiscussionLegacyRequestBody,
    {},
    {},
    ReactionsCreateForTeamDiscussionLegacyPathParams
  >({
    url: "/teams/{teamId}/discussions/{discussionNumber}/reactions",
    method: "post",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.
 *
 * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.
 */
export const useReactionsCreateForTeamDiscussionLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reaction,
      undefined,
      ReactionsCreateForTeamDiscussionLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Reaction,
    undefined,
    ReactionsCreateForTeamDiscussionLegacyVariables
  >(
    (variables: ReactionsCreateForTeamDiscussionLegacyVariables) =>
      fetchReactionsCreateForTeamDiscussionLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsListPendingInvitationsLegacyPathParams = {
  teamId: number;
};

export type TeamsListPendingInvitationsLegacyQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListPendingInvitationsLegacyResponse =
  Schemas.OrganizationInvitation[];

export type TeamsListPendingInvitationsLegacyVariables = {
  pathParams: TeamsListPendingInvitationsLegacyPathParams;
  queryParams?: TeamsListPendingInvitationsLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.
 *
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 */
export const fetchTeamsListPendingInvitationsLegacy = (
  variables: TeamsListPendingInvitationsLegacyVariables
) =>
  githubFetch<
    TeamsListPendingInvitationsLegacyResponse,
    undefined,
    {},
    TeamsListPendingInvitationsLegacyQueryParams,
    TeamsListPendingInvitationsLegacyPathParams
  >({ url: "/teams/{teamId}/invitations", method: "get", ...variables });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.
 *
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
 */
export const useTeamsListPendingInvitationsLegacy = (
  variables: TeamsListPendingInvitationsLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListPendingInvitationsLegacyResponse,
      undefined,
      TeamsListPendingInvitationsLegacyResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListPendingInvitationsLegacyResponse,
    undefined,
    TeamsListPendingInvitationsLegacyResponse
  >(
    queryKeyFn({
      path: "/teams/{team_id}/invitations",
      operationId: "teamsListPendingInvitationsLegacy",
      variables,
    }),
    () =>
      fetchTeamsListPendingInvitationsLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsListMembersLegacyPathParams = {
  teamId: number;
};

export type TeamsListMembersLegacyQueryParams = {
  /*
   * Filters members returned by their role in the team. Can be one of:
   * \* `member` - normal members of the team.
   * \* `maintainer` - team maintainers.
   * \* `all` - all members of the team.
   *
   * @default all
   */
  role?: "member" | "maintainer" | "all";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListMembersLegacyResponse = Schemas.SimpleUser[];

export type TeamsListMembersLegacyVariables = {
  pathParams: TeamsListMembersLegacyPathParams;
  queryParams?: TeamsListMembersLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.
 *
 * Team members will include the members of child teams.
 */
export const fetchTeamsListMembersLegacy = (
  variables: TeamsListMembersLegacyVariables
) =>
  githubFetch<
    TeamsListMembersLegacyResponse,
    undefined,
    {},
    TeamsListMembersLegacyQueryParams,
    TeamsListMembersLegacyPathParams
  >({ url: "/teams/{teamId}/members", method: "get", ...variables });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.
 *
 * Team members will include the members of child teams.
 */
export const useTeamsListMembersLegacy = (
  variables: TeamsListMembersLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListMembersLegacyResponse,
      Responses.NotFound,
      TeamsListMembersLegacyResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListMembersLegacyResponse,
    Responses.NotFound,
    TeamsListMembersLegacyResponse
  >(
    queryKeyFn({
      path: "/teams/{team_id}/members",
      operationId: "teamsListMembersLegacy",
      variables,
    }),
    () => fetchTeamsListMembersLegacy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsRemoveMemberLegacyPathParams = {
  teamId: number;
  username: string;
};

export type TeamsRemoveMemberLegacyVariables = {
  pathParams: TeamsRemoveMemberLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The "Remove team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 */
export const fetchTeamsRemoveMemberLegacy = (
  variables: TeamsRemoveMemberLegacyVariables
) =>
  githubFetch<undefined, undefined, {}, {}, TeamsRemoveMemberLegacyPathParams>({
    url: "/teams/{teamId}/members/{username}",
    method: "delete",
    ...variables,
  });

/**
 * The "Remove team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 */
export const useTeamsRemoveMemberLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      TeamsRemoveMemberLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    TeamsRemoveMemberLegacyVariables
  >(
    (variables: TeamsRemoveMemberLegacyVariables) =>
      fetchTeamsRemoveMemberLegacy({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsGetMemberLegacyPathParams = {
  teamId: number;
  username: string;
};

export type TeamsGetMemberLegacyVariables = {
  pathParams: TeamsGetMemberLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The "Get team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
 *
 * To list members in a team, the team must be visible to the authenticated user.
 */
export const fetchTeamsGetMemberLegacy = (
  variables: TeamsGetMemberLegacyVariables
) =>
  githubFetch<undefined, undefined, {}, {}, TeamsGetMemberLegacyPathParams>({
    url: "/teams/{teamId}/members/{username}",
    method: "get",
    ...variables,
  });

/**
 * The "Get team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
 *
 * To list members in a team, the team must be visible to the authenticated user.
 */
export const useTeamsGetMemberLegacy = (
  variables: TeamsGetMemberLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, undefined, undefined>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, undefined, undefined>(
    queryKeyFn({
      path: "/teams/{team_id}/members/{username}",
      operationId: "teamsGetMemberLegacy",
      variables,
    }),
    () => fetchTeamsGetMemberLegacy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsAddMemberLegacyPathParams = {
  teamId: number;
  username: string;
};

export type TeamsAddMemberLegacyVariables = {
  pathParams: TeamsAddMemberLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * The "Add team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const fetchTeamsAddMemberLegacy = (
  variables: TeamsAddMemberLegacyVariables
) =>
  githubFetch<undefined, undefined, {}, {}, TeamsAddMemberLegacyPathParams>({
    url: "/teams/{teamId}/members/{username}",
    method: "put",
    ...variables,
  });

/**
 * The "Add team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const useTeamsAddMemberLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.Forbidden
      | {
          /*
           * @example "https://docs.github.com/rest"
           */
          documentation_url?: string;
          errors?: {
            code?: string;
            field?: string;
            resource?: string;
          }[];
          message?: string;
        },
      TeamsAddMemberLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.Forbidden
    | {
        /*
         * @example "https://docs.github.com/rest"
         */
        documentation_url?: string;
        errors?: {
          code?: string;
          field?: string;
          resource?: string;
        }[];
        message?: string;
      },
    TeamsAddMemberLegacyVariables
  >(
    (variables: TeamsAddMemberLegacyVariables) =>
      fetchTeamsAddMemberLegacy({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsRemoveMembershipForUserLegacyPathParams = {
  teamId: number;
  username: string;
};

export type TeamsRemoveMembershipForUserLegacyVariables = {
  pathParams: TeamsRemoveMembershipForUserLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 */
export const fetchTeamsRemoveMembershipForUserLegacy = (
  variables: TeamsRemoveMembershipForUserLegacyVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    TeamsRemoveMembershipForUserLegacyPathParams
  >({
    url: "/teams/{teamId}/memberships/{username}",
    method: "delete",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 */
export const useTeamsRemoveMembershipForUserLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      TeamsRemoveMembershipForUserLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    TeamsRemoveMembershipForUserLegacyVariables
  >(
    (variables: TeamsRemoveMembershipForUserLegacyVariables) =>
      fetchTeamsRemoveMembershipForUserLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsGetMembershipForUserLegacyPathParams = {
  teamId: number;
  username: string;
};

export type TeamsGetMembershipForUserLegacyVariables = {
  pathParams: TeamsGetMembershipForUserLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.
 *
 * Team members will include the members of child teams.
 *
 * To get a user's membership with a team, the team must be visible to the authenticated user.
 *
 * **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
 */
export const fetchTeamsGetMembershipForUserLegacy = (
  variables: TeamsGetMembershipForUserLegacyVariables
) =>
  githubFetch<
    Schemas.TeamMembership,
    undefined,
    {},
    {},
    TeamsGetMembershipForUserLegacyPathParams
  >({
    url: "/teams/{teamId}/memberships/{username}",
    method: "get",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.
 *
 * Team members will include the members of child teams.
 *
 * To get a user's membership with a team, the team must be visible to the authenticated user.
 *
 * **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
 */
export const useTeamsGetMembershipForUserLegacy = (
  variables: TeamsGetMembershipForUserLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamMembership,
      Responses.NotFound,
      Schemas.TeamMembership
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamMembership,
    Responses.NotFound,
    Schemas.TeamMembership
  >(
    queryKeyFn({
      path: "/teams/{team_id}/memberships/{username}",
      operationId: "teamsGetMembershipForUserLegacy",
      variables,
    }),
    () =>
      fetchTeamsGetMembershipForUserLegacy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsAddOrUpdateMembershipForUserLegacyPathParams = {
  teamId: number;
  username: string;
};

export type TeamsAddOrUpdateMembershipForUserLegacyRequestBody = {
  /*
   * The role that this user should have in the team. Can be one of:
   * \* `member` - a normal member of the team.
   * \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
   *
   * @default member
   */
  role?: "member" | "maintainer";
};

export type TeamsAddOrUpdateMembershipForUserLegacyVariables = {
  body?: TeamsAddOrUpdateMembershipForUserLegacyRequestBody;
  pathParams: TeamsAddOrUpdateMembershipForUserLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
 *
 * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
 */
export const fetchTeamsAddOrUpdateMembershipForUserLegacy = (
  variables: TeamsAddOrUpdateMembershipForUserLegacyVariables
) =>
  githubFetch<
    Schemas.TeamMembership,
    TeamsAddOrUpdateMembershipForUserLegacyRequestBody,
    {},
    {},
    TeamsAddOrUpdateMembershipForUserLegacyPathParams
  >({
    url: "/teams/{teamId}/memberships/{username}",
    method: "put",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
 *
 * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
 */
export const useTeamsAddOrUpdateMembershipForUserLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TeamMembership,
      | Responses.NotFound
      | {
          /*
           * @example "https://help.github.com/articles/github-and-trade-controls"
           */
          documentation_url?: string;
          errors?: {
            code?: string;
            field?: string;
            resource?: string;
          }[];
          message?: string;
        },
      TeamsAddOrUpdateMembershipForUserLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.TeamMembership,
    | Responses.NotFound
    | {
        /*
         * @example "https://help.github.com/articles/github-and-trade-controls"
         */
        documentation_url?: string;
        errors?: {
          code?: string;
          field?: string;
          resource?: string;
        }[];
        message?: string;
      },
    TeamsAddOrUpdateMembershipForUserLegacyVariables
  >(
    (variables: TeamsAddOrUpdateMembershipForUserLegacyVariables) =>
      fetchTeamsAddOrUpdateMembershipForUserLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsListProjectsLegacyPathParams = {
  teamId: number;
};

export type TeamsListProjectsLegacyQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListProjectsLegacyResponse = Schemas.TeamProject[];

export type TeamsListProjectsLegacyVariables = {
  pathParams: TeamsListProjectsLegacyPathParams;
  queryParams?: TeamsListProjectsLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.
 *
 * Lists the organization projects for a team.
 */
export const fetchTeamsListProjectsLegacy = (
  variables: TeamsListProjectsLegacyVariables
) =>
  githubFetch<
    TeamsListProjectsLegacyResponse,
    undefined,
    {},
    TeamsListProjectsLegacyQueryParams,
    TeamsListProjectsLegacyPathParams
  >({ url: "/teams/{teamId}/projects", method: "get", ...variables });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.
 *
 * Lists the organization projects for a team.
 */
export const useTeamsListProjectsLegacy = (
  variables: TeamsListProjectsLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListProjectsLegacyResponse,
      Responses.NotFound | Responses.PreviewHeaderMissing,
      TeamsListProjectsLegacyResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListProjectsLegacyResponse,
    Responses.NotFound | Responses.PreviewHeaderMissing,
    TeamsListProjectsLegacyResponse
  >(
    queryKeyFn({
      path: "/teams/{team_id}/projects",
      operationId: "teamsListProjectsLegacy",
      variables,
    }),
    () => fetchTeamsListProjectsLegacy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsRemoveProjectLegacyPathParams = {
  teamId: number;
  projectId: number;
};

export type TeamsRemoveProjectLegacyVariables = {
  pathParams: TeamsRemoveProjectLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.
 *
 * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
 */
export const fetchTeamsRemoveProjectLegacy = (
  variables: TeamsRemoveProjectLegacyVariables
) =>
  githubFetch<undefined, undefined, {}, {}, TeamsRemoveProjectLegacyPathParams>(
    {
      url: "/teams/{teamId}/projects/{projectId}",
      method: "delete",
      ...variables,
    }
  );

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.
 *
 * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
 */
export const useTeamsRemoveProjectLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotFound
      | Responses.PreviewHeaderMissing
      | Responses.ValidationFailed,
      TeamsRemoveProjectLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotFound
    | Responses.PreviewHeaderMissing
    | Responses.ValidationFailed,
    TeamsRemoveProjectLegacyVariables
  >(
    (variables: TeamsRemoveProjectLegacyVariables) =>
      fetchTeamsRemoveProjectLegacy({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsCheckPermissionsForProjectLegacyPathParams = {
  teamId: number;
  projectId: number;
};

export type TeamsCheckPermissionsForProjectLegacyVariables = {
  pathParams: TeamsCheckPermissionsForProjectLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.
 *
 * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
 */
export const fetchTeamsCheckPermissionsForProjectLegacy = (
  variables: TeamsCheckPermissionsForProjectLegacyVariables
) =>
  githubFetch<
    Schemas.TeamProject,
    undefined,
    {},
    {},
    TeamsCheckPermissionsForProjectLegacyPathParams
  >({
    url: "/teams/{teamId}/projects/{projectId}",
    method: "get",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.
 *
 * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
 */
export const useTeamsCheckPermissionsForProjectLegacy = (
  variables: TeamsCheckPermissionsForProjectLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TeamProject,
      Responses.PreviewHeaderMissing,
      Schemas.TeamProject
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.TeamProject,
    Responses.PreviewHeaderMissing,
    Schemas.TeamProject
  >(
    queryKeyFn({
      path: "/teams/{team_id}/projects/{project_id}",
      operationId: "teamsCheckPermissionsForProjectLegacy",
      variables,
    }),
    () =>
      fetchTeamsCheckPermissionsForProjectLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsAddOrUpdateProjectPermissionsLegacyPathParams = {
  teamId: number;
  projectId: number;
};

export type TeamsAddOrUpdateProjectPermissionsLegacyRequestBody = {
  /*
   * The permission to grant to the team for this project. Can be one of:
   * \* `read` - team members can read, but not write to or administer this project.
   * \* `write` - team members can read and write, but not administer this project.
   * \* `admin` - team members can read, write and administer this project.
   * Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
   */
  permission?: "read" | "write" | "admin";
};

export type TeamsAddOrUpdateProjectPermissionsLegacyVariables = {
  body?: TeamsAddOrUpdateProjectPermissionsLegacyRequestBody;
  pathParams: TeamsAddOrUpdateProjectPermissionsLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions) endpoint.
 *
 * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
 */
export const fetchTeamsAddOrUpdateProjectPermissionsLegacy = (
  variables: TeamsAddOrUpdateProjectPermissionsLegacyVariables
) =>
  githubFetch<
    undefined,
    TeamsAddOrUpdateProjectPermissionsLegacyRequestBody,
    {},
    {},
    TeamsAddOrUpdateProjectPermissionsLegacyPathParams
  >({
    url: "/teams/{teamId}/projects/{projectId}",
    method: "put",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions) endpoint.
 *
 * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
 */
export const useTeamsAddOrUpdateProjectPermissionsLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | {
          documentation_url?: string;
          message?: string;
        }
      | Responses.NotFound
      | Responses.PreviewHeaderMissing
      | Responses.ValidationFailed,
      TeamsAddOrUpdateProjectPermissionsLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | {
        documentation_url?: string;
        message?: string;
      }
    | Responses.NotFound
    | Responses.PreviewHeaderMissing
    | Responses.ValidationFailed,
    TeamsAddOrUpdateProjectPermissionsLegacyVariables
  >(
    (variables: TeamsAddOrUpdateProjectPermissionsLegacyVariables) =>
      fetchTeamsAddOrUpdateProjectPermissionsLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsListReposLegacyPathParams = {
  teamId: number;
};

export type TeamsListReposLegacyQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListReposLegacyResponse = Schemas.MinimalRepository[];

export type TeamsListReposLegacyVariables = {
  pathParams: TeamsListReposLegacyPathParams;
  queryParams?: TeamsListReposLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint.
 */
export const fetchTeamsListReposLegacy = (
  variables: TeamsListReposLegacyVariables
) =>
  githubFetch<
    TeamsListReposLegacyResponse,
    undefined,
    {},
    TeamsListReposLegacyQueryParams,
    TeamsListReposLegacyPathParams
  >({ url: "/teams/{teamId}/repos", method: "get", ...variables });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint.
 */
export const useTeamsListReposLegacy = (
  variables: TeamsListReposLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListReposLegacyResponse,
      Responses.NotFound,
      TeamsListReposLegacyResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListReposLegacyResponse,
    Responses.NotFound,
    TeamsListReposLegacyResponse
  >(
    queryKeyFn({
      path: "/teams/{team_id}/repos",
      operationId: "teamsListReposLegacy",
      variables,
    }),
    () => fetchTeamsListReposLegacy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsRemoveRepoLegacyPathParams = {
  teamId: number;
  owner: string;
  repo: string;
};

export type TeamsRemoveRepoLegacyVariables = {
  pathParams: TeamsRemoveRepoLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.
 *
 * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
 */
export const fetchTeamsRemoveRepoLegacy = (
  variables: TeamsRemoveRepoLegacyVariables
) =>
  githubFetch<undefined, undefined, {}, {}, TeamsRemoveRepoLegacyPathParams>({
    url: "/teams/{teamId}/repos/{owner}/{repo}",
    method: "delete",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.
 *
 * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
 */
export const useTeamsRemoveRepoLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      TeamsRemoveRepoLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    TeamsRemoveRepoLegacyVariables
  >(
    (variables: TeamsRemoveRepoLegacyVariables) =>
      fetchTeamsRemoveRepoLegacy({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TeamsCheckPermissionsForRepoLegacyPathParams = {
  teamId: number;
  owner: string;
  repo: string;
};

export type TeamsCheckPermissionsForRepoLegacyVariables = {
  pathParams: TeamsCheckPermissionsForRepoLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Note**: Repositories inherited through a parent team will also be checked.
 *
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.
 *
 * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
 */
export const fetchTeamsCheckPermissionsForRepoLegacy = (
  variables: TeamsCheckPermissionsForRepoLegacyVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    TeamsCheckPermissionsForRepoLegacyPathParams
  >({
    url: "/teams/{teamId}/repos/{owner}/{repo}",
    method: "get",
    ...variables,
  });

/**
 * **Note**: Repositories inherited through a parent team will also be checked.
 *
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.
 *
 * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
 */
export const useTeamsCheckPermissionsForRepoLegacy = (
  variables: TeamsCheckPermissionsForRepoLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, undefined, undefined>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, undefined, undefined>(
    queryKeyFn({
      path: "/teams/{team_id}/repos/{owner}/{repo}",
      operationId: "teamsCheckPermissionsForRepoLegacy",
      variables,
    }),
    () =>
      fetchTeamsCheckPermissionsForRepoLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsAddOrUpdateRepoPermissionsLegacyPathParams = {
  teamId: number;
  owner: string;
  repo: string;
};

export type TeamsAddOrUpdateRepoPermissionsLegacyRequestBody = {
  /*
   * The permission to grant the team on this repository. Can be one of:
   * \* `pull` - team members can pull, but not push to or administer this repository.
   * \* `push` - team members can pull and push, but not administer this repository.
   * \* `admin` - team members can pull, push and administer this repository.
   *
   * If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
   */
  permission?: "pull" | "push" | "admin";
};

export type TeamsAddOrUpdateRepoPermissionsLegacyVariables = {
  body?: TeamsAddOrUpdateRepoPermissionsLegacyRequestBody;
  pathParams: TeamsAddOrUpdateRepoPermissionsLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)" endpoint.
 *
 * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
 *
 * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const fetchTeamsAddOrUpdateRepoPermissionsLegacy = (
  variables: TeamsAddOrUpdateRepoPermissionsLegacyVariables
) =>
  githubFetch<
    undefined,
    TeamsAddOrUpdateRepoPermissionsLegacyRequestBody,
    {},
    {},
    TeamsAddOrUpdateRepoPermissionsLegacyPathParams
  >({
    url: "/teams/{teamId}/repos/{owner}/{repo}",
    method: "put",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)" endpoint.
 *
 * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
 *
 * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const useTeamsAddOrUpdateRepoPermissionsLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.Forbidden | Responses.ValidationFailed,
      TeamsAddOrUpdateRepoPermissionsLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.Forbidden | Responses.ValidationFailed,
    TeamsAddOrUpdateRepoPermissionsLegacyVariables
  >(
    (variables: TeamsAddOrUpdateRepoPermissionsLegacyVariables) =>
      fetchTeamsAddOrUpdateRepoPermissionsLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsListIdpGroupsForLegacyPathParams = {
  teamId: number;
};

export type TeamsListIdpGroupsForLegacyVariables = {
  pathParams: TeamsListIdpGroupsForLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List IdP groups for a team`](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * List IdP groups connected to a team on GitHub.
 */
export const fetchTeamsListIdpGroupsForLegacy = (
  variables: TeamsListIdpGroupsForLegacyVariables
) =>
  githubFetch<
    Schemas.GroupMapping,
    undefined,
    {},
    {},
    TeamsListIdpGroupsForLegacyPathParams
  >({
    url: "/teams/{teamId}/team-sync/group-mappings",
    method: "get",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List IdP groups for a team`](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * List IdP groups connected to a team on GitHub.
 */
export const useTeamsListIdpGroupsForLegacy = (
  variables: TeamsListIdpGroupsForLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GroupMapping,
      Responses.Forbidden | Responses.NotFound,
      Schemas.GroupMapping
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.GroupMapping,
    Responses.Forbidden | Responses.NotFound,
    Schemas.GroupMapping
  >(
    queryKeyFn({
      path: "/teams/{team_id}/team-sync/group-mappings",
      operationId: "teamsListIdpGroupsForLegacy",
      variables,
    }),
    () => fetchTeamsListIdpGroupsForLegacy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsCreateOrUpdateIdpGroupConnectionsLegacyPathParams = {
  teamId: number;
};

export type TeamsCreateOrUpdateIdpGroupConnectionsLegacyRequestBody = {
  /*
   * The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove.
   */
  groups: {
    /*
     * @example "moar cheese pleese"
     */
    description?: string;
    /*
     * Description of the IdP group.
     */
    group_description: string;
    /*
     * ID of the IdP group.
     */
    group_id: string;
    /*
     * Name of the IdP group.
     */
    group_name: string;
    /*
     * @example "caceab43fc9ffa20081c"
     */
    id?: string;
    /*
     * @example "external-team-6c13e7288ef7"
     */
    name?: string;
  }[];
  /*
   * @example "I am not a timestamp"
   */
  synced_at?: string;
};

export type TeamsCreateOrUpdateIdpGroupConnectionsLegacyVariables = {
  body: TeamsCreateOrUpdateIdpGroupConnectionsLegacyRequestBody;
  pathParams: TeamsCreateOrUpdateIdpGroupConnectionsLegacyPathParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create or update IdP group connections`](https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
 */
export const fetchTeamsCreateOrUpdateIdpGroupConnectionsLegacy = (
  variables: TeamsCreateOrUpdateIdpGroupConnectionsLegacyVariables
) =>
  githubFetch<
    Schemas.GroupMapping,
    TeamsCreateOrUpdateIdpGroupConnectionsLegacyRequestBody,
    {},
    {},
    TeamsCreateOrUpdateIdpGroupConnectionsLegacyPathParams
  >({
    url: "/teams/{teamId}/team-sync/group-mappings",
    method: "patch",
    ...variables,
  });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create or update IdP group connections`](https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections) endpoint.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 *
 * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
 */
export const useTeamsCreateOrUpdateIdpGroupConnectionsLegacy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GroupMapping,
      Responses.Forbidden | Responses.ValidationFailed,
      TeamsCreateOrUpdateIdpGroupConnectionsLegacyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GroupMapping,
    Responses.Forbidden | Responses.ValidationFailed,
    TeamsCreateOrUpdateIdpGroupConnectionsLegacyVariables
  >(
    (variables: TeamsCreateOrUpdateIdpGroupConnectionsLegacyVariables) =>
      fetchTeamsCreateOrUpdateIdpGroupConnectionsLegacy({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TeamsListChildLegacyPathParams = {
  teamId: number;
};

export type TeamsListChildLegacyQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListChildLegacyResponse = Schemas.Team[];

export type TeamsListChildLegacyVariables = {
  pathParams: TeamsListChildLegacyPathParams;
  queryParams?: TeamsListChildLegacyQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint.
 */
export const fetchTeamsListChildLegacy = (
  variables: TeamsListChildLegacyVariables
) =>
  githubFetch<
    TeamsListChildLegacyResponse,
    undefined,
    {},
    TeamsListChildLegacyQueryParams,
    TeamsListChildLegacyPathParams
  >({ url: "/teams/{teamId}/teams", method: "get", ...variables });

/**
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint.
 */
export const useTeamsListChildLegacy = (
  variables: TeamsListChildLegacyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListChildLegacyResponse,
      Responses.Forbidden | Responses.NotFound | Responses.ValidationFailed,
      TeamsListChildLegacyResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListChildLegacyResponse,
    Responses.Forbidden | Responses.NotFound | Responses.ValidationFailed,
    TeamsListChildLegacyResponse
  >(
    queryKeyFn({
      path: "/teams/{team_id}/teams",
      operationId: "teamsListChildLegacy",
      variables,
    }),
    () => fetchTeamsListChildLegacy({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersGetAuthenticatedVariables = GithubContext["fetcherOptions"];

/**
 * If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.
 *
 * If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
 */
export const fetchUsersGetAuthenticated = (
  variables: UsersGetAuthenticatedVariables
) =>
  githubFetch<Schemas.PrivateUser | Schemas.PublicUser, undefined, {}, {}, {}>({
    url: "/user",
    method: "get",
    ...variables,
  });

/**
 * If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.
 *
 * If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
 */
export const useUsersGetAuthenticated = (
  variables: UsersGetAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PrivateUser | Schemas.PublicUser,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden,
      Schemas.PrivateUser | Schemas.PublicUser
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PrivateUser | Schemas.PublicUser,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden,
    Schemas.PrivateUser | Schemas.PublicUser
  >(
    queryKeyFn({
      path: "/user",
      operationId: "usersGetAuthenticated",
      variables,
    }),
    () => fetchUsersGetAuthenticated({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersUpdateAuthenticatedRequestBody = {
  /*
   * The new short biography of the user.
   */
  bio?: string;
  /*
   * The new blog URL of the user.
   *
   * @example blog.example.com
   */
  blog?: string;
  /*
   * The new company of the user.
   *
   * @example Acme corporation
   */
  company?: string;
  /*
   * The publicly visible email address of the user.
   *
   * @example omar@example.com
   */
  email?: string;
  /*
   * The new hiring availability of the user.
   */
  hireable?: boolean;
  /*
   * The new location of the user.
   *
   * @example Berlin, Germany
   */
  location?: string;
  /*
   * The new name of the user.
   *
   * @example Omar Jahandar
   */
  name?: string;
  /*
   * The new Twitter username of the user.
   *
   * @example therealomarj
   */
  twitter_username?: string | null;
};

export type UsersUpdateAuthenticatedVariables = {
  body?: UsersUpdateAuthenticatedRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
 */
export const fetchUsersUpdateAuthenticated = (
  variables: UsersUpdateAuthenticatedVariables
) =>
  githubFetch<
    Schemas.PrivateUser,
    UsersUpdateAuthenticatedRequestBody,
    {},
    {},
    {}
  >({ url: "/user", method: "patch", ...variables });

/**
 * **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
 */
export const useUsersUpdateAuthenticated = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PrivateUser,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.ValidationFailed,
      UsersUpdateAuthenticatedVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.PrivateUser,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.ValidationFailed,
    UsersUpdateAuthenticatedVariables
  >(
    (variables: UsersUpdateAuthenticatedVariables) =>
      fetchUsersUpdateAuthenticated({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UsersListBlockedByAuthenticatedResponse = Schemas.SimpleUser[];

export type UsersListBlockedByAuthenticatedVariables =
  GithubContext["fetcherOptions"];

/**
 * List the users you've blocked on your personal account.
 */
export const fetchUsersListBlockedByAuthenticated = (
  variables: UsersListBlockedByAuthenticatedVariables
) =>
  githubFetch<UsersListBlockedByAuthenticatedResponse, undefined, {}, {}, {}>({
    url: "/user/blocks",
    method: "get",
    ...variables,
  });

/**
 * List the users you've blocked on your personal account.
 */
export const useUsersListBlockedByAuthenticated = (
  variables: UsersListBlockedByAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListBlockedByAuthenticatedResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.PreviewHeaderMissing,
      UsersListBlockedByAuthenticatedResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    UsersListBlockedByAuthenticatedResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.PreviewHeaderMissing,
    UsersListBlockedByAuthenticatedResponse
  >(
    queryKeyFn({
      path: "/user/blocks",
      operationId: "usersListBlockedByAuthenticated",
      variables,
    }),
    () =>
      fetchUsersListBlockedByAuthenticated({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersUnblockPathParams = {
  username: string;
};

export type UsersUnblockVariables = {
  pathParams: UsersUnblockPathParams;
} & GithubContext["fetcherOptions"];

export const fetchUsersUnblock = (variables: UsersUnblockVariables) =>
  githubFetch<undefined, undefined, {}, {}, UsersUnblockPathParams>({
    url: "/user/blocks/{username}",
    method: "delete",
    ...variables,
  });

export const useUsersUnblock = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      UsersUnblockVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound,
    UsersUnblockVariables
  >(
    (variables: UsersUnblockVariables) =>
      fetchUsersUnblock({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UsersCheckBlockedPathParams = {
  username: string;
};

export type UsersCheckBlockedVariables = {
  pathParams: UsersCheckBlockedPathParams;
} & GithubContext["fetcherOptions"];

export const fetchUsersCheckBlocked = (variables: UsersCheckBlockedVariables) =>
  githubFetch<undefined, undefined, {}, {}, UsersCheckBlockedPathParams>({
    url: "/user/blocks/{username}",
    method: "get",
    ...variables,
  });

export const useUsersCheckBlocked = (
  variables: UsersCheckBlockedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Schemas.BasicError,
      undefined
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Schemas.BasicError,
    undefined
  >(
    queryKeyFn({
      path: "/user/blocks/{username}",
      operationId: "usersCheckBlocked",
      variables,
    }),
    () => fetchUsersCheckBlocked({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersBlockPathParams = {
  username: string;
};

export type UsersBlockVariables = {
  pathParams: UsersBlockPathParams;
} & GithubContext["fetcherOptions"];

export const fetchUsersBlock = (variables: UsersBlockVariables) =>
  githubFetch<undefined, undefined, {}, {}, UsersBlockPathParams>({
    url: "/user/blocks/{username}",
    method: "put",
    ...variables,
  });

export const useUsersBlock = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.ValidationFailed,
      UsersBlockVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.ValidationFailed,
    UsersBlockVariables
  >(
    (variables: UsersBlockVariables) =>
      fetchUsersBlock({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UsersSetPrimaryEmailVisibilityForAuthenticatedResponse =
  Schemas.Email[];

export type UsersSetPrimaryEmailVisibilityForAuthenticatedRequestBody = {
  /*
   * An email address associated with the GitHub user account to manage.
   *
   * @example org@example.com
   */
  email: string;
  /*
   * Denotes whether an email is publically visible.
   */
  visibility: "public" | "private";
};

export type UsersSetPrimaryEmailVisibilityForAuthenticatedVariables = {
  body: UsersSetPrimaryEmailVisibilityForAuthenticatedRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Sets the visibility for your primary email addresses.
 */
export const fetchUsersSetPrimaryEmailVisibilityForAuthenticated = (
  variables: UsersSetPrimaryEmailVisibilityForAuthenticatedVariables
) =>
  githubFetch<
    UsersSetPrimaryEmailVisibilityForAuthenticatedResponse,
    UsersSetPrimaryEmailVisibilityForAuthenticatedRequestBody,
    {},
    {},
    {}
  >({ url: "/user/email/visibility", method: "patch", ...variables });

/**
 * Sets the visibility for your primary email addresses.
 */
export const useUsersSetPrimaryEmailVisibilityForAuthenticated = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      UsersSetPrimaryEmailVisibilityForAuthenticatedResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.ValidationFailed,
      UsersSetPrimaryEmailVisibilityForAuthenticatedVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    UsersSetPrimaryEmailVisibilityForAuthenticatedResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.ValidationFailed,
    UsersSetPrimaryEmailVisibilityForAuthenticatedVariables
  >(
    (variables: UsersSetPrimaryEmailVisibilityForAuthenticatedVariables) =>
      fetchUsersSetPrimaryEmailVisibilityForAuthenticated({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type UsersDeleteEmailForAuthenticatedVariables = {
  body?:
    | {
        /*
         * Email addresses associated with the GitHub user account.
         */
        emails: string[];
      }
    | string[]
    | string;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint is accessible with the `user` scope.
 */
export const fetchUsersDeleteEmailForAuthenticated = (
  variables: UsersDeleteEmailForAuthenticatedVariables
) =>
  githubFetch<
    undefined,
    | {
        /*
         * Email addresses associated with the GitHub user account.
         */
        emails: string[];
      }
    | string[]
    | string,
    {},
    {},
    {}
  >({ url: "/user/emails", method: "delete", ...variables });

/**
 * This endpoint is accessible with the `user` scope.
 */
export const useUsersDeleteEmailForAuthenticated = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.ValidationFailed,
      UsersDeleteEmailForAuthenticatedVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.ValidationFailed,
    UsersDeleteEmailForAuthenticatedVariables
  >(
    (variables: UsersDeleteEmailForAuthenticatedVariables) =>
      fetchUsersDeleteEmailForAuthenticated({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type UsersListEmailsForAuthenticatedQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListEmailsForAuthenticatedResponse = Schemas.Email[];

export type UsersListEmailsForAuthenticatedVariables = {
  queryParams?: UsersListEmailsForAuthenticatedQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.
 */
export const fetchUsersListEmailsForAuthenticated = (
  variables: UsersListEmailsForAuthenticatedVariables
) =>
  githubFetch<
    UsersListEmailsForAuthenticatedResponse,
    undefined,
    {},
    UsersListEmailsForAuthenticatedQueryParams,
    {}
  >({ url: "/user/emails", method: "get", ...variables });

/**
 * Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.
 */
export const useUsersListEmailsForAuthenticated = (
  variables: UsersListEmailsForAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListEmailsForAuthenticatedResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      UsersListEmailsForAuthenticatedResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    UsersListEmailsForAuthenticatedResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound,
    UsersListEmailsForAuthenticatedResponse
  >(
    queryKeyFn({
      path: "/user/emails",
      operationId: "usersListEmailsForAuthenticated",
      variables,
    }),
    () =>
      fetchUsersListEmailsForAuthenticated({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersAddEmailForAuthenticatedResponse = Schemas.Email[];

export type UsersAddEmailForAuthenticatedVariables = {
  body?:
    | {
        /*
         * Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
         */
        emails: string[];
      }
    | string[]
    | string;
} & GithubContext["fetcherOptions"];

/**
 * This endpoint is accessible with the `user` scope.
 */
export const fetchUsersAddEmailForAuthenticated = (
  variables: UsersAddEmailForAuthenticatedVariables
) =>
  githubFetch<
    UsersAddEmailForAuthenticatedResponse,
    | {
        /*
         * Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
         */
        emails: string[];
      }
    | string[]
    | string,
    {},
    {},
    {}
  >({ url: "/user/emails", method: "post", ...variables });

/**
 * This endpoint is accessible with the `user` scope.
 */
export const useUsersAddEmailForAuthenticated = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      UsersAddEmailForAuthenticatedResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.ValidationFailed,
      UsersAddEmailForAuthenticatedVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    UsersAddEmailForAuthenticatedResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.ValidationFailed,
    UsersAddEmailForAuthenticatedVariables
  >(
    (variables: UsersAddEmailForAuthenticatedVariables) =>
      fetchUsersAddEmailForAuthenticated({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UsersListFollowersForAuthenticatedUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListFollowersForAuthenticatedUserResponse =
  Schemas.SimpleUser[];

export type UsersListFollowersForAuthenticatedUserVariables = {
  queryParams?: UsersListFollowersForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the people following the authenticated user.
 */
export const fetchUsersListFollowersForAuthenticatedUser = (
  variables: UsersListFollowersForAuthenticatedUserVariables
) =>
  githubFetch<
    UsersListFollowersForAuthenticatedUserResponse,
    undefined,
    {},
    UsersListFollowersForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/followers", method: "get", ...variables });

/**
 * Lists the people following the authenticated user.
 */
export const useUsersListFollowersForAuthenticatedUser = (
  variables: UsersListFollowersForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListFollowersForAuthenticatedUserResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden,
      UsersListFollowersForAuthenticatedUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    UsersListFollowersForAuthenticatedUserResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden,
    UsersListFollowersForAuthenticatedUserResponse
  >(
    queryKeyFn({
      path: "/user/followers",
      operationId: "usersListFollowersForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchUsersListFollowersForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersListFollowedByAuthenticatedQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListFollowedByAuthenticatedResponse = Schemas.SimpleUser[];

export type UsersListFollowedByAuthenticatedVariables = {
  queryParams?: UsersListFollowedByAuthenticatedQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the people who the authenticated user follows.
 */
export const fetchUsersListFollowedByAuthenticated = (
  variables: UsersListFollowedByAuthenticatedVariables
) =>
  githubFetch<
    UsersListFollowedByAuthenticatedResponse,
    undefined,
    {},
    UsersListFollowedByAuthenticatedQueryParams,
    {}
  >({ url: "/user/following", method: "get", ...variables });

/**
 * Lists the people who the authenticated user follows.
 */
export const useUsersListFollowedByAuthenticated = (
  variables: UsersListFollowedByAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListFollowedByAuthenticatedResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden,
      UsersListFollowedByAuthenticatedResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    UsersListFollowedByAuthenticatedResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden,
    UsersListFollowedByAuthenticatedResponse
  >(
    queryKeyFn({
      path: "/user/following",
      operationId: "usersListFollowedByAuthenticated",
      variables,
    }),
    () =>
      fetchUsersListFollowedByAuthenticated({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersUnfollowPathParams = {
  username: string;
};

export type UsersUnfollowVariables = {
  pathParams: UsersUnfollowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
 */
export const fetchUsersUnfollow = (variables: UsersUnfollowVariables) =>
  githubFetch<undefined, undefined, {}, {}, UsersUnfollowPathParams>({
    url: "/user/following/{username}",
    method: "delete",
    ...variables,
  });

/**
 * Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
 */
export const useUsersUnfollow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      UsersUnfollowVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound,
    UsersUnfollowVariables
  >(
    (variables: UsersUnfollowVariables) =>
      fetchUsersUnfollow({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UsersCheckPersonIsFollowedByAuthenticatedPathParams = {
  username: string;
};

export type UsersCheckPersonIsFollowedByAuthenticatedVariables = {
  pathParams: UsersCheckPersonIsFollowedByAuthenticatedPathParams;
} & GithubContext["fetcherOptions"];

export const fetchUsersCheckPersonIsFollowedByAuthenticated = (
  variables: UsersCheckPersonIsFollowedByAuthenticatedVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    UsersCheckPersonIsFollowedByAuthenticatedPathParams
  >({ url: "/user/following/{username}", method: "get", ...variables });

export const useUsersCheckPersonIsFollowedByAuthenticated = (
  variables: UsersCheckPersonIsFollowedByAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Schemas.BasicError,
      undefined
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Schemas.BasicError,
    undefined
  >(
    queryKeyFn({
      path: "/user/following/{username}",
      operationId: "usersCheckPersonIsFollowedByAuthenticated",
      variables,
    }),
    () =>
      fetchUsersCheckPersonIsFollowedByAuthenticated({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersFollowPathParams = {
  username: string;
};

export type UsersFollowVariables = {
  pathParams: UsersFollowPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 *
 * Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
 */
export const fetchUsersFollow = (variables: UsersFollowVariables) =>
  githubFetch<undefined, undefined, {}, {}, UsersFollowPathParams>({
    url: "/user/following/{username}",
    method: "put",
    ...variables,
  });

/**
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 *
 * Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
 */
export const useUsersFollow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      UsersFollowVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound,
    UsersFollowVariables
  >(
    (variables: UsersFollowVariables) =>
      fetchUsersFollow({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UsersListGpgKeysForAuthenticatedQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListGpgKeysForAuthenticatedResponse = Schemas.GpgKey[];

export type UsersListGpgKeysForAuthenticatedVariables = {
  queryParams?: UsersListGpgKeysForAuthenticatedQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchUsersListGpgKeysForAuthenticated = (
  variables: UsersListGpgKeysForAuthenticatedVariables
) =>
  githubFetch<
    UsersListGpgKeysForAuthenticatedResponse,
    undefined,
    {},
    UsersListGpgKeysForAuthenticatedQueryParams,
    {}
  >({ url: "/user/gpg_keys", method: "get", ...variables });

/**
 * Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useUsersListGpgKeysForAuthenticated = (
  variables: UsersListGpgKeysForAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListGpgKeysForAuthenticatedResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      UsersListGpgKeysForAuthenticatedResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    UsersListGpgKeysForAuthenticatedResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound,
    UsersListGpgKeysForAuthenticatedResponse
  >(
    queryKeyFn({
      path: "/user/gpg_keys",
      operationId: "usersListGpgKeysForAuthenticated",
      variables,
    }),
    () =>
      fetchUsersListGpgKeysForAuthenticated({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersCreateGpgKeyForAuthenticatedRequestBody = {
  /*
   * A GPG key in ASCII-armored format.
   */
  armored_public_key: string;
};

export type UsersCreateGpgKeyForAuthenticatedVariables = {
  body: UsersCreateGpgKeyForAuthenticatedRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchUsersCreateGpgKeyForAuthenticated = (
  variables: UsersCreateGpgKeyForAuthenticatedVariables
) =>
  githubFetch<
    Schemas.GpgKey,
    UsersCreateGpgKeyForAuthenticatedRequestBody,
    {},
    {},
    {}
  >({ url: "/user/gpg_keys", method: "post", ...variables });

/**
 * Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useUsersCreateGpgKeyForAuthenticated = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GpgKey,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.ValidationFailed,
      UsersCreateGpgKeyForAuthenticatedVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.GpgKey,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.ValidationFailed,
    UsersCreateGpgKeyForAuthenticatedVariables
  >(
    (variables: UsersCreateGpgKeyForAuthenticatedVariables) =>
      fetchUsersCreateGpgKeyForAuthenticated({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type UsersDeleteGpgKeyForAuthenticatedPathParams = {
  /*
   * gpg_key_id parameter
   */
  gpgKeyId: number;
};

export type UsersDeleteGpgKeyForAuthenticatedVariables = {
  pathParams: UsersDeleteGpgKeyForAuthenticatedPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchUsersDeleteGpgKeyForAuthenticated = (
  variables: UsersDeleteGpgKeyForAuthenticatedVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    UsersDeleteGpgKeyForAuthenticatedPathParams
  >({ url: "/user/gpg_keys/{gpgKeyId}", method: "delete", ...variables });

/**
 * Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useUsersDeleteGpgKeyForAuthenticated = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.ValidationFailed,
      UsersDeleteGpgKeyForAuthenticatedVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.ValidationFailed,
    UsersDeleteGpgKeyForAuthenticatedVariables
  >(
    (variables: UsersDeleteGpgKeyForAuthenticatedVariables) =>
      fetchUsersDeleteGpgKeyForAuthenticated({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type UsersGetGpgKeyForAuthenticatedPathParams = {
  /*
   * gpg_key_id parameter
   */
  gpgKeyId: number;
};

export type UsersGetGpgKeyForAuthenticatedVariables = {
  pathParams: UsersGetGpgKeyForAuthenticatedPathParams;
} & GithubContext["fetcherOptions"];

/**
 * View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchUsersGetGpgKeyForAuthenticated = (
  variables: UsersGetGpgKeyForAuthenticatedVariables
) =>
  githubFetch<
    Schemas.GpgKey,
    undefined,
    {},
    {},
    UsersGetGpgKeyForAuthenticatedPathParams
  >({ url: "/user/gpg_keys/{gpgKeyId}", method: "get", ...variables });

/**
 * View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useUsersGetGpgKeyForAuthenticated = (
  variables: UsersGetGpgKeyForAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GpgKey,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      Schemas.GpgKey
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.GpgKey,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound,
    Schemas.GpgKey
  >(
    queryKeyFn({
      path: "/user/gpg_keys/{gpg_key_id}",
      operationId: "usersGetGpgKeyForAuthenticated",
      variables,
    }),
    () =>
      fetchUsersGetGpgKeyForAuthenticated({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsListInstallationsForAuthenticatedUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListInstallationsForAuthenticatedUserResponse = {
  installations: Schemas.Installation[];
  total_count: number;
};

export type AppsListInstallationsForAuthenticatedUserVariables = {
  queryParams?: AppsListInstallationsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
 *
 * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 *
 * You can find the permissions for the installation under the `permissions` key.
 */
export const fetchAppsListInstallationsForAuthenticatedUser = (
  variables: AppsListInstallationsForAuthenticatedUserVariables
) =>
  githubFetch<
    AppsListInstallationsForAuthenticatedUserResponse,
    undefined,
    {},
    AppsListInstallationsForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/installations", method: "get", ...variables });

/**
 * Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
 *
 * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 *
 * You can find the permissions for the installation under the `permissions` key.
 */
export const useAppsListInstallationsForAuthenticatedUser = (
  variables: AppsListInstallationsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListInstallationsForAuthenticatedUserResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.PreviewHeaderMissing,
      AppsListInstallationsForAuthenticatedUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    AppsListInstallationsForAuthenticatedUserResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.PreviewHeaderMissing,
    AppsListInstallationsForAuthenticatedUserResponse
  >(
    queryKeyFn({
      path: "/user/installations",
      operationId: "appsListInstallationsForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchAppsListInstallationsForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsListInstallationReposForAuthenticatedUserPathParams = {
  /*
   * installation_id parameter
   */
  installationId: number;
};

export type AppsListInstallationReposForAuthenticatedUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListInstallationReposForAuthenticatedUserResponse = {
  repositories: Schemas.Repository[];
  repository_selection?: string;
  total_count: number;
};

export type AppsListInstallationReposForAuthenticatedUserVariables = {
  pathParams: AppsListInstallationReposForAuthenticatedUserPathParams;
  queryParams?: AppsListInstallationReposForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 *
 * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
 *
 * The access the user has to each repository is included in the hash under the `permissions` key.
 */
export const fetchAppsListInstallationReposForAuthenticatedUser = (
  variables: AppsListInstallationReposForAuthenticatedUserVariables
) =>
  githubFetch<
    AppsListInstallationReposForAuthenticatedUserResponse,
    undefined,
    {},
    AppsListInstallationReposForAuthenticatedUserQueryParams,
    AppsListInstallationReposForAuthenticatedUserPathParams
  >({
    url: "/user/installations/{installationId}/repositories",
    method: "get",
    ...variables,
  });

/**
 * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 *
 * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
 *
 * The access the user has to each repository is included in the hash under the `permissions` key.
 */
export const useAppsListInstallationReposForAuthenticatedUser = (
  variables: AppsListInstallationReposForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListInstallationReposForAuthenticatedUserResponse,
      Responses.NotModified | Responses.Forbidden | Responses.NotFound,
      AppsListInstallationReposForAuthenticatedUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    AppsListInstallationReposForAuthenticatedUserResponse,
    Responses.NotModified | Responses.Forbidden | Responses.NotFound,
    AppsListInstallationReposForAuthenticatedUserResponse
  >(
    queryKeyFn({
      path: "/user/installations/{installation_id}/repositories",
      operationId: "appsListInstallationReposForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchAppsListInstallationReposForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsRemoveRepoFromInstallationPathParams = {
  /*
   * installation_id parameter
   */
  installationId: number;
  repositoryId: number;
};

export type AppsRemoveRepoFromInstallationVariables = {
  pathParams: AppsRemoveRepoFromInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Remove a single repository from an installation. The authenticated user must have admin access to the repository.
 *
 * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
 */
export const fetchAppsRemoveRepoFromInstallation = (
  variables: AppsRemoveRepoFromInstallationVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    AppsRemoveRepoFromInstallationPathParams
  >({
    url: "/user/installations/{installationId}/repositories/{repositoryId}",
    method: "delete",
    ...variables,
  });

/**
 * Remove a single repository from an installation. The authenticated user must have admin access to the repository.
 *
 * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
 */
export const useAppsRemoveRepoFromInstallation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotModified | Responses.Forbidden | Responses.NotFound,
      AppsRemoveRepoFromInstallationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotModified | Responses.Forbidden | Responses.NotFound,
    AppsRemoveRepoFromInstallationVariables
  >(
    (variables: AppsRemoveRepoFromInstallationVariables) =>
      fetchAppsRemoveRepoFromInstallation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AppsAddRepoToInstallationPathParams = {
  /*
   * installation_id parameter
   */
  installationId: number;
  repositoryId: number;
};

export type AppsAddRepoToInstallationVariables = {
  pathParams: AppsAddRepoToInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Add a single repository to an installation. The authenticated user must have admin access to the repository.
 *
 * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
 */
export const fetchAppsAddRepoToInstallation = (
  variables: AppsAddRepoToInstallationVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    AppsAddRepoToInstallationPathParams
  >({
    url: "/user/installations/{installationId}/repositories/{repositoryId}",
    method: "put",
    ...variables,
  });

/**
 * Add a single repository to an installation. The authenticated user must have admin access to the repository.
 *
 * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
 */
export const useAppsAddRepoToInstallation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      Responses.NotModified | Responses.Forbidden | Responses.NotFound,
      AppsAddRepoToInstallationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.NotModified | Responses.Forbidden | Responses.NotFound,
    AppsAddRepoToInstallationVariables
  >(
    (variables: AppsAddRepoToInstallationVariables) =>
      fetchAppsAddRepoToInstallation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type InteractionsRemoveRestrictionsForAuthenticatedUserVariables =
  GithubContext["fetcherOptions"];

/**
 * Removes any interaction restrictions from your public repositories.
 */
export const fetchInteractionsRemoveRestrictionsForAuthenticatedUser = (
  variables: InteractionsRemoveRestrictionsForAuthenticatedUserVariables
) =>
  githubFetch<undefined, undefined, {}, {}, {}>({
    url: "/user/interaction-limits",
    method: "delete",
    ...variables,
  });

/**
 * Removes any interaction restrictions from your public repositories.
 */
export const useInteractionsRemoveRestrictionsForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      undefined,
      InteractionsRemoveRestrictionsForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    undefined,
    InteractionsRemoveRestrictionsForAuthenticatedUserVariables
  >(
    (variables: InteractionsRemoveRestrictionsForAuthenticatedUserVariables) =>
      fetchInteractionsRemoveRestrictionsForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type InteractionsGetRestrictionsForAuthenticatedUserVariables =
  GithubContext["fetcherOptions"];

/**
 * Shows which type of GitHub user can interact with your public repositories and when the restriction expires. If there are no restrictions, you will see an empty response.
 */
export const fetchInteractionsGetRestrictionsForAuthenticatedUser = (
  variables: InteractionsGetRestrictionsForAuthenticatedUserVariables
) =>
  githubFetch<Schemas.InteractionLimitResponse, undefined, {}, {}, {}>({
    url: "/user/interaction-limits",
    method: "get",
    ...variables,
  });

/**
 * Shows which type of GitHub user can interact with your public repositories and when the restriction expires. If there are no restrictions, you will see an empty response.
 */
export const useInteractionsGetRestrictionsForAuthenticatedUser = (
  variables: InteractionsGetRestrictionsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.InteractionLimitResponse,
      undefined,
      Schemas.InteractionLimitResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.InteractionLimitResponse,
    undefined,
    Schemas.InteractionLimitResponse
  >(
    queryKeyFn({
      path: "/user/interaction-limits",
      operationId: "interactionsGetRestrictionsForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchInteractionsGetRestrictionsForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type InteractionsSetRestrictionsForAuthenticatedUserVariables = {
  body: Schemas.InteractionLimit;
} & GithubContext["fetcherOptions"];

/**
 * Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
 */
export const fetchInteractionsSetRestrictionsForAuthenticatedUser = (
  variables: InteractionsSetRestrictionsForAuthenticatedUserVariables
) =>
  githubFetch<
    Schemas.InteractionLimitResponse,
    Schemas.InteractionLimit,
    {},
    {},
    {}
  >({ url: "/user/interaction-limits", method: "put", ...variables });

/**
 * Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
 */
export const useInteractionsSetRestrictionsForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.InteractionLimitResponse,
      Responses.ValidationFailed,
      InteractionsSetRestrictionsForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.InteractionLimitResponse,
    Responses.ValidationFailed,
    InteractionsSetRestrictionsForAuthenticatedUserVariables
  >(
    (variables: InteractionsSetRestrictionsForAuthenticatedUserVariables) =>
      fetchInteractionsSetRestrictionsForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type IssuesListForAuthenticatedUserQueryParams = {
  /*
   * Indicates which sorts of issues to return. Can be one of:
   * \* `assigned`: Issues assigned to you
   * \* `created`: Issues created by you
   * \* `mentioned`: Issues mentioning you
   * \* `subscribed`: Issues you're subscribed to updates for
   * \* `all`: All issues the authenticated user can see, regardless of participation or creation
   *
   * @default assigned
   */
  filter?:
    | "assigned"
    | "created"
    | "mentioned"
    | "subscribed"
    | "repos"
    | "all";
  /*
   * Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /*
   * A list of comma separated label names. Example: `bug,ui,@high`
   */
  labels?: string;
  /*
   * What to sort results by. Can be either `created`, `updated`, `comments`.
   *
   * @default created
   */
  sort?: "created" | "updated" | "comments";
  /*
   * One of `asc` (ascending) or `desc` (descending).
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type IssuesListForAuthenticatedUserResponse = Schemas.Issue[];

export type IssuesListForAuthenticatedUserVariables = {
  queryParams?: IssuesListForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List issues across owned and member repositories assigned to the authenticated user.
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const fetchIssuesListForAuthenticatedUser = (
  variables: IssuesListForAuthenticatedUserVariables
) =>
  githubFetch<
    IssuesListForAuthenticatedUserResponse,
    undefined,
    {},
    IssuesListForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/issues", method: "get", ...variables });

/**
 * List issues across owned and member repositories assigned to the authenticated user.
 *
 * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const useIssuesListForAuthenticatedUser = (
  variables: IssuesListForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      IssuesListForAuthenticatedUserResponse,
      Responses.NotModified | Responses.NotFound,
      IssuesListForAuthenticatedUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    IssuesListForAuthenticatedUserResponse,
    Responses.NotModified | Responses.NotFound,
    IssuesListForAuthenticatedUserResponse
  >(
    queryKeyFn({
      path: "/user/issues",
      operationId: "issuesListForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchIssuesListForAuthenticatedUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersListPublicSshKeysForAuthenticatedQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListPublicSshKeysForAuthenticatedResponse = Schemas.Key[];

export type UsersListPublicSshKeysForAuthenticatedVariables = {
  queryParams?: UsersListPublicSshKeysForAuthenticatedQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchUsersListPublicSshKeysForAuthenticated = (
  variables: UsersListPublicSshKeysForAuthenticatedVariables
) =>
  githubFetch<
    UsersListPublicSshKeysForAuthenticatedResponse,
    undefined,
    {},
    UsersListPublicSshKeysForAuthenticatedQueryParams,
    {}
  >({ url: "/user/keys", method: "get", ...variables });

/**
 * Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useUsersListPublicSshKeysForAuthenticated = (
  variables: UsersListPublicSshKeysForAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListPublicSshKeysForAuthenticatedResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      UsersListPublicSshKeysForAuthenticatedResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    UsersListPublicSshKeysForAuthenticatedResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound,
    UsersListPublicSshKeysForAuthenticatedResponse
  >(
    queryKeyFn({
      path: "/user/keys",
      operationId: "usersListPublicSshKeysForAuthenticated",
      variables,
    }),
    () =>
      fetchUsersListPublicSshKeysForAuthenticated({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersCreatePublicSshKeyForAuthenticatedRequestBody = {
  /*
   * The public SSH key to add to your GitHub account.
   *
   * @pattern ^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521)
   */
  key: string;
  /*
   * A descriptive name for the new key.
   *
   * @example Personal MacBook Air
   */
  title?: string;
};

export type UsersCreatePublicSshKeyForAuthenticatedVariables = {
  body: UsersCreatePublicSshKeyForAuthenticatedRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchUsersCreatePublicSshKeyForAuthenticated = (
  variables: UsersCreatePublicSshKeyForAuthenticatedVariables
) =>
  githubFetch<
    Schemas.Key,
    UsersCreatePublicSshKeyForAuthenticatedRequestBody,
    {},
    {},
    {}
  >({ url: "/user/keys", method: "post", ...variables });

/**
 * Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useUsersCreatePublicSshKeyForAuthenticated = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Key,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.ValidationFailed,
      UsersCreatePublicSshKeyForAuthenticatedVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Key,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.ValidationFailed,
    UsersCreatePublicSshKeyForAuthenticatedVariables
  >(
    (variables: UsersCreatePublicSshKeyForAuthenticatedVariables) =>
      fetchUsersCreatePublicSshKeyForAuthenticated({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type UsersDeletePublicSshKeyForAuthenticatedPathParams = {
  /*
   * key_id parameter
   */
  keyId: number;
};

export type UsersDeletePublicSshKeyForAuthenticatedVariables = {
  pathParams: UsersDeletePublicSshKeyForAuthenticatedPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchUsersDeletePublicSshKeyForAuthenticated = (
  variables: UsersDeletePublicSshKeyForAuthenticatedVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    UsersDeletePublicSshKeyForAuthenticatedPathParams
  >({ url: "/user/keys/{keyId}", method: "delete", ...variables });

/**
 * Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useUsersDeletePublicSshKeyForAuthenticated = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      UsersDeletePublicSshKeyForAuthenticatedVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound,
    UsersDeletePublicSshKeyForAuthenticatedVariables
  >(
    (variables: UsersDeletePublicSshKeyForAuthenticatedVariables) =>
      fetchUsersDeletePublicSshKeyForAuthenticated({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type UsersGetPublicSshKeyForAuthenticatedPathParams = {
  /*
   * key_id parameter
   */
  keyId: number;
};

export type UsersGetPublicSshKeyForAuthenticatedVariables = {
  pathParams: UsersGetPublicSshKeyForAuthenticatedPathParams;
} & GithubContext["fetcherOptions"];

/**
 * View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const fetchUsersGetPublicSshKeyForAuthenticated = (
  variables: UsersGetPublicSshKeyForAuthenticatedVariables
) =>
  githubFetch<
    Schemas.Key,
    undefined,
    {},
    {},
    UsersGetPublicSshKeyForAuthenticatedPathParams
  >({ url: "/user/keys/{keyId}", method: "get", ...variables });

/**
 * View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const useUsersGetPublicSshKeyForAuthenticated = (
  variables: UsersGetPublicSshKeyForAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Key,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      Schemas.Key
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Key,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound,
    Schemas.Key
  >(
    queryKeyFn({
      path: "/user/keys/{key_id}",
      operationId: "usersGetPublicSshKeyForAuthenticated",
      variables,
    }),
    () =>
      fetchUsersGetPublicSshKeyForAuthenticated({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsListSubscriptionsForAuthenticatedUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListSubscriptionsForAuthenticatedUserResponse =
  Schemas.UserMarketplacePurchase[];

export type AppsListSubscriptionsForAuthenticatedUserVariables = {
  queryParams?: AppsListSubscriptionsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
 */
export const fetchAppsListSubscriptionsForAuthenticatedUser = (
  variables: AppsListSubscriptionsForAuthenticatedUserVariables
) =>
  githubFetch<
    AppsListSubscriptionsForAuthenticatedUserResponse,
    undefined,
    {},
    AppsListSubscriptionsForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/marketplace_purchases", method: "get", ...variables });

/**
 * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
 */
export const useAppsListSubscriptionsForAuthenticatedUser = (
  variables: AppsListSubscriptionsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListSubscriptionsForAuthenticatedUserResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.NotFound,
      AppsListSubscriptionsForAuthenticatedUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    AppsListSubscriptionsForAuthenticatedUserResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.NotFound,
    AppsListSubscriptionsForAuthenticatedUserResponse
  >(
    queryKeyFn({
      path: "/user/marketplace_purchases",
      operationId: "appsListSubscriptionsForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchAppsListSubscriptionsForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsListSubscriptionsForAuthenticatedUserStubbedQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type AppsListSubscriptionsForAuthenticatedUserStubbedResponse =
  Schemas.UserMarketplacePurchase[];

export type AppsListSubscriptionsForAuthenticatedUserStubbedVariables = {
  queryParams?: AppsListSubscriptionsForAuthenticatedUserStubbedQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
 */
export const fetchAppsListSubscriptionsForAuthenticatedUserStubbed = (
  variables: AppsListSubscriptionsForAuthenticatedUserStubbedVariables
) =>
  githubFetch<
    AppsListSubscriptionsForAuthenticatedUserStubbedResponse,
    undefined,
    {},
    AppsListSubscriptionsForAuthenticatedUserStubbedQueryParams,
    {}
  >({
    url: "/user/marketplace_purchases/stubbed",
    method: "get",
    ...variables,
  });

/**
 * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
 */
export const useAppsListSubscriptionsForAuthenticatedUserStubbed = (
  variables: AppsListSubscriptionsForAuthenticatedUserStubbedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppsListSubscriptionsForAuthenticatedUserStubbedResponse,
      Responses.NotModified | Responses.RequiresAuthentication,
      AppsListSubscriptionsForAuthenticatedUserStubbedResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    AppsListSubscriptionsForAuthenticatedUserStubbedResponse,
    Responses.NotModified | Responses.RequiresAuthentication,
    AppsListSubscriptionsForAuthenticatedUserStubbedResponse
  >(
    queryKeyFn({
      path: "/user/marketplace_purchases/stubbed",
      operationId: "appsListSubscriptionsForAuthenticatedUserStubbed",
      variables,
    }),
    () =>
      fetchAppsListSubscriptionsForAuthenticatedUserStubbed({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsListMembershipsForAuthenticatedUserQueryParams = {
  /*
   * Indicates the state of the memberships to return. Can be either `active` or `pending`. If not specified, the API returns both active and pending memberships.
   */
  state?: "active" | "pending";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListMembershipsForAuthenticatedUserResponse =
  Schemas.OrgMembership[];

export type OrgsListMembershipsForAuthenticatedUserVariables = {
  queryParams?: OrgsListMembershipsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsListMembershipsForAuthenticatedUser = (
  variables: OrgsListMembershipsForAuthenticatedUserVariables
) =>
  githubFetch<
    OrgsListMembershipsForAuthenticatedUserResponse,
    undefined,
    {},
    OrgsListMembershipsForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/memberships/orgs", method: "get", ...variables });

export const useOrgsListMembershipsForAuthenticatedUser = (
  variables: OrgsListMembershipsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListMembershipsForAuthenticatedUserResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.ValidationFailed,
      OrgsListMembershipsForAuthenticatedUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListMembershipsForAuthenticatedUserResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.ValidationFailed,
    OrgsListMembershipsForAuthenticatedUserResponse
  >(
    queryKeyFn({
      path: "/user/memberships/orgs",
      operationId: "orgsListMembershipsForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchOrgsListMembershipsForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsGetMembershipForAuthenticatedUserPathParams = {
  org: string;
};

export type OrgsGetMembershipForAuthenticatedUserVariables = {
  pathParams: OrgsGetMembershipForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsGetMembershipForAuthenticatedUser = (
  variables: OrgsGetMembershipForAuthenticatedUserVariables
) =>
  githubFetch<
    Schemas.OrgMembership,
    undefined,
    {},
    {},
    OrgsGetMembershipForAuthenticatedUserPathParams
  >({ url: "/user/memberships/orgs/{org}", method: "get", ...variables });

export const useOrgsGetMembershipForAuthenticatedUser = (
  variables: OrgsGetMembershipForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OrgMembership,
      Responses.Forbidden | Responses.NotFound,
      Schemas.OrgMembership
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.OrgMembership,
    Responses.Forbidden | Responses.NotFound,
    Schemas.OrgMembership
  >(
    queryKeyFn({
      path: "/user/memberships/orgs/{org}",
      operationId: "orgsGetMembershipForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchOrgsGetMembershipForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsUpdateMembershipForAuthenticatedUserPathParams = {
  org: string;
};

export type OrgsUpdateMembershipForAuthenticatedUserRequestBody = {
  /*
   * The state that the membership should be in. Only `"active"` will be accepted.
   */
  state: "active";
};

export type OrgsUpdateMembershipForAuthenticatedUserVariables = {
  body: OrgsUpdateMembershipForAuthenticatedUserRequestBody;
  pathParams: OrgsUpdateMembershipForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchOrgsUpdateMembershipForAuthenticatedUser = (
  variables: OrgsUpdateMembershipForAuthenticatedUserVariables
) =>
  githubFetch<
    Schemas.OrgMembership,
    OrgsUpdateMembershipForAuthenticatedUserRequestBody,
    {},
    {},
    OrgsUpdateMembershipForAuthenticatedUserPathParams
  >({ url: "/user/memberships/orgs/{org}", method: "patch", ...variables });

export const useOrgsUpdateMembershipForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrgMembership,
      Responses.Forbidden | Responses.NotFound | Responses.ValidationFailed,
      OrgsUpdateMembershipForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.OrgMembership,
    Responses.Forbidden | Responses.NotFound | Responses.ValidationFailed,
    OrgsUpdateMembershipForAuthenticatedUserVariables
  >(
    (variables: OrgsUpdateMembershipForAuthenticatedUserVariables) =>
      fetchOrgsUpdateMembershipForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type MigrationsListForAuthenticatedUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type MigrationsListForAuthenticatedUserResponse = Schemas.Migration[];

export type MigrationsListForAuthenticatedUserVariables = {
  queryParams?: MigrationsListForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all migrations a user has started.
 */
export const fetchMigrationsListForAuthenticatedUser = (
  variables: MigrationsListForAuthenticatedUserVariables
) =>
  githubFetch<
    MigrationsListForAuthenticatedUserResponse,
    undefined,
    {},
    MigrationsListForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/migrations", method: "get", ...variables });

/**
 * Lists all migrations a user has started.
 */
export const useMigrationsListForAuthenticatedUser = (
  variables: MigrationsListForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MigrationsListForAuthenticatedUserResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden,
      MigrationsListForAuthenticatedUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    MigrationsListForAuthenticatedUserResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden,
    MigrationsListForAuthenticatedUserResponse
  >(
    queryKeyFn({
      path: "/user/migrations",
      operationId: "migrationsListForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchMigrationsListForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MigrationsStartForAuthenticatedUserRequestBody = {
  /*
   * Exclude attributes from the API response to improve performance
   *
   * @example repositories
   */
  exclude?: "repositories"[];
  /*
   * Do not include attachments in the migration
   *
   * @example true
   */
  exclude_attachments?: boolean;
  /*
   * Lock the repositories being migrated at the start of the migration
   *
   * @example true
   */
  lock_repositories?: boolean;
  repositories: string[];
};

export type MigrationsStartForAuthenticatedUserVariables = {
  body: MigrationsStartForAuthenticatedUserRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Initiates the generation of a user migration archive.
 */
export const fetchMigrationsStartForAuthenticatedUser = (
  variables: MigrationsStartForAuthenticatedUserVariables
) =>
  githubFetch<
    Schemas.Migration,
    MigrationsStartForAuthenticatedUserRequestBody,
    {},
    {},
    {}
  >({ url: "/user/migrations", method: "post", ...variables });

/**
 * Initiates the generation of a user migration archive.
 */
export const useMigrationsStartForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Migration,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.ValidationFailed,
      MigrationsStartForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Migration,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.ValidationFailed,
    MigrationsStartForAuthenticatedUserVariables
  >(
    (variables: MigrationsStartForAuthenticatedUserVariables) =>
      fetchMigrationsStartForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type MigrationsGetStatusForAuthenticatedUserPathParams = {
  /*
   * migration_id parameter
   */
  migrationId: number;
};

export type MigrationsGetStatusForAuthenticatedUserQueryParams = {
  exclude?: string[];
};

export type MigrationsGetStatusForAuthenticatedUserVariables = {
  pathParams: MigrationsGetStatusForAuthenticatedUserPathParams;
  queryParams?: MigrationsGetStatusForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:
 *
 * *   `pending` - the migration hasn't started yet.
 * *   `exporting` - the migration is in progress.
 * *   `exported` - the migration finished successfully.
 * *   `failed` - the migration failed.
 *
 * Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/reference/migrations#download-a-user-migration-archive).
 */
export const fetchMigrationsGetStatusForAuthenticatedUser = (
  variables: MigrationsGetStatusForAuthenticatedUserVariables
) =>
  githubFetch<
    Schemas.Migration,
    undefined,
    {},
    MigrationsGetStatusForAuthenticatedUserQueryParams,
    MigrationsGetStatusForAuthenticatedUserPathParams
  >({ url: "/user/migrations/{migrationId}", method: "get", ...variables });

/**
 * Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:
 *
 * *   `pending` - the migration hasn't started yet.
 * *   `exporting` - the migration is in progress.
 * *   `exported` - the migration finished successfully.
 * *   `failed` - the migration failed.
 *
 * Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/reference/migrations#download-a-user-migration-archive).
 */
export const useMigrationsGetStatusForAuthenticatedUser = (
  variables: MigrationsGetStatusForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Migration,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      Schemas.Migration
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Migration,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound,
    Schemas.Migration
  >(
    queryKeyFn({
      path: "/user/migrations/{migration_id}",
      operationId: "migrationsGetStatusForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchMigrationsGetStatusForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MigrationsDeleteArchiveForAuthenticatedUserPathParams = {
  /*
   * migration_id parameter
   */
  migrationId: number;
};

export type MigrationsDeleteArchiveForAuthenticatedUserVariables = {
  pathParams: MigrationsDeleteArchiveForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/reference/migrations#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/reference/migrations#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
 */
export const fetchMigrationsDeleteArchiveForAuthenticatedUser = (
  variables: MigrationsDeleteArchiveForAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    MigrationsDeleteArchiveForAuthenticatedUserPathParams
  >({
    url: "/user/migrations/{migrationId}/archive",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/reference/migrations#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/reference/migrations#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
 */
export const useMigrationsDeleteArchiveForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      MigrationsDeleteArchiveForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound,
    MigrationsDeleteArchiveForAuthenticatedUserVariables
  >(
    (variables: MigrationsDeleteArchiveForAuthenticatedUserVariables) =>
      fetchMigrationsDeleteArchiveForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type MigrationsGetArchiveForAuthenticatedUserPathParams = {
  /*
   * migration_id parameter
   */
  migrationId: number;
};

export type MigrationsGetArchiveForAuthenticatedUserVariables = {
  pathParams: MigrationsGetArchiveForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
 *
 * *   attachments
 * *   bases
 * *   commit\_comments
 * *   issue\_comments
 * *   issue\_events
 * *   issues
 * *   milestones
 * *   organizations
 * *   projects
 * *   protected\_branches
 * *   pull\_request\_reviews
 * *   pull\_requests
 * *   releases
 * *   repositories
 * *   review\_comments
 * *   schema
 * *   users
 *
 * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
 */
export const fetchMigrationsGetArchiveForAuthenticatedUser = (
  variables: MigrationsGetArchiveForAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    MigrationsGetArchiveForAuthenticatedUserPathParams
  >({
    url: "/user/migrations/{migrationId}/archive",
    method: "get",
    ...variables,
  });

/**
 * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
 *
 * *   attachments
 * *   bases
 * *   commit\_comments
 * *   issue\_comments
 * *   issue\_events
 * *   issues
 * *   milestones
 * *   organizations
 * *   projects
 * *   protected\_branches
 * *   pull\_request\_reviews
 * *   pull\_requests
 * *   releases
 * *   repositories
 * *   review\_comments
 * *   schema
 * *   users
 *
 * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
 */
export const useMigrationsGetArchiveForAuthenticatedUser = (
  variables: MigrationsGetArchiveForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden,
      undefined
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden,
    undefined
  >(
    queryKeyFn({
      path: "/user/migrations/{migration_id}/archive",
      operationId: "migrationsGetArchiveForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchMigrationsGetArchiveForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MigrationsUnlockRepoForAuthenticatedUserPathParams = {
  /*
   * migration_id parameter
   */
  migrationId: number;
  /*
   * repo_name parameter
   */
  repoName: string;
};

export type MigrationsUnlockRepoForAuthenticatedUserVariables = {
  pathParams: MigrationsUnlockRepoForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/reference/migrations#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/reference/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.
 */
export const fetchMigrationsUnlockRepoForAuthenticatedUser = (
  variables: MigrationsUnlockRepoForAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    MigrationsUnlockRepoForAuthenticatedUserPathParams
  >({
    url: "/user/migrations/{migrationId}/repos/{repoName}/lock",
    method: "delete",
    ...variables,
  });

/**
 * Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/reference/migrations#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/reference/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.
 */
export const useMigrationsUnlockRepoForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      MigrationsUnlockRepoForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound,
    MigrationsUnlockRepoForAuthenticatedUserVariables
  >(
    (variables: MigrationsUnlockRepoForAuthenticatedUserVariables) =>
      fetchMigrationsUnlockRepoForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type MigrationsListReposForUserPathParams = {
  /*
   * migration_id parameter
   */
  migrationId: number;
};

export type MigrationsListReposForUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type MigrationsListReposForUserResponse = Schemas.MinimalRepository[];

export type MigrationsListReposForUserVariables = {
  pathParams: MigrationsListReposForUserPathParams;
  queryParams?: MigrationsListReposForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all the repositories for this user migration.
 */
export const fetchMigrationsListReposForUser = (
  variables: MigrationsListReposForUserVariables
) =>
  githubFetch<
    MigrationsListReposForUserResponse,
    undefined,
    {},
    MigrationsListReposForUserQueryParams,
    MigrationsListReposForUserPathParams
  >({
    url: "/user/migrations/{migrationId}/repositories",
    method: "get",
    ...variables,
  });

/**
 * Lists all the repositories for this user migration.
 */
export const useMigrationsListReposForUser = (
  variables: MigrationsListReposForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      MigrationsListReposForUserResponse,
      Responses.NotFound,
      MigrationsListReposForUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    MigrationsListReposForUserResponse,
    Responses.NotFound,
    MigrationsListReposForUserResponse
  >(
    queryKeyFn({
      path: "/user/migrations/{migration_id}/repositories",
      operationId: "migrationsListReposForUser",
      variables,
    }),
    () => fetchMigrationsListReposForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsListForAuthenticatedUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListForAuthenticatedUserResponse = Schemas.OrganizationSimple[];

export type OrgsListForAuthenticatedUserVariables = {
  queryParams?: OrgsListForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List organizations for the authenticated user.
 *
 * **OAuth scope requirements**
 *
 * This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
 */
export const fetchOrgsListForAuthenticatedUser = (
  variables: OrgsListForAuthenticatedUserVariables
) =>
  githubFetch<
    OrgsListForAuthenticatedUserResponse,
    undefined,
    {},
    OrgsListForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/orgs", method: "get", ...variables });

/**
 * List organizations for the authenticated user.
 *
 * **OAuth scope requirements**
 *
 * This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
 */
export const useOrgsListForAuthenticatedUser = (
  variables: OrgsListForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListForAuthenticatedUserResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden,
      OrgsListForAuthenticatedUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListForAuthenticatedUserResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden,
    OrgsListForAuthenticatedUserResponse
  >(
    queryKeyFn({
      path: "/user/orgs",
      operationId: "orgsListForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchOrgsListForAuthenticatedUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PackagesDeletePackageForAuthenticatedUserPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
};

export type PackagesDeletePackageForAuthenticatedUserVariables = {
  pathParams: PackagesDeletePackageForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 25 downloads. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:delete` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesDeletePackageForAuthenticatedUser = (
  variables: PackagesDeletePackageForAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    PackagesDeletePackageForAuthenticatedUserPathParams
  >({
    url: "/user/packages/{packageType}/{packageName}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 25 downloads. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:delete` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesDeletePackageForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      PackagesDeletePackageForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.RequiresAuthentication | Responses.Forbidden | Responses.NotFound,
    PackagesDeletePackageForAuthenticatedUserVariables
  >(
    (variables: PackagesDeletePackageForAuthenticatedUserVariables) =>
      fetchPackagesDeletePackageForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type PackagesGetPackageForAuthenticatedUserPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
};

export type PackagesGetPackageForAuthenticatedUserVariables = {
  pathParams: PackagesGetPackageForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific package for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesGetPackageForAuthenticatedUser = (
  variables: PackagesGetPackageForAuthenticatedUserVariables
) =>
  githubFetch<
    Schemas.Package,
    undefined,
    {},
    {},
    PackagesGetPackageForAuthenticatedUserPathParams
  >({
    url: "/user/packages/{packageType}/{packageName}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific package for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesGetPackageForAuthenticatedUser = (
  variables: PackagesGetPackageForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Package, undefined, Schemas.Package>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Package, undefined, Schemas.Package>(
    queryKeyFn({
      path: "/user/packages/{package_type}/{package_name}",
      operationId: "packagesGetPackageForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchPackagesGetPackageForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PackagesRestorePackageForAuthenticatedUserPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
};

export type PackagesRestorePackageForAuthenticatedUserQueryParams = {
  /*
   * package token
   */
  token?: string;
};

export type PackagesRestorePackageForAuthenticatedUserVariables = {
  pathParams: PackagesRestorePackageForAuthenticatedUserPathParams;
  queryParams?: PackagesRestorePackageForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Restores a package owned by the authenticated user.
 *
 * You can restore a deleted package under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scope. If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesRestorePackageForAuthenticatedUser = (
  variables: PackagesRestorePackageForAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    PackagesRestorePackageForAuthenticatedUserQueryParams,
    PackagesRestorePackageForAuthenticatedUserPathParams
  >({
    url: "/user/packages/{packageType}/{packageName}/restore",
    method: "post",
    ...variables,
  });

/**
 * Restores a package owned by the authenticated user.
 *
 * You can restore a deleted package under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scope. If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesRestorePackageForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      PackagesRestorePackageForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.RequiresAuthentication | Responses.Forbidden | Responses.NotFound,
    PackagesRestorePackageForAuthenticatedUserVariables
  >(
    (variables: PackagesRestorePackageForAuthenticatedUserVariables) =>
      fetchPackagesRestorePackageForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPathParams =
  {
    /*
     * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
     */
    packageType:
      | "npm"
      | "maven"
      | "rubygems"
      | "docker"
      | "nuget"
      | "container";
    /*
     * The name of the package.
     */
    packageName: string;
  };

export type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQueryParams =
  {
    /*
     * Page number of the results to fetch.
     *
     * @default 1
     */
    page?: number;
    /*
     * Results per page (max 100).
     *
     * @default 30
     */
    per_page?: number;
    /*
     * The state of the package, either active or deleted.
     *
     * @default active
     */
    state?: "active" | "deleted";
  };

export type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse =
  Schemas.PackageVersion[];

export type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserVariables =
  {
    pathParams: PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPathParams;
    queryParams?: PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQueryParams;
  } & GithubContext["fetcherOptions"];

/**
 * Returns all package versions for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser =
  (
    variables: PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserVariables
  ) =>
    githubFetch<
      PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse,
      undefined,
      {},
      PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQueryParams,
      PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPathParams
    >({
      url: "/user/packages/{packageType}/{packageName}/versions",
      method: "get",
      ...variables,
    });

/**
 * Returns all package versions for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser =
  (
    variables: PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserVariables,
    options?: Omit<
      reactQuery.UseQueryOptions<
        PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse,
        | Responses.RequiresAuthentication
        | Responses.Forbidden
        | Responses.NotFound,
        PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse
      >,
      "queryKey" | "queryFn"
    >
  ) => {
    const { fetcherOptions, queryOptions, queryKeyFn } =
      useGithubContext(options);
    return reactQuery.useQuery<
      PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse,
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse
    >(
      queryKeyFn({
        path: "/user/packages/{package_type}/{package_name}/versions",
        operationId:
          "packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser",
        variables,
      }),
      () =>
        fetchPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser({
          ...fetcherOptions,
          ...variables,
        }),
      {
        ...options,
        ...queryOptions,
      }
    );
  };

export type PackagesDeletePackageVersionForAuthenticatedUserPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  /*
   * Unique identifier of the package version.
   */
  packageVersionId: number;
};

export type PackagesDeletePackageVersionForAuthenticatedUserVariables = {
  pathParams: PackagesDeletePackageVersionForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 25 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesDeletePackageVersionForAuthenticatedUser = (
  variables: PackagesDeletePackageVersionForAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    PackagesDeletePackageVersionForAuthenticatedUserPathParams
  >({
    url: "/user/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    method: "delete",
    ...variables,
  });

/**
 * Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 25 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
 *
 * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesDeletePackageVersionForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      PackagesDeletePackageVersionForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.RequiresAuthentication | Responses.Forbidden | Responses.NotFound,
    PackagesDeletePackageVersionForAuthenticatedUserVariables
  >(
    (variables: PackagesDeletePackageVersionForAuthenticatedUserVariables) =>
      fetchPackagesDeletePackageVersionForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type PackagesGetPackageVersionForAuthenticatedUserPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  /*
   * Unique identifier of the package version.
   */
  packageVersionId: number;
};

export type PackagesGetPackageVersionForAuthenticatedUserVariables = {
  pathParams: PackagesGetPackageVersionForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific package version for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesGetPackageVersionForAuthenticatedUser = (
  variables: PackagesGetPackageVersionForAuthenticatedUserVariables
) =>
  githubFetch<
    Schemas.PackageVersion,
    undefined,
    {},
    {},
    PackagesGetPackageVersionForAuthenticatedUserPathParams
  >({
    url: "/user/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific package version for a package owned by the authenticated user.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesGetPackageVersionForAuthenticatedUser = (
  variables: PackagesGetPackageVersionForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PackageVersion,
      undefined,
      Schemas.PackageVersion
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PackageVersion,
    undefined,
    Schemas.PackageVersion
  >(
    queryKeyFn({
      path: "/user/packages/{package_type}/{package_name}/versions/{package_version_id}",
      operationId: "packagesGetPackageVersionForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchPackagesGetPackageVersionForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PackagesRestorePackageVersionForAuthenticatedUserPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  /*
   * Unique identifier of the package version.
   */
  packageVersionId: number;
};

export type PackagesRestorePackageVersionForAuthenticatedUserVariables = {
  pathParams: PackagesRestorePackageVersionForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Restores a package version owned by the authenticated user.
 *
 * You can restore a deleted package version under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scope. If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesRestorePackageVersionForAuthenticatedUser = (
  variables: PackagesRestorePackageVersionForAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    PackagesRestorePackageVersionForAuthenticatedUserPathParams
  >({
    url: "/user/packages/{packageType}/{packageName}/versions/{packageVersionId}/restore",
    method: "post",
    ...variables,
  });

/**
 * Restores a package version owned by the authenticated user.
 *
 * You can restore a deleted package version under the following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scope. If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesRestorePackageVersionForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      PackagesRestorePackageVersionForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    Responses.RequiresAuthentication | Responses.Forbidden | Responses.NotFound,
    PackagesRestorePackageVersionForAuthenticatedUserVariables
  >(
    (variables: PackagesRestorePackageVersionForAuthenticatedUserVariables) =>
      fetchPackagesRestorePackageVersionForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ProjectsCreateForAuthenticatedUserRequestBody = {
  /*
   * Body of the project
   *
   * @example This project represents the sprint of the first week in January
   */
  body?: string | null;
  /*
   * Name of the project
   *
   * @example Week One Sprint
   */
  name: string;
};

export type ProjectsCreateForAuthenticatedUserVariables = {
  body: ProjectsCreateForAuthenticatedUserRequestBody;
} & GithubContext["fetcherOptions"];

export const fetchProjectsCreateForAuthenticatedUser = (
  variables: ProjectsCreateForAuthenticatedUserVariables
) =>
  githubFetch<
    Schemas.Project,
    ProjectsCreateForAuthenticatedUserRequestBody,
    {},
    {},
    {}
  >({ url: "/user/projects", method: "post", ...variables });

export const useProjectsCreateForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Project,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.PreviewHeaderMissing
      | Responses.ValidationFailedSimple,
      ProjectsCreateForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Project,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.PreviewHeaderMissing
    | Responses.ValidationFailedSimple,
    ProjectsCreateForAuthenticatedUserVariables
  >(
    (variables: ProjectsCreateForAuthenticatedUserVariables) =>
      fetchProjectsCreateForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type UsersListPublicEmailsForAuthenticatedQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListPublicEmailsForAuthenticatedResponse = Schemas.Email[];

export type UsersListPublicEmailsForAuthenticatedVariables = {
  queryParams?: UsersListPublicEmailsForAuthenticatedQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.
 */
export const fetchUsersListPublicEmailsForAuthenticated = (
  variables: UsersListPublicEmailsForAuthenticatedVariables
) =>
  githubFetch<
    UsersListPublicEmailsForAuthenticatedResponse,
    undefined,
    {},
    UsersListPublicEmailsForAuthenticatedQueryParams,
    {}
  >({ url: "/user/public_emails", method: "get", ...variables });

/**
 * Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.
 */
export const useUsersListPublicEmailsForAuthenticated = (
  variables: UsersListPublicEmailsForAuthenticatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListPublicEmailsForAuthenticatedResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      UsersListPublicEmailsForAuthenticatedResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    UsersListPublicEmailsForAuthenticatedResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound,
    UsersListPublicEmailsForAuthenticatedResponse
  >(
    queryKeyFn({
      path: "/user/public_emails",
      operationId: "usersListPublicEmailsForAuthenticated",
      variables,
    }),
    () =>
      fetchUsersListPublicEmailsForAuthenticated({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListForAuthenticatedUserQueryParams = {
  /*
   * Can be one of `all`, `public`, or `private`. Note: For GitHub AE, can be one of `all`, `internal`, or `private`.
   *
   * @default all
   */
  visibility?: "all" | "public" | "private";
  /*
   * Comma-separated list of values. Can include:
   * \* `owner`: Repositories that are owned by the authenticated user.
   * \* `collaborator`: Repositories that the user has been added to as a collaborator.
   * \* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
   *
   * @default owner,collaborator,organization_member
   */
  affiliation?: string;
  /*
   * Can be one of `all`, `owner`, `public`, `private`, `member`. Note: For GitHub AE, can be one of `all`, `owner`, `internal`, `private`, `member`. Default: `all`
   *
   * Will cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.
   *
   * @default all
   */
  type?: "all" | "owner" | "public" | "private" | "member";
  /*
   * Can be one of `created`, `updated`, `pushed`, `full_name`.
   *
   * @default full_name
   */
  sort?: "created" | "updated" | "pushed" | "full_name";
  /*
   * Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  before?: string;
};

export type ReposListForAuthenticatedUserResponse = Schemas.Repository[];

export type ReposListForAuthenticatedUserVariables = {
  queryParams?: ReposListForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 */
export const fetchReposListForAuthenticatedUser = (
  variables: ReposListForAuthenticatedUserVariables
) =>
  githubFetch<
    ReposListForAuthenticatedUserResponse,
    undefined,
    {},
    ReposListForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/repos", method: "get", ...variables });

/**
 * Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 */
export const useReposListForAuthenticatedUser = (
  variables: ReposListForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListForAuthenticatedUserResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.ValidationFailed,
      ReposListForAuthenticatedUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListForAuthenticatedUserResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.ValidationFailed,
    ReposListForAuthenticatedUserResponse
  >(
    queryKeyFn({
      path: "/user/repos",
      operationId: "reposListForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchReposListForAuthenticatedUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposCreateForAuthenticatedUserRequestBody = {
  /*
   * Whether to allow merge commits for pull requests.
   *
   * @default true
   * @example true
   */
  allow_merge_commit?: boolean;
  /*
   * Whether to allow rebase merges for pull requests.
   *
   * @default true
   * @example true
   */
  allow_rebase_merge?: boolean;
  /*
   * Whether to allow squash merges for pull requests.
   *
   * @default true
   * @example true
   */
  allow_squash_merge?: boolean;
  /*
   * Whether the repository is initialized with a minimal README.
   *
   * @default false
   */
  auto_init?: boolean;
  /*
   * Whether to delete head branches when pull requests are merged
   *
   * @default false
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /*
   * A short description of the repository.
   */
  description?: string;
  /*
   * The desired language or platform to apply to the .gitignore.
   *
   * @example Haskell
   */
  gitignore_template?: string;
  /*
   * Whether downloads are enabled.
   *
   * @default true
   * @example true
   */
  has_downloads?: boolean;
  /*
   * Whether issues are enabled.
   *
   * @default true
   * @example true
   */
  has_issues?: boolean;
  /*
   * Whether projects are enabled.
   *
   * @default true
   * @example true
   */
  has_projects?: boolean;
  /*
   * Whether the wiki is enabled.
   *
   * @default true
   * @example true
   */
  has_wiki?: boolean;
  /*
   * A URL with more information about the repository.
   */
  homepage?: string;
  /*
   * Whether this repository acts as a template that can be used to generate new repositories.
   *
   * @default false
   * @example true
   */
  is_template?: boolean;
  /*
   * The license keyword of the open source license for this repository.
   *
   * @example mit
   */
  license_template?: string;
  /*
   * The name of the repository.
   *
   * @example Team Environment
   */
  name: string;
  /*
   * Whether the repository is private.
   *
   * @default false
   */
  private?: boolean;
  /*
   * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
   */
  team_id?: number;
};

export type ReposCreateForAuthenticatedUserVariables = {
  body: ReposCreateForAuthenticatedUserRequestBody;
} & GithubContext["fetcherOptions"];

/**
 * Creates a new repository for the authenticated user.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
 * *   `repo` scope to create a private repository.
 */
export const fetchReposCreateForAuthenticatedUser = (
  variables: ReposCreateForAuthenticatedUserVariables
) =>
  githubFetch<
    Schemas.Repository,
    ReposCreateForAuthenticatedUserRequestBody,
    {},
    {},
    {}
  >({ url: "/user/repos", method: "post", ...variables });

/**
 * Creates a new repository for the authenticated user.
 *
 * **OAuth scope requirements**
 *
 * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
 *
 * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
 * *   `repo` scope to create a private repository.
 */
export const useReposCreateForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Repository,
      | Responses.NotModified
      | Responses.BadRequest
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.ValidationFailed,
      ReposCreateForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    Schemas.Repository,
    | Responses.NotModified
    | Responses.BadRequest
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.ValidationFailed,
    ReposCreateForAuthenticatedUserVariables
  >(
    (variables: ReposCreateForAuthenticatedUserVariables) =>
      fetchReposCreateForAuthenticatedUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposListInvitationsForAuthenticatedUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListInvitationsForAuthenticatedUserResponse =
  Schemas.RepositoryInvitation[];

export type ReposListInvitationsForAuthenticatedUserVariables = {
  queryParams?: ReposListInvitationsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
 */
export const fetchReposListInvitationsForAuthenticatedUser = (
  variables: ReposListInvitationsForAuthenticatedUserVariables
) =>
  githubFetch<
    ReposListInvitationsForAuthenticatedUserResponse,
    undefined,
    {},
    ReposListInvitationsForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/repository_invitations", method: "get", ...variables });

/**
 * When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
 */
export const useReposListInvitationsForAuthenticatedUser = (
  variables: ReposListInvitationsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListInvitationsForAuthenticatedUserResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      ReposListInvitationsForAuthenticatedUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListInvitationsForAuthenticatedUserResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound,
    ReposListInvitationsForAuthenticatedUserResponse
  >(
    queryKeyFn({
      path: "/user/repository_invitations",
      operationId: "reposListInvitationsForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchReposListInvitationsForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposDeclineInvitationPathParams = {
  /*
   * invitation_id parameter
   */
  invitationId: number;
};

export type ReposDeclineInvitationVariables = {
  pathParams: ReposDeclineInvitationPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposDeclineInvitation = (
  variables: ReposDeclineInvitationVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ReposDeclineInvitationPathParams>({
    url: "/user/repository_invitations/{invitationId}",
    method: "delete",
    ...variables,
  });

export const useReposDeclineInvitation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotModified
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.Conflict,
      ReposDeclineInvitationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotModified
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.Conflict,
    ReposDeclineInvitationVariables
  >(
    (variables: ReposDeclineInvitationVariables) =>
      fetchReposDeclineInvitation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReposAcceptInvitationPathParams = {
  /*
   * invitation_id parameter
   */
  invitationId: number;
};

export type ReposAcceptInvitationVariables = {
  pathParams: ReposAcceptInvitationPathParams;
} & GithubContext["fetcherOptions"];

export const fetchReposAcceptInvitation = (
  variables: ReposAcceptInvitationVariables
) =>
  githubFetch<undefined, undefined, {}, {}, ReposAcceptInvitationPathParams>({
    url: "/user/repository_invitations/{invitationId}",
    method: "patch",
    ...variables,
  });

export const useReposAcceptInvitation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotModified
      | Responses.Forbidden
      | Responses.NotFound
      | Responses.Conflict,
      ReposAcceptInvitationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotModified
    | Responses.Forbidden
    | Responses.NotFound
    | Responses.Conflict,
    ReposAcceptInvitationVariables
  >(
    (variables: ReposAcceptInvitationVariables) =>
      fetchReposAcceptInvitation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ActivityListReposStarredByAuthenticatedUserQueryParams = {
  /*
   * One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
   *
   * @default created
   */
  sort?: "created" | "updated";
  /*
   * One of `asc` (ascending) or `desc` (descending).
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListReposStarredByAuthenticatedUserResponse =
  Schemas.Repository[];

export type ActivityListReposStarredByAuthenticatedUserVariables = {
  queryParams?: ActivityListReposStarredByAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists repositories the authenticated user has starred.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
 */
export const fetchActivityListReposStarredByAuthenticatedUser = (
  variables: ActivityListReposStarredByAuthenticatedUserVariables
) =>
  githubFetch<
    ActivityListReposStarredByAuthenticatedUserResponse,
    undefined,
    {},
    ActivityListReposStarredByAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/starred", method: "get", ...variables });

/**
 * Lists repositories the authenticated user has starred.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
 */
export const useActivityListReposStarredByAuthenticatedUser = (
  variables: ActivityListReposStarredByAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListReposStarredByAuthenticatedUserResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden,
      ActivityListReposStarredByAuthenticatedUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListReposStarredByAuthenticatedUserResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden,
    ActivityListReposStarredByAuthenticatedUserResponse
  >(
    queryKeyFn({
      path: "/user/starred",
      operationId: "activityListReposStarredByAuthenticatedUser",
      variables,
    }),
    () =>
      fetchActivityListReposStarredByAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityUnstarRepoForAuthenticatedUserPathParams = {
  owner: string;
  repo: string;
};

export type ActivityUnstarRepoForAuthenticatedUserVariables = {
  pathParams: ActivityUnstarRepoForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityUnstarRepoForAuthenticatedUser = (
  variables: ActivityUnstarRepoForAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ActivityUnstarRepoForAuthenticatedUserPathParams
  >({ url: "/user/starred/{owner}/{repo}", method: "delete", ...variables });

export const useActivityUnstarRepoForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      ActivityUnstarRepoForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound,
    ActivityUnstarRepoForAuthenticatedUserVariables
  >(
    (variables: ActivityUnstarRepoForAuthenticatedUserVariables) =>
      fetchActivityUnstarRepoForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActivityCheckRepoIsStarredByAuthenticatedUserPathParams = {
  owner: string;
  repo: string;
};

export type ActivityCheckRepoIsStarredByAuthenticatedUserVariables = {
  pathParams: ActivityCheckRepoIsStarredByAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityCheckRepoIsStarredByAuthenticatedUser = (
  variables: ActivityCheckRepoIsStarredByAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ActivityCheckRepoIsStarredByAuthenticatedUserPathParams
  >({ url: "/user/starred/{owner}/{repo}", method: "get", ...variables });

export const useActivityCheckRepoIsStarredByAuthenticatedUser = (
  variables: ActivityCheckRepoIsStarredByAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Schemas.BasicError,
      undefined
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    undefined,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Schemas.BasicError,
    undefined
  >(
    queryKeyFn({
      path: "/user/starred/{owner}/{repo}",
      operationId: "activityCheckRepoIsStarredByAuthenticatedUser",
      variables,
    }),
    () =>
      fetchActivityCheckRepoIsStarredByAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityStarRepoForAuthenticatedUserPathParams = {
  owner: string;
  repo: string;
};

export type ActivityStarRepoForAuthenticatedUserVariables = {
  pathParams: ActivityStarRepoForAuthenticatedUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const fetchActivityStarRepoForAuthenticatedUser = (
  variables: ActivityStarRepoForAuthenticatedUserVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    ActivityStarRepoForAuthenticatedUserPathParams
  >({ url: "/user/starred/{owner}/{repo}", method: "put", ...variables });

/**
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const useActivityStarRepoForAuthenticatedUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      ActivityStarRepoForAuthenticatedUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGithubContext();
  return reactQuery.useMutation<
    undefined,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden
    | Responses.NotFound,
    ActivityStarRepoForAuthenticatedUserVariables
  >(
    (variables: ActivityStarRepoForAuthenticatedUserVariables) =>
      fetchActivityStarRepoForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ActivityListWatchedReposForAuthenticatedUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListWatchedReposForAuthenticatedUserResponse =
  Schemas.MinimalRepository[];

export type ActivityListWatchedReposForAuthenticatedUserVariables = {
  queryParams?: ActivityListWatchedReposForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists repositories the authenticated user is watching.
 */
export const fetchActivityListWatchedReposForAuthenticatedUser = (
  variables: ActivityListWatchedReposForAuthenticatedUserVariables
) =>
  githubFetch<
    ActivityListWatchedReposForAuthenticatedUserResponse,
    undefined,
    {},
    ActivityListWatchedReposForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/subscriptions", method: "get", ...variables });

/**
 * Lists repositories the authenticated user is watching.
 */
export const useActivityListWatchedReposForAuthenticatedUser = (
  variables: ActivityListWatchedReposForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListWatchedReposForAuthenticatedUserResponse,
      | Responses.NotModified
      | Responses.RequiresAuthentication
      | Responses.Forbidden,
      ActivityListWatchedReposForAuthenticatedUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListWatchedReposForAuthenticatedUserResponse,
    | Responses.NotModified
    | Responses.RequiresAuthentication
    | Responses.Forbidden,
    ActivityListWatchedReposForAuthenticatedUserResponse
  >(
    queryKeyFn({
      path: "/user/subscriptions",
      operationId: "activityListWatchedReposForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchActivityListWatchedReposForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TeamsListForAuthenticatedUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type TeamsListForAuthenticatedUserResponse = Schemas.TeamFull[];

export type TeamsListForAuthenticatedUserVariables = {
  queryParams?: TeamsListForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/).
 */
export const fetchTeamsListForAuthenticatedUser = (
  variables: TeamsListForAuthenticatedUserVariables
) =>
  githubFetch<
    TeamsListForAuthenticatedUserResponse,
    undefined,
    {},
    TeamsListForAuthenticatedUserQueryParams,
    {}
  >({ url: "/user/teams", method: "get", ...variables });

/**
 * List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/).
 */
export const useTeamsListForAuthenticatedUser = (
  variables: TeamsListForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TeamsListForAuthenticatedUserResponse,
      Responses.NotModified | Responses.Forbidden | Responses.NotFound,
      TeamsListForAuthenticatedUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    TeamsListForAuthenticatedUserResponse,
    Responses.NotModified | Responses.Forbidden | Responses.NotFound,
    TeamsListForAuthenticatedUserResponse
  >(
    queryKeyFn({
      path: "/user/teams",
      operationId: "teamsListForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchTeamsListForAuthenticatedUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersListQueryParams = {
  /*
   * A user ID. Only return users with an ID greater than this ID.
   */
  since?: number;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
};

export type UsersListResponse = Schemas.SimpleUser[];

export type UsersListVariables = {
  queryParams?: UsersListQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
 *
 * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
 */
export const fetchUsersList = (variables: UsersListVariables) =>
  githubFetch<UsersListResponse, undefined, {}, UsersListQueryParams, {}>({
    url: "/users",
    method: "get",
    ...variables,
  });

/**
 * Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
 *
 * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
 */
export const useUsersList = (
  variables: UsersListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListResponse,
      Responses.NotModified,
      UsersListResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    UsersListResponse,
    Responses.NotModified,
    UsersListResponse
  >(
    queryKeyFn({ path: "/users", operationId: "usersList", variables }),
    () => fetchUsersList({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersGetByUsernamePathParams = {
  username: string;
};

export type UsersGetByUsernameVariables = {
  pathParams: UsersGetByUsernamePathParams;
} & GithubContext["fetcherOptions"];

/**
 * Provides publicly available information about someone with a GitHub account.
 *
 * GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub plan information' below"
 *
 * The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).
 *
 * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/reference/users#emails)".
 */
export const fetchUsersGetByUsername = (
  variables: UsersGetByUsernameVariables
) =>
  githubFetch<
    Schemas.PrivateUser | Schemas.PublicUser,
    undefined,
    {},
    {},
    UsersGetByUsernamePathParams
  >({ url: "/users/{username}", method: "get", ...variables });

/**
 * Provides publicly available information about someone with a GitHub account.
 *
 * GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub plan information' below"
 *
 * The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).
 *
 * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/reference/users#emails)".
 */
export const useUsersGetByUsername = (
  variables: UsersGetByUsernameVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PrivateUser | Schemas.PublicUser,
      Responses.NotFound,
      Schemas.PrivateUser | Schemas.PublicUser
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PrivateUser | Schemas.PublicUser,
    Responses.NotFound,
    Schemas.PrivateUser | Schemas.PublicUser
  >(
    queryKeyFn({
      path: "/users/{username}",
      operationId: "usersGetByUsername",
      variables,
    }),
    () => fetchUsersGetByUsername({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityListEventsForAuthenticatedUserPathParams = {
  username: string;
};

export type ActivityListEventsForAuthenticatedUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListEventsForAuthenticatedUserResponse = Schemas.Event[];

export type ActivityListEventsForAuthenticatedUserVariables = {
  pathParams: ActivityListEventsForAuthenticatedUserPathParams;
  queryParams?: ActivityListEventsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
 */
export const fetchActivityListEventsForAuthenticatedUser = (
  variables: ActivityListEventsForAuthenticatedUserVariables
) =>
  githubFetch<
    ActivityListEventsForAuthenticatedUserResponse,
    undefined,
    {},
    ActivityListEventsForAuthenticatedUserQueryParams,
    ActivityListEventsForAuthenticatedUserPathParams
  >({ url: "/users/{username}/events", method: "get", ...variables });

/**
 * If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
 */
export const useActivityListEventsForAuthenticatedUser = (
  variables: ActivityListEventsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListEventsForAuthenticatedUserResponse,
      undefined,
      ActivityListEventsForAuthenticatedUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListEventsForAuthenticatedUserResponse,
    undefined,
    ActivityListEventsForAuthenticatedUserResponse
  >(
    queryKeyFn({
      path: "/users/{username}/events",
      operationId: "activityListEventsForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchActivityListEventsForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityListOrgEventsForAuthenticatedUserPathParams = {
  username: string;
  org: string;
};

export type ActivityListOrgEventsForAuthenticatedUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListOrgEventsForAuthenticatedUserResponse = Schemas.Event[];

export type ActivityListOrgEventsForAuthenticatedUserVariables = {
  pathParams: ActivityListOrgEventsForAuthenticatedUserPathParams;
  queryParams?: ActivityListOrgEventsForAuthenticatedUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * This is the user's organization dashboard. You must be authenticated as the user to view this.
 */
export const fetchActivityListOrgEventsForAuthenticatedUser = (
  variables: ActivityListOrgEventsForAuthenticatedUserVariables
) =>
  githubFetch<
    ActivityListOrgEventsForAuthenticatedUserResponse,
    undefined,
    {},
    ActivityListOrgEventsForAuthenticatedUserQueryParams,
    ActivityListOrgEventsForAuthenticatedUserPathParams
  >({
    url: "/users/{username}/events/orgs/{org}",
    method: "get",
    ...variables,
  });

/**
 * This is the user's organization dashboard. You must be authenticated as the user to view this.
 */
export const useActivityListOrgEventsForAuthenticatedUser = (
  variables: ActivityListOrgEventsForAuthenticatedUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListOrgEventsForAuthenticatedUserResponse,
      undefined,
      ActivityListOrgEventsForAuthenticatedUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListOrgEventsForAuthenticatedUserResponse,
    undefined,
    ActivityListOrgEventsForAuthenticatedUserResponse
  >(
    queryKeyFn({
      path: "/users/{username}/events/orgs/{org}",
      operationId: "activityListOrgEventsForAuthenticatedUser",
      variables,
    }),
    () =>
      fetchActivityListOrgEventsForAuthenticatedUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityListPublicEventsForUserPathParams = {
  username: string;
};

export type ActivityListPublicEventsForUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListPublicEventsForUserResponse = Schemas.Event[];

export type ActivityListPublicEventsForUserVariables = {
  pathParams: ActivityListPublicEventsForUserPathParams;
  queryParams?: ActivityListPublicEventsForUserQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityListPublicEventsForUser = (
  variables: ActivityListPublicEventsForUserVariables
) =>
  githubFetch<
    ActivityListPublicEventsForUserResponse,
    undefined,
    {},
    ActivityListPublicEventsForUserQueryParams,
    ActivityListPublicEventsForUserPathParams
  >({ url: "/users/{username}/events/public", method: "get", ...variables });

export const useActivityListPublicEventsForUser = (
  variables: ActivityListPublicEventsForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListPublicEventsForUserResponse,
      undefined,
      ActivityListPublicEventsForUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListPublicEventsForUserResponse,
    undefined,
    ActivityListPublicEventsForUserResponse
  >(
    queryKeyFn({
      path: "/users/{username}/events/public",
      operationId: "activityListPublicEventsForUser",
      variables,
    }),
    () =>
      fetchActivityListPublicEventsForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersListFollowersForUserPathParams = {
  username: string;
};

export type UsersListFollowersForUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListFollowersForUserResponse = Schemas.SimpleUser[];

export type UsersListFollowersForUserVariables = {
  pathParams: UsersListFollowersForUserPathParams;
  queryParams?: UsersListFollowersForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the people following the specified user.
 */
export const fetchUsersListFollowersForUser = (
  variables: UsersListFollowersForUserVariables
) =>
  githubFetch<
    UsersListFollowersForUserResponse,
    undefined,
    {},
    UsersListFollowersForUserQueryParams,
    UsersListFollowersForUserPathParams
  >({ url: "/users/{username}/followers", method: "get", ...variables });

/**
 * Lists the people following the specified user.
 */
export const useUsersListFollowersForUser = (
  variables: UsersListFollowersForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListFollowersForUserResponse,
      undefined,
      UsersListFollowersForUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    UsersListFollowersForUserResponse,
    undefined,
    UsersListFollowersForUserResponse
  >(
    queryKeyFn({
      path: "/users/{username}/followers",
      operationId: "usersListFollowersForUser",
      variables,
    }),
    () => fetchUsersListFollowersForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersListFollowingForUserPathParams = {
  username: string;
};

export type UsersListFollowingForUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListFollowingForUserResponse = Schemas.SimpleUser[];

export type UsersListFollowingForUserVariables = {
  pathParams: UsersListFollowingForUserPathParams;
  queryParams?: UsersListFollowingForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the people who the specified user follows.
 */
export const fetchUsersListFollowingForUser = (
  variables: UsersListFollowingForUserVariables
) =>
  githubFetch<
    UsersListFollowingForUserResponse,
    undefined,
    {},
    UsersListFollowingForUserQueryParams,
    UsersListFollowingForUserPathParams
  >({ url: "/users/{username}/following", method: "get", ...variables });

/**
 * Lists the people who the specified user follows.
 */
export const useUsersListFollowingForUser = (
  variables: UsersListFollowingForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListFollowingForUserResponse,
      undefined,
      UsersListFollowingForUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    UsersListFollowingForUserResponse,
    undefined,
    UsersListFollowingForUserResponse
  >(
    queryKeyFn({
      path: "/users/{username}/following",
      operationId: "usersListFollowingForUser",
      variables,
    }),
    () => fetchUsersListFollowingForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersCheckFollowingForUserPathParams = {
  username: string;
  targetUser: string;
};

export type UsersCheckFollowingForUserVariables = {
  pathParams: UsersCheckFollowingForUserPathParams;
} & GithubContext["fetcherOptions"];

export const fetchUsersCheckFollowingForUser = (
  variables: UsersCheckFollowingForUserVariables
) =>
  githubFetch<
    undefined,
    undefined,
    {},
    {},
    UsersCheckFollowingForUserPathParams
  >({
    url: "/users/{username}/following/{targetUser}",
    method: "get",
    ...variables,
  });

export const useUsersCheckFollowingForUser = (
  variables: UsersCheckFollowingForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, undefined, undefined>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, undefined, undefined>(
    queryKeyFn({
      path: "/users/{username}/following/{target_user}",
      operationId: "usersCheckFollowingForUser",
      variables,
    }),
    () => fetchUsersCheckFollowingForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GistsListForUserPathParams = {
  username: string;
};

export type GistsListForUserQueryParams = {
  /*
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string;
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type GistsListForUserResponse = Schemas.BaseGist[];

export type GistsListForUserVariables = {
  pathParams: GistsListForUserPathParams;
  queryParams?: GistsListForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists public gists for the specified user:
 */
export const fetchGistsListForUser = (variables: GistsListForUserVariables) =>
  githubFetch<
    GistsListForUserResponse,
    undefined,
    {},
    GistsListForUserQueryParams,
    GistsListForUserPathParams
  >({ url: "/users/{username}/gists", method: "get", ...variables });

/**
 * Lists public gists for the specified user:
 */
export const useGistsListForUser = (
  variables: GistsListForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GistsListForUserResponse,
      Responses.ValidationFailed,
      GistsListForUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    GistsListForUserResponse,
    Responses.ValidationFailed,
    GistsListForUserResponse
  >(
    queryKeyFn({
      path: "/users/{username}/gists",
      operationId: "gistsListForUser",
      variables,
    }),
    () => fetchGistsListForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersListGpgKeysForUserPathParams = {
  username: string;
};

export type UsersListGpgKeysForUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListGpgKeysForUserResponse = Schemas.GpgKey[];

export type UsersListGpgKeysForUserVariables = {
  pathParams: UsersListGpgKeysForUserPathParams;
  queryParams?: UsersListGpgKeysForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the GPG keys for a user. This information is accessible by anyone.
 */
export const fetchUsersListGpgKeysForUser = (
  variables: UsersListGpgKeysForUserVariables
) =>
  githubFetch<
    UsersListGpgKeysForUserResponse,
    undefined,
    {},
    UsersListGpgKeysForUserQueryParams,
    UsersListGpgKeysForUserPathParams
  >({ url: "/users/{username}/gpg_keys", method: "get", ...variables });

/**
 * Lists the GPG keys for a user. This information is accessible by anyone.
 */
export const useUsersListGpgKeysForUser = (
  variables: UsersListGpgKeysForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListGpgKeysForUserResponse,
      undefined,
      UsersListGpgKeysForUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    UsersListGpgKeysForUserResponse,
    undefined,
    UsersListGpgKeysForUserResponse
  >(
    queryKeyFn({
      path: "/users/{username}/gpg_keys",
      operationId: "usersListGpgKeysForUser",
      variables,
    }),
    () => fetchUsersListGpgKeysForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersGetContextForUserPathParams = {
  username: string;
};

export type UsersGetContextForUserQueryParams = {
  /*
   * Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.
   */
  subject_type?: "organization" | "repository" | "issue" | "pull_request";
  /*
   * Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.
   */
  subject_id?: string;
};

export type UsersGetContextForUserVariables = {
  pathParams: UsersGetContextForUserPathParams;
  queryParams?: UsersGetContextForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
 *
 * The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
 *
 * ```shell
 *  curl -u username:token
 *   https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
 * ```
 */
export const fetchUsersGetContextForUser = (
  variables: UsersGetContextForUserVariables
) =>
  githubFetch<
    Schemas.Hovercard,
    undefined,
    {},
    UsersGetContextForUserQueryParams,
    UsersGetContextForUserPathParams
  >({ url: "/users/{username}/hovercard", method: "get", ...variables });

/**
 * Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
 *
 * The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
 *
 * ```shell
 *  curl -u username:token
 *   https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
 * ```
 */
export const useUsersGetContextForUser = (
  variables: UsersGetContextForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Hovercard,
      Responses.NotFound | Responses.ValidationFailed,
      Schemas.Hovercard
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Hovercard,
    Responses.NotFound | Responses.ValidationFailed,
    Schemas.Hovercard
  >(
    queryKeyFn({
      path: "/users/{username}/hovercard",
      operationId: "usersGetContextForUser",
      variables,
    }),
    () => fetchUsersGetContextForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AppsGetUserInstallationPathParams = {
  username: string;
};

export type AppsGetUserInstallationVariables = {
  pathParams: AppsGetUserInstallationPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Enables an authenticated GitHub App to find the user’s installation information.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const fetchAppsGetUserInstallation = (
  variables: AppsGetUserInstallationVariables
) =>
  githubFetch<
    Schemas.Installation,
    undefined,
    {},
    {},
    AppsGetUserInstallationPathParams
  >({ url: "/users/{username}/installation", method: "get", ...variables });

/**
 * Enables an authenticated GitHub App to find the user’s installation information.
 *
 * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const useAppsGetUserInstallation = (
  variables: AppsGetUserInstallationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Installation,
      undefined,
      Schemas.Installation
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.Installation,
    undefined,
    Schemas.Installation
  >(
    queryKeyFn({
      path: "/users/{username}/installation",
      operationId: "appsGetUserInstallation",
      variables,
    }),
    () => fetchAppsGetUserInstallation({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UsersListPublicKeysForUserPathParams = {
  username: string;
};

export type UsersListPublicKeysForUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type UsersListPublicKeysForUserResponse = Schemas.KeySimple[];

export type UsersListPublicKeysForUserVariables = {
  pathParams: UsersListPublicKeysForUserPathParams;
  queryParams?: UsersListPublicKeysForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
 */
export const fetchUsersListPublicKeysForUser = (
  variables: UsersListPublicKeysForUserVariables
) =>
  githubFetch<
    UsersListPublicKeysForUserResponse,
    undefined,
    {},
    UsersListPublicKeysForUserQueryParams,
    UsersListPublicKeysForUserPathParams
  >({ url: "/users/{username}/keys", method: "get", ...variables });

/**
 * Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
 */
export const useUsersListPublicKeysForUser = (
  variables: UsersListPublicKeysForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersListPublicKeysForUserResponse,
      undefined,
      UsersListPublicKeysForUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    UsersListPublicKeysForUserResponse,
    undefined,
    UsersListPublicKeysForUserResponse
  >(
    queryKeyFn({
      path: "/users/{username}/keys",
      operationId: "usersListPublicKeysForUser",
      variables,
    }),
    () => fetchUsersListPublicKeysForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrgsListForUserPathParams = {
  username: string;
};

export type OrgsListForUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type OrgsListForUserResponse = Schemas.OrganizationSimple[];

export type OrgsListForUserVariables = {
  pathParams: OrgsListForUserPathParams;
  queryParams?: OrgsListForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
 *
 * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
 */
export const fetchOrgsListForUser = (variables: OrgsListForUserVariables) =>
  githubFetch<
    OrgsListForUserResponse,
    undefined,
    {},
    OrgsListForUserQueryParams,
    OrgsListForUserPathParams
  >({ url: "/users/{username}/orgs", method: "get", ...variables });

/**
 * List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
 *
 * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
 */
export const useOrgsListForUser = (
  variables: OrgsListForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrgsListForUserResponse,
      undefined,
      OrgsListForUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    OrgsListForUserResponse,
    undefined,
    OrgsListForUserResponse
  >(
    queryKeyFn({
      path: "/users/{username}/orgs",
      operationId: "orgsListForUser",
      variables,
    }),
    () => fetchOrgsListForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PackagesGetPackageForUserPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  username: string;
};

export type PackagesGetPackageForUserVariables = {
  pathParams: PackagesGetPackageForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific package metadata for a public package owned by a user.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesGetPackageForUser = (
  variables: PackagesGetPackageForUserVariables
) =>
  githubFetch<
    Schemas.Package,
    undefined,
    {},
    {},
    PackagesGetPackageForUserPathParams
  >({
    url: "/users/{username}/packages/{packageType}/{packageName}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific package metadata for a public package owned by a user.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesGetPackageForUser = (
  variables: PackagesGetPackageForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Package, undefined, Schemas.Package>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<Schemas.Package, undefined, Schemas.Package>(
    queryKeyFn({
      path: "/users/{username}/packages/{package_type}/{package_name}",
      operationId: "packagesGetPackageForUser",
      variables,
    }),
    () => fetchPackagesGetPackageForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PackagesGetAllPackageVersionsForPackageOwnedByUserPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  username: string;
};

export type PackagesGetAllPackageVersionsForPackageOwnedByUserResponse =
  Schemas.PackageVersion[];

export type PackagesGetAllPackageVersionsForPackageOwnedByUserVariables = {
  pathParams: PackagesGetAllPackageVersionsForPackageOwnedByUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Returns all package versions for a public package owned by a specified user.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesGetAllPackageVersionsForPackageOwnedByUser = (
  variables: PackagesGetAllPackageVersionsForPackageOwnedByUserVariables
) =>
  githubFetch<
    PackagesGetAllPackageVersionsForPackageOwnedByUserResponse,
    undefined,
    {},
    {},
    PackagesGetAllPackageVersionsForPackageOwnedByUserPathParams
  >({
    url: "/users/{username}/packages/{packageType}/{packageName}/versions",
    method: "get",
    ...variables,
  });

/**
 * Returns all package versions for a public package owned by a specified user.
 *
 * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesGetAllPackageVersionsForPackageOwnedByUser = (
  variables: PackagesGetAllPackageVersionsForPackageOwnedByUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PackagesGetAllPackageVersionsForPackageOwnedByUserResponse,
      | Responses.RequiresAuthentication
      | Responses.Forbidden
      | Responses.NotFound,
      PackagesGetAllPackageVersionsForPackageOwnedByUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    PackagesGetAllPackageVersionsForPackageOwnedByUserResponse,
    Responses.RequiresAuthentication | Responses.Forbidden | Responses.NotFound,
    PackagesGetAllPackageVersionsForPackageOwnedByUserResponse
  >(
    queryKeyFn({
      path: "/users/{username}/packages/{package_type}/{package_name}/versions",
      operationId: "packagesGetAllPackageVersionsForPackageOwnedByUser",
      variables,
    }),
    () =>
      fetchPackagesGetAllPackageVersionsForPackageOwnedByUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PackagesGetPackageVersionForUserPathParams = {
  /*
   * The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`.
   */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
  /*
   * The name of the package.
   */
  packageName: string;
  /*
   * Unique identifier of the package version.
   */
  packageVersionId: number;
  username: string;
};

export type PackagesGetPackageVersionForUserVariables = {
  pathParams: PackagesGetPackageVersionForUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets a specific package version for a public package owned by a specified user.
 *
 * At this time, to use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const fetchPackagesGetPackageVersionForUser = (
  variables: PackagesGetPackageVersionForUserVariables
) =>
  githubFetch<
    Schemas.PackageVersion,
    undefined,
    {},
    {},
    PackagesGetPackageVersionForUserPathParams
  >({
    url: "/users/{username}/packages/{packageType}/{packageName}/versions/{packageVersionId}",
    method: "get",
    ...variables,
  });

/**
 * Gets a specific package version for a public package owned by a specified user.
 *
 * At this time, to use this endpoint, you must authenticate using an access token with the `packages:read` scope.
 * If `package_type` is not `container`, your token must also include the `repo` scope.
 */
export const usePackagesGetPackageVersionForUser = (
  variables: PackagesGetPackageVersionForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PackageVersion,
      undefined,
      Schemas.PackageVersion
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PackageVersion,
    undefined,
    Schemas.PackageVersion
  >(
    queryKeyFn({
      path: "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}",
      operationId: "packagesGetPackageVersionForUser",
      variables,
    }),
    () =>
      fetchPackagesGetPackageVersionForUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProjectsListForUserPathParams = {
  username: string;
};

export type ProjectsListForUserQueryParams = {
  /*
   * Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
   *
   * @default open
   */
  state?: "open" | "closed" | "all";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ProjectsListForUserResponse = Schemas.Project[];

export type ProjectsListForUserVariables = {
  pathParams: ProjectsListForUserPathParams;
  queryParams?: ProjectsListForUserQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchProjectsListForUser = (
  variables: ProjectsListForUserVariables
) =>
  githubFetch<
    ProjectsListForUserResponse,
    undefined,
    {},
    ProjectsListForUserQueryParams,
    ProjectsListForUserPathParams
  >({ url: "/users/{username}/projects", method: "get", ...variables });

export const useProjectsListForUser = (
  variables: ProjectsListForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProjectsListForUserResponse,
      Responses.PreviewHeaderMissing | Responses.ValidationFailed,
      ProjectsListForUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ProjectsListForUserResponse,
    Responses.PreviewHeaderMissing | Responses.ValidationFailed,
    ProjectsListForUserResponse
  >(
    queryKeyFn({
      path: "/users/{username}/projects",
      operationId: "projectsListForUser",
      variables,
    }),
    () => fetchProjectsListForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityListReceivedEventsForUserPathParams = {
  username: string;
};

export type ActivityListReceivedEventsForUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListReceivedEventsForUserResponse = Schemas.Event[];

export type ActivityListReceivedEventsForUserVariables = {
  pathParams: ActivityListReceivedEventsForUserPathParams;
  queryParams?: ActivityListReceivedEventsForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
 */
export const fetchActivityListReceivedEventsForUser = (
  variables: ActivityListReceivedEventsForUserVariables
) =>
  githubFetch<
    ActivityListReceivedEventsForUserResponse,
    undefined,
    {},
    ActivityListReceivedEventsForUserQueryParams,
    ActivityListReceivedEventsForUserPathParams
  >({ url: "/users/{username}/received_events", method: "get", ...variables });

/**
 * These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
 */
export const useActivityListReceivedEventsForUser = (
  variables: ActivityListReceivedEventsForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListReceivedEventsForUserResponse,
      undefined,
      ActivityListReceivedEventsForUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListReceivedEventsForUserResponse,
    undefined,
    ActivityListReceivedEventsForUserResponse
  >(
    queryKeyFn({
      path: "/users/{username}/received_events",
      operationId: "activityListReceivedEventsForUser",
      variables,
    }),
    () =>
      fetchActivityListReceivedEventsForUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityListReceivedPublicEventsForUserPathParams = {
  username: string;
};

export type ActivityListReceivedPublicEventsForUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListReceivedPublicEventsForUserResponse = Schemas.Event[];

export type ActivityListReceivedPublicEventsForUserVariables = {
  pathParams: ActivityListReceivedPublicEventsForUserPathParams;
  queryParams?: ActivityListReceivedPublicEventsForUserQueryParams;
} & GithubContext["fetcherOptions"];

export const fetchActivityListReceivedPublicEventsForUser = (
  variables: ActivityListReceivedPublicEventsForUserVariables
) =>
  githubFetch<
    ActivityListReceivedPublicEventsForUserResponse,
    undefined,
    {},
    ActivityListReceivedPublicEventsForUserQueryParams,
    ActivityListReceivedPublicEventsForUserPathParams
  >({
    url: "/users/{username}/received_events/public",
    method: "get",
    ...variables,
  });

export const useActivityListReceivedPublicEventsForUser = (
  variables: ActivityListReceivedPublicEventsForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListReceivedPublicEventsForUserResponse,
      undefined,
      ActivityListReceivedPublicEventsForUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListReceivedPublicEventsForUserResponse,
    undefined,
    ActivityListReceivedPublicEventsForUserResponse
  >(
    queryKeyFn({
      path: "/users/{username}/received_events/public",
      operationId: "activityListReceivedPublicEventsForUser",
      variables,
    }),
    () =>
      fetchActivityListReceivedPublicEventsForUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReposListForUserPathParams = {
  username: string;
};

export type ReposListForUserQueryParams = {
  /*
   * Can be one of `all`, `owner`, `member`.
   *
   * @default owner
   */
  type?: "all" | "owner" | "member";
  /*
   * Can be one of `created`, `updated`, `pushed`, `full_name`.
   *
   * @default full_name
   */
  sort?: "created" | "updated" | "pushed" | "full_name";
  /*
   * Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ReposListForUserResponse = Schemas.MinimalRepository[];

export type ReposListForUserVariables = {
  pathParams: ReposListForUserPathParams;
  queryParams?: ReposListForUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.
 */
export const fetchReposListForUser = (variables: ReposListForUserVariables) =>
  githubFetch<
    ReposListForUserResponse,
    undefined,
    {},
    ReposListForUserQueryParams,
    ReposListForUserPathParams
  >({ url: "/users/{username}/repos", method: "get", ...variables });

/**
 * Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.
 */
export const useReposListForUser = (
  variables: ReposListForUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReposListForUserResponse,
      undefined,
      ReposListForUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ReposListForUserResponse,
    undefined,
    ReposListForUserResponse
  >(
    queryKeyFn({
      path: "/users/{username}/repos",
      operationId: "reposListForUser",
      variables,
    }),
    () => fetchReposListForUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type BillingGetGithubActionsBillingUserPathParams = {
  username: string;
};

export type BillingGetGithubActionsBillingUserVariables = {
  pathParams: BillingGetGithubActionsBillingUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Access tokens must have the `user` scope.
 */
export const fetchBillingGetGithubActionsBillingUser = (
  variables: BillingGetGithubActionsBillingUserVariables
) =>
  githubFetch<
    Schemas.ActionsBillingUsage,
    undefined,
    {},
    {},
    BillingGetGithubActionsBillingUserPathParams
  >({
    url: "/users/{username}/settings/billing/actions",
    method: "get",
    ...variables,
  });

/**
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Access tokens must have the `user` scope.
 */
export const useBillingGetGithubActionsBillingUser = (
  variables: BillingGetGithubActionsBillingUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ActionsBillingUsage,
      undefined,
      Schemas.ActionsBillingUsage
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.ActionsBillingUsage,
    undefined,
    Schemas.ActionsBillingUsage
  >(
    queryKeyFn({
      path: "/users/{username}/settings/billing/actions",
      operationId: "billingGetGithubActionsBillingUser",
      variables,
    }),
    () =>
      fetchBillingGetGithubActionsBillingUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type BillingGetGithubPackagesBillingUserPathParams = {
  username: string;
};

export type BillingGetGithubPackagesBillingUserVariables = {
  pathParams: BillingGetGithubPackagesBillingUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the free and paid storage used for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `user` scope.
 */
export const fetchBillingGetGithubPackagesBillingUser = (
  variables: BillingGetGithubPackagesBillingUserVariables
) =>
  githubFetch<
    Schemas.PackagesBillingUsage,
    undefined,
    {},
    {},
    BillingGetGithubPackagesBillingUserPathParams
  >({
    url: "/users/{username}/settings/billing/packages",
    method: "get",
    ...variables,
  });

/**
 * Gets the free and paid storage used for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `user` scope.
 */
export const useBillingGetGithubPackagesBillingUser = (
  variables: BillingGetGithubPackagesBillingUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PackagesBillingUsage,
      undefined,
      Schemas.PackagesBillingUsage
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.PackagesBillingUsage,
    undefined,
    Schemas.PackagesBillingUsage
  >(
    queryKeyFn({
      path: "/users/{username}/settings/billing/packages",
      operationId: "billingGetGithubPackagesBillingUser",
      variables,
    }),
    () =>
      fetchBillingGetGithubPackagesBillingUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type BillingGetSharedStorageBillingUserPathParams = {
  username: string;
};

export type BillingGetSharedStorageBillingUserVariables = {
  pathParams: BillingGetSharedStorageBillingUserPathParams;
} & GithubContext["fetcherOptions"];

/**
 * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `user` scope.
 */
export const fetchBillingGetSharedStorageBillingUser = (
  variables: BillingGetSharedStorageBillingUserVariables
) =>
  githubFetch<
    Schemas.CombinedBillingUsage,
    undefined,
    {},
    {},
    BillingGetSharedStorageBillingUserPathParams
  >({
    url: "/users/{username}/settings/billing/shared-storage",
    method: "get",
    ...variables,
  });

/**
 * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
 *
 * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * Access tokens must have the `user` scope.
 */
export const useBillingGetSharedStorageBillingUser = (
  variables: BillingGetSharedStorageBillingUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CombinedBillingUsage,
      undefined,
      Schemas.CombinedBillingUsage
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    Schemas.CombinedBillingUsage,
    undefined,
    Schemas.CombinedBillingUsage
  >(
    queryKeyFn({
      path: "/users/{username}/settings/billing/shared-storage",
      operationId: "billingGetSharedStorageBillingUser",
      variables,
    }),
    () =>
      fetchBillingGetSharedStorageBillingUser({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityListReposStarredByUserPathParams = {
  username: string;
};

export type ActivityListReposStarredByUserQueryParams = {
  /*
   * One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
   *
   * @default created
   */
  sort?: "created" | "updated";
  /*
   * One of `asc` (ascending) or `desc` (descending).
   *
   * @default desc
   */
  direction?: "asc" | "desc";
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListReposStarredByUserResponse = Schemas.Repository[];

export type ActivityListReposStarredByUserVariables = {
  pathParams: ActivityListReposStarredByUserPathParams;
  queryParams?: ActivityListReposStarredByUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists repositories a user has starred.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
 */
export const fetchActivityListReposStarredByUser = (
  variables: ActivityListReposStarredByUserVariables
) =>
  githubFetch<
    ActivityListReposStarredByUserResponse,
    undefined,
    {},
    ActivityListReposStarredByUserQueryParams,
    ActivityListReposStarredByUserPathParams
  >({ url: "/users/{username}/starred", method: "get", ...variables });

/**
 * Lists repositories a user has starred.
 *
 * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
 */
export const useActivityListReposStarredByUser = (
  variables: ActivityListReposStarredByUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListReposStarredByUserResponse,
      undefined,
      ActivityListReposStarredByUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListReposStarredByUserResponse,
    undefined,
    ActivityListReposStarredByUserResponse
  >(
    queryKeyFn({
      path: "/users/{username}/starred",
      operationId: "activityListReposStarredByUser",
      variables,
    }),
    () =>
      fetchActivityListReposStarredByUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ActivityListReposWatchedByUserPathParams = {
  username: string;
};

export type ActivityListReposWatchedByUserQueryParams = {
  /*
   * Results per page (max 100).
   *
   * @default 30
   */
  per_page?: number;
  /*
   * Page number of the results to fetch.
   *
   * @default 1
   */
  page?: number;
};

export type ActivityListReposWatchedByUserResponse =
  Schemas.MinimalRepository[];

export type ActivityListReposWatchedByUserVariables = {
  pathParams: ActivityListReposWatchedByUserPathParams;
  queryParams?: ActivityListReposWatchedByUserQueryParams;
} & GithubContext["fetcherOptions"];

/**
 * Lists repositories a user is watching.
 */
export const fetchActivityListReposWatchedByUser = (
  variables: ActivityListReposWatchedByUserVariables
) =>
  githubFetch<
    ActivityListReposWatchedByUserResponse,
    undefined,
    {},
    ActivityListReposWatchedByUserQueryParams,
    ActivityListReposWatchedByUserPathParams
  >({ url: "/users/{username}/subscriptions", method: "get", ...variables });

/**
 * Lists repositories a user is watching.
 */
export const useActivityListReposWatchedByUser = (
  variables: ActivityListReposWatchedByUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivityListReposWatchedByUserResponse,
      undefined,
      ActivityListReposWatchedByUserResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<
    ActivityListReposWatchedByUserResponse,
    undefined,
    ActivityListReposWatchedByUserResponse
  >(
    queryKeyFn({
      path: "/users/{username}/subscriptions",
      operationId: "activityListReposWatchedByUser",
      variables,
    }),
    () =>
      fetchActivityListReposWatchedByUser({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type MetaGetZenVariables = GithubContext["fetcherOptions"];

/**
 * Get a random sentence from the Zen of GitHub
 */
export const fetchMetaGetZen = (variables: MetaGetZenVariables) =>
  githubFetch<undefined, undefined, {}, {}, {}>({
    url: "/zen",
    method: "get",
    ...variables,
  });

/**
 * Get a random sentence from the Zen of GitHub
 */
export const useMetaGetZen = (
  variables: MetaGetZenVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, undefined, undefined>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGithubContext(options);
  return reactQuery.useQuery<undefined, undefined, undefined>(
    queryKeyFn({ path: "/zen", operationId: "metaGetZen", variables }),
    () => fetchMetaGetZen({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type QueryOperation =
  | {
      path: "/";
      operationId: "metaRoot";
      variables: MetaRootVariables;
    }
  | {
      path: "/app";
      operationId: "appsGetAuthenticated";
      variables: AppsGetAuthenticatedVariables;
    }
  | {
      path: "/app/hook/config";
      operationId: "appsGetWebhookConfigForApp";
      variables: AppsGetWebhookConfigForAppVariables;
    }
  | {
      path: "/app/installations";
      operationId: "appsListInstallations";
      variables: AppsListInstallationsVariables;
    }
  | {
      path: "/app/installations/{installation_id}";
      operationId: "appsGetInstallation";
      variables: AppsGetInstallationVariables;
    }
  | {
      path: "/applications/grants";
      operationId: "oauthAuthorizationsListGrants";
      variables: OauthAuthorizationsListGrantsVariables;
    }
  | {
      path: "/applications/grants/{grant_id}";
      operationId: "oauthAuthorizationsGetGrant";
      variables: OauthAuthorizationsGetGrantVariables;
    }
  | {
      path: "/applications/{client_id}/tokens/{access_token}";
      operationId: "appsCheckAuthorization";
      variables: AppsCheckAuthorizationVariables;
    }
  | {
      path: "/apps/{app_slug}";
      operationId: "appsGetBySlug";
      variables: AppsGetBySlugVariables;
    }
  | {
      path: "/authorizations";
      operationId: "oauthAuthorizationsListAuthorizations";
      variables: OauthAuthorizationsListAuthorizationsVariables;
    }
  | {
      path: "/authorizations/{authorization_id}";
      operationId: "oauthAuthorizationsGetAuthorization";
      variables: OauthAuthorizationsGetAuthorizationVariables;
    }
  | {
      path: "/codes_of_conduct";
      operationId: "codesOfConductGetAllCodesOfConduct";
      variables: CodesOfConductGetAllCodesOfConductVariables;
    }
  | {
      path: "/codes_of_conduct/{key}";
      operationId: "codesOfConductGetConductCode";
      variables: CodesOfConductGetConductCodeVariables;
    }
  | {
      path: "/emojis";
      operationId: "emojisGet";
      variables: EmojisGetVariables;
    }
  | {
      path: "/enterprises/{enterprise}/actions/permissions";
      operationId: "enterpriseAdminGetGithubActionsPermissionsEnterprise";
      variables: EnterpriseAdminGetGithubActionsPermissionsEnterpriseVariables;
    }
  | {
      path: "/enterprises/{enterprise}/actions/permissions/organizations";
      operationId: "enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise";
      variables: EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseVariables;
    }
  | {
      path: "/enterprises/{enterprise}/actions/permissions/selected-actions";
      operationId: "enterpriseAdminGetAllowedActionsEnterprise";
      variables: EnterpriseAdminGetAllowedActionsEnterpriseVariables;
    }
  | {
      path: "/enterprises/{enterprise}/actions/runner-groups";
      operationId: "enterpriseAdminListSelfHostedRunnerGroupsForEnterprise";
      variables: EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseVariables;
    }
  | {
      path: "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}";
      operationId: "enterpriseAdminGetSelfHostedRunnerGroupForEnterprise";
      variables: EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseVariables;
    }
  | {
      path: "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations";
      operationId: "enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise";
      variables: EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseVariables;
    }
  | {
      path: "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners";
      operationId: "enterpriseAdminListSelfHostedRunnersInGroupForEnterprise";
      variables: EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseVariables;
    }
  | {
      path: "/enterprises/{enterprise}/actions/runners";
      operationId: "enterpriseAdminListSelfHostedRunnersForEnterprise";
      variables: EnterpriseAdminListSelfHostedRunnersForEnterpriseVariables;
    }
  | {
      path: "/enterprises/{enterprise}/actions/runners/downloads";
      operationId: "enterpriseAdminListRunnerApplicationsForEnterprise";
      variables: EnterpriseAdminListRunnerApplicationsForEnterpriseVariables;
    }
  | {
      path: "/enterprises/{enterprise}/actions/runners/{runner_id}";
      operationId: "enterpriseAdminGetSelfHostedRunnerForEnterprise";
      variables: EnterpriseAdminGetSelfHostedRunnerForEnterpriseVariables;
    }
  | {
      path: "/enterprises/{enterprise}/audit-log";
      operationId: "auditLogGetAuditLog";
      variables: AuditLogGetAuditLogVariables;
    }
  | {
      path: "/enterprises/{enterprise}/settings/billing/actions";
      operationId: "billingGetGithubActionsBillingGhe";
      variables: BillingGetGithubActionsBillingGheVariables;
    }
  | {
      path: "/enterprises/{enterprise}/settings/billing/packages";
      operationId: "billingGetGithubPackagesBillingGhe";
      variables: BillingGetGithubPackagesBillingGheVariables;
    }
  | {
      path: "/enterprises/{enterprise}/settings/billing/shared-storage";
      operationId: "billingGetSharedStorageBillingGhe";
      variables: BillingGetSharedStorageBillingGheVariables;
    }
  | {
      path: "/events";
      operationId: "activityListPublicEvents";
      variables: ActivityListPublicEventsVariables;
    }
  | {
      path: "/feeds";
      operationId: "activityGetFeeds";
      variables: ActivityGetFeedsVariables;
    }
  | {
      path: "/gists";
      operationId: "gistsList";
      variables: GistsListVariables;
    }
  | {
      path: "/gists/public";
      operationId: "gistsListPublic";
      variables: GistsListPublicVariables;
    }
  | {
      path: "/gists/starred";
      operationId: "gistsListStarred";
      variables: GistsListStarredVariables;
    }
  | {
      path: "/gists/{gist_id}";
      operationId: "gistsGet";
      variables: GistsGetVariables;
    }
  | {
      path: "/gists/{gist_id}/comments";
      operationId: "gistsListComments";
      variables: GistsListCommentsVariables;
    }
  | {
      path: "/gists/{gist_id}/comments/{comment_id}";
      operationId: "gistsGetComment";
      variables: GistsGetCommentVariables;
    }
  | {
      path: "/gists/{gist_id}/commits";
      operationId: "gistsListCommits";
      variables: GistsListCommitsVariables;
    }
  | {
      path: "/gists/{gist_id}/forks";
      operationId: "gistsListForks";
      variables: GistsListForksVariables;
    }
  | {
      path: "/gists/{gist_id}/star";
      operationId: "gistsCheckIsStarred";
      variables: GistsCheckIsStarredVariables;
    }
  | {
      path: "/gists/{gist_id}/{sha}";
      operationId: "gistsGetRevision";
      variables: GistsGetRevisionVariables;
    }
  | {
      path: "/gitignore/templates";
      operationId: "gitignoreGetAllTemplates";
      variables: GitignoreGetAllTemplatesVariables;
    }
  | {
      path: "/gitignore/templates/{name}";
      operationId: "gitignoreGetTemplate";
      variables: GitignoreGetTemplateVariables;
    }
  | {
      path: "/installation/repositories";
      operationId: "appsListReposAccessibleToInstallation";
      variables: AppsListReposAccessibleToInstallationVariables;
    }
  | {
      path: "/issues";
      operationId: "issuesList";
      variables: IssuesListVariables;
    }
  | {
      path: "/licenses";
      operationId: "licensesGetAllCommonlyUsed";
      variables: LicensesGetAllCommonlyUsedVariables;
    }
  | {
      path: "/licenses/{license}";
      operationId: "licensesGet";
      variables: LicensesGetVariables;
    }
  | {
      path: "/marketplace_listing/accounts/{account_id}";
      operationId: "appsGetSubscriptionPlanForAccount";
      variables: AppsGetSubscriptionPlanForAccountVariables;
    }
  | {
      path: "/marketplace_listing/plans";
      operationId: "appsListPlans";
      variables: AppsListPlansVariables;
    }
  | {
      path: "/marketplace_listing/plans/{plan_id}/accounts";
      operationId: "appsListAccountsForPlan";
      variables: AppsListAccountsForPlanVariables;
    }
  | {
      path: "/marketplace_listing/stubbed/accounts/{account_id}";
      operationId: "appsGetSubscriptionPlanForAccountStubbed";
      variables: AppsGetSubscriptionPlanForAccountStubbedVariables;
    }
  | {
      path: "/marketplace_listing/stubbed/plans";
      operationId: "appsListPlansStubbed";
      variables: AppsListPlansStubbedVariables;
    }
  | {
      path: "/marketplace_listing/stubbed/plans/{plan_id}/accounts";
      operationId: "appsListAccountsForPlanStubbed";
      variables: AppsListAccountsForPlanStubbedVariables;
    }
  | {
      path: "/meta";
      operationId: "metaGet";
      variables: MetaGetVariables;
    }
  | {
      path: "/networks/{owner}/{repo}/events";
      operationId: "activityListPublicEventsForRepoNetwork";
      variables: ActivityListPublicEventsForRepoNetworkVariables;
    }
  | {
      path: "/notifications";
      operationId: "activityListNotificationsForAuthenticatedUser";
      variables: ActivityListNotificationsForAuthenticatedUserVariables;
    }
  | {
      path: "/notifications/threads/{thread_id}";
      operationId: "activityGetThread";
      variables: ActivityGetThreadVariables;
    }
  | {
      path: "/notifications/threads/{thread_id}/subscription";
      operationId: "activityGetThreadSubscriptionForAuthenticatedUser";
      variables: ActivityGetThreadSubscriptionForAuthenticatedUserVariables;
    }
  | {
      path: "/octocat";
      operationId: "metaGetOctocat";
      variables: MetaGetOctocatVariables;
    }
  | {
      path: "/organizations";
      operationId: "orgsList";
      variables: OrgsListVariables;
    }
  | {
      path: "/orgs/{org}";
      operationId: "orgsGet";
      variables: OrgsGetVariables;
    }
  | {
      path: "/orgs/{org}/actions/permissions";
      operationId: "actionsGetGithubActionsPermissionsOrganization";
      variables: ActionsGetGithubActionsPermissionsOrganizationVariables;
    }
  | {
      path: "/orgs/{org}/actions/permissions/repositories";
      operationId: "actionsListSelectedRepositoriesEnabledGithubActionsOrganization";
      variables: ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationVariables;
    }
  | {
      path: "/orgs/{org}/actions/permissions/selected-actions";
      operationId: "actionsGetAllowedActionsOrganization";
      variables: ActionsGetAllowedActionsOrganizationVariables;
    }
  | {
      path: "/orgs/{org}/actions/runner-groups";
      operationId: "actionsListSelfHostedRunnerGroupsForOrg";
      variables: ActionsListSelfHostedRunnerGroupsForOrgVariables;
    }
  | {
      path: "/orgs/{org}/actions/runner-groups/{runner_group_id}";
      operationId: "actionsGetSelfHostedRunnerGroupForOrg";
      variables: ActionsGetSelfHostedRunnerGroupForOrgVariables;
    }
  | {
      path: "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories";
      operationId: "actionsListRepoAccessToSelfHostedRunnerGroupInOrg";
      variables: ActionsListRepoAccessToSelfHostedRunnerGroupInOrgVariables;
    }
  | {
      path: "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners";
      operationId: "actionsListSelfHostedRunnersInGroupForOrg";
      variables: ActionsListSelfHostedRunnersInGroupForOrgVariables;
    }
  | {
      path: "/orgs/{org}/actions/runners";
      operationId: "actionsListSelfHostedRunnersForOrg";
      variables: ActionsListSelfHostedRunnersForOrgVariables;
    }
  | {
      path: "/orgs/{org}/actions/runners/downloads";
      operationId: "actionsListRunnerApplicationsForOrg";
      variables: ActionsListRunnerApplicationsForOrgVariables;
    }
  | {
      path: "/orgs/{org}/actions/runners/{runner_id}";
      operationId: "actionsGetSelfHostedRunnerForOrg";
      variables: ActionsGetSelfHostedRunnerForOrgVariables;
    }
  | {
      path: "/orgs/{org}/actions/secrets";
      operationId: "actionsListOrgSecrets";
      variables: ActionsListOrgSecretsVariables;
    }
  | {
      path: "/orgs/{org}/actions/secrets/public-key";
      operationId: "actionsGetOrgPublicKey";
      variables: ActionsGetOrgPublicKeyVariables;
    }
  | {
      path: "/orgs/{org}/actions/secrets/{secret_name}";
      operationId: "actionsGetOrgSecret";
      variables: ActionsGetOrgSecretVariables;
    }
  | {
      path: "/orgs/{org}/actions/secrets/{secret_name}/repositories";
      operationId: "actionsListSelectedReposForOrgSecret";
      variables: ActionsListSelectedReposForOrgSecretVariables;
    }
  | {
      path: "/orgs/{org}/audit-log";
      operationId: "orgsGetAuditLog";
      variables: OrgsGetAuditLogVariables;
    }
  | {
      path: "/orgs/{org}/blocks";
      operationId: "orgsListBlockedUsers";
      variables: OrgsListBlockedUsersVariables;
    }
  | {
      path: "/orgs/{org}/blocks/{username}";
      operationId: "orgsCheckBlockedUser";
      variables: OrgsCheckBlockedUserVariables;
    }
  | {
      path: "/orgs/{org}/credential-authorizations";
      operationId: "orgsListSamlSsoAuthorizations";
      variables: OrgsListSamlSsoAuthorizationsVariables;
    }
  | {
      path: "/orgs/{org}/events";
      operationId: "activityListPublicOrgEvents";
      variables: ActivityListPublicOrgEventsVariables;
    }
  | {
      path: "/orgs/{org}/failed_invitations";
      operationId: "orgsListFailedInvitations";
      variables: OrgsListFailedInvitationsVariables;
    }
  | {
      path: "/orgs/{org}/hooks";
      operationId: "orgsListWebhooks";
      variables: OrgsListWebhooksVariables;
    }
  | {
      path: "/orgs/{org}/hooks/{hook_id}";
      operationId: "orgsGetWebhook";
      variables: OrgsGetWebhookVariables;
    }
  | {
      path: "/orgs/{org}/hooks/{hook_id}/config";
      operationId: "orgsGetWebhookConfigForOrg";
      variables: OrgsGetWebhookConfigForOrgVariables;
    }
  | {
      path: "/orgs/{org}/installation";
      operationId: "appsGetOrgInstallation";
      variables: AppsGetOrgInstallationVariables;
    }
  | {
      path: "/orgs/{org}/installations";
      operationId: "orgsListAppInstallations";
      variables: OrgsListAppInstallationsVariables;
    }
  | {
      path: "/orgs/{org}/interaction-limits";
      operationId: "interactionsGetRestrictionsForOrg";
      variables: InteractionsGetRestrictionsForOrgVariables;
    }
  | {
      path: "/orgs/{org}/invitations";
      operationId: "orgsListPendingInvitations";
      variables: OrgsListPendingInvitationsVariables;
    }
  | {
      path: "/orgs/{org}/invitations/{invitation_id}/teams";
      operationId: "orgsListInvitationTeams";
      variables: OrgsListInvitationTeamsVariables;
    }
  | {
      path: "/orgs/{org}/issues";
      operationId: "issuesListForOrg";
      variables: IssuesListForOrgVariables;
    }
  | {
      path: "/orgs/{org}/members";
      operationId: "orgsListMembers";
      variables: OrgsListMembersVariables;
    }
  | {
      path: "/orgs/{org}/members/{username}";
      operationId: "orgsCheckMembershipForUser";
      variables: OrgsCheckMembershipForUserVariables;
    }
  | {
      path: "/orgs/{org}/memberships/{username}";
      operationId: "orgsGetMembershipForUser";
      variables: OrgsGetMembershipForUserVariables;
    }
  | {
      path: "/orgs/{org}/migrations";
      operationId: "migrationsListForOrg";
      variables: MigrationsListForOrgVariables;
    }
  | {
      path: "/orgs/{org}/migrations/{migration_id}";
      operationId: "migrationsGetStatusForOrg";
      variables: MigrationsGetStatusForOrgVariables;
    }
  | {
      path: "/orgs/{org}/migrations/{migration_id}/archive";
      operationId: "migrationsDownloadArchiveForOrg";
      variables: MigrationsDownloadArchiveForOrgVariables;
    }
  | {
      path: "/orgs/{org}/migrations/{migration_id}/repositories";
      operationId: "migrationsListReposForOrg";
      variables: MigrationsListReposForOrgVariables;
    }
  | {
      path: "/orgs/{org}/outside_collaborators";
      operationId: "orgsListOutsideCollaborators";
      variables: OrgsListOutsideCollaboratorsVariables;
    }
  | {
      path: "/orgs/{org}/packages/{package_type}/{package_name}";
      operationId: "packagesGetPackageForOrganization";
      variables: PackagesGetPackageForOrganizationVariables;
    }
  | {
      path: "/orgs/{org}/packages/{package_type}/{package_name}/versions";
      operationId: "packagesGetAllPackageVersionsForPackageOwnedByOrg";
      variables: PackagesGetAllPackageVersionsForPackageOwnedByOrgVariables;
    }
  | {
      path: "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}";
      operationId: "packagesGetPackageVersionForOrganization";
      variables: PackagesGetPackageVersionForOrganizationVariables;
    }
  | {
      path: "/orgs/{org}/projects";
      operationId: "projectsListForOrg";
      variables: ProjectsListForOrgVariables;
    }
  | {
      path: "/orgs/{org}/public_members";
      operationId: "orgsListPublicMembers";
      variables: OrgsListPublicMembersVariables;
    }
  | {
      path: "/orgs/{org}/public_members/{username}";
      operationId: "orgsCheckPublicMembershipForUser";
      variables: OrgsCheckPublicMembershipForUserVariables;
    }
  | {
      path: "/orgs/{org}/repos";
      operationId: "reposListForOrg";
      variables: ReposListForOrgVariables;
    }
  | {
      path: "/orgs/{org}/settings/billing/actions";
      operationId: "billingGetGithubActionsBillingOrg";
      variables: BillingGetGithubActionsBillingOrgVariables;
    }
  | {
      path: "/orgs/{org}/settings/billing/packages";
      operationId: "billingGetGithubPackagesBillingOrg";
      variables: BillingGetGithubPackagesBillingOrgVariables;
    }
  | {
      path: "/orgs/{org}/settings/billing/shared-storage";
      operationId: "billingGetSharedStorageBillingOrg";
      variables: BillingGetSharedStorageBillingOrgVariables;
    }
  | {
      path: "/orgs/{org}/team-sync/groups";
      operationId: "teamsListIdpGroupsForOrg";
      variables: TeamsListIdpGroupsForOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams";
      operationId: "teamsList";
      variables: TeamsListVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}";
      operationId: "teamsGetByName";
      variables: TeamsGetByNameVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/discussions";
      operationId: "teamsListDiscussionsInOrg";
      variables: TeamsListDiscussionsInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}";
      operationId: "teamsGetDiscussionInOrg";
      variables: TeamsGetDiscussionInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments";
      operationId: "teamsListDiscussionCommentsInOrg";
      variables: TeamsListDiscussionCommentsInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}";
      operationId: "teamsGetDiscussionCommentInOrg";
      variables: TeamsGetDiscussionCommentInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions";
      operationId: "reactionsListForTeamDiscussionCommentInOrg";
      variables: ReactionsListForTeamDiscussionCommentInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions";
      operationId: "reactionsListForTeamDiscussionInOrg";
      variables: ReactionsListForTeamDiscussionInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/invitations";
      operationId: "teamsListPendingInvitationsInOrg";
      variables: TeamsListPendingInvitationsInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/members";
      operationId: "teamsListMembersInOrg";
      variables: TeamsListMembersInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/memberships/{username}";
      operationId: "teamsGetMembershipForUserInOrg";
      variables: TeamsGetMembershipForUserInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/projects";
      operationId: "teamsListProjectsInOrg";
      variables: TeamsListProjectsInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/projects/{project_id}";
      operationId: "teamsCheckPermissionsForProjectInOrg";
      variables: TeamsCheckPermissionsForProjectInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/repos";
      operationId: "teamsListReposInOrg";
      variables: TeamsListReposInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}";
      operationId: "teamsCheckPermissionsForRepoInOrg";
      variables: TeamsCheckPermissionsForRepoInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/team-sync/group-mappings";
      operationId: "teamsListIdpGroupsInOrg";
      variables: TeamsListIdpGroupsInOrgVariables;
    }
  | {
      path: "/orgs/{org}/teams/{team_slug}/teams";
      operationId: "teamsListChildInOrg";
      variables: TeamsListChildInOrgVariables;
    }
  | {
      path: "/projects/columns/cards/{card_id}";
      operationId: "projectsGetCard";
      variables: ProjectsGetCardVariables;
    }
  | {
      path: "/projects/columns/{column_id}";
      operationId: "projectsGetColumn";
      variables: ProjectsGetColumnVariables;
    }
  | {
      path: "/projects/columns/{column_id}/cards";
      operationId: "projectsListCards";
      variables: ProjectsListCardsVariables;
    }
  | {
      path: "/projects/{project_id}";
      operationId: "projectsGet";
      variables: ProjectsGetVariables;
    }
  | {
      path: "/projects/{project_id}/collaborators";
      operationId: "projectsListCollaborators";
      variables: ProjectsListCollaboratorsVariables;
    }
  | {
      path: "/projects/{project_id}/collaborators/{username}/permission";
      operationId: "projectsGetPermissionForUser";
      variables: ProjectsGetPermissionForUserVariables;
    }
  | {
      path: "/projects/{project_id}/columns";
      operationId: "projectsListColumns";
      variables: ProjectsListColumnsVariables;
    }
  | {
      path: "/rate_limit";
      operationId: "rateLimitGet";
      variables: RateLimitGetVariables;
    }
  | {
      path: "/repos/{owner}/{repo}";
      operationId: "reposGet";
      variables: ReposGetVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/artifacts";
      operationId: "actionsListArtifactsForRepo";
      variables: ActionsListArtifactsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}";
      operationId: "actionsGetArtifact";
      variables: ActionsGetArtifactVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}";
      operationId: "actionsDownloadArtifact";
      variables: ActionsDownloadArtifactVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/jobs/{job_id}";
      operationId: "actionsGetJobForWorkflowRun";
      variables: ActionsGetJobForWorkflowRunVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs";
      operationId: "actionsDownloadJobLogsForWorkflowRun";
      variables: ActionsDownloadJobLogsForWorkflowRunVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/permissions";
      operationId: "actionsGetGithubActionsPermissionsRepository";
      variables: ActionsGetGithubActionsPermissionsRepositoryVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/permissions/selected-actions";
      operationId: "actionsGetAllowedActionsRepository";
      variables: ActionsGetAllowedActionsRepositoryVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runners";
      operationId: "actionsListSelfHostedRunnersForRepo";
      variables: ActionsListSelfHostedRunnersForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runners/downloads";
      operationId: "actionsListRunnerApplicationsForRepo";
      variables: ActionsListRunnerApplicationsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runners/{runner_id}";
      operationId: "actionsGetSelfHostedRunnerForRepo";
      variables: ActionsGetSelfHostedRunnerForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs";
      operationId: "actionsListWorkflowRunsForRepo";
      variables: ActionsListWorkflowRunsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}";
      operationId: "actionsGetWorkflowRun";
      variables: ActionsGetWorkflowRunVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}/approvals";
      operationId: "actionsGetReviewsForRun";
      variables: ActionsGetReviewsForRunVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts";
      operationId: "actionsListWorkflowRunArtifacts";
      variables: ActionsListWorkflowRunArtifactsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs";
      operationId: "actionsListJobsForWorkflowRun";
      variables: ActionsListJobsForWorkflowRunVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}/logs";
      operationId: "actionsDownloadWorkflowRunLogs";
      variables: ActionsDownloadWorkflowRunLogsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments";
      operationId: "actionsGetPendingDeploymentsForRun";
      variables: ActionsGetPendingDeploymentsForRunVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/runs/{run_id}/timing";
      operationId: "actionsGetWorkflowRunUsage";
      variables: ActionsGetWorkflowRunUsageVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/secrets";
      operationId: "actionsListRepoSecrets";
      variables: ActionsListRepoSecretsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/secrets/public-key";
      operationId: "actionsGetRepoPublicKey";
      variables: ActionsGetRepoPublicKeyVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/secrets/{secret_name}";
      operationId: "actionsGetRepoSecret";
      variables: ActionsGetRepoSecretVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/workflows";
      operationId: "actionsListRepoWorkflows";
      variables: ActionsListRepoWorkflowsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}";
      operationId: "actionsGetWorkflow";
      variables: ActionsGetWorkflowVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs";
      operationId: "actionsListWorkflowRuns";
      variables: ActionsListWorkflowRunsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing";
      operationId: "actionsGetWorkflowUsage";
      variables: ActionsGetWorkflowUsageVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/assignees";
      operationId: "issuesListAssignees";
      variables: IssuesListAssigneesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/assignees/{assignee}";
      operationId: "issuesCheckUserCanBeAssigned";
      variables: IssuesCheckUserCanBeAssignedVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches";
      operationId: "reposListBranches";
      variables: ReposListBranchesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}";
      operationId: "reposGetBranch";
      variables: ReposGetBranchVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection";
      operationId: "reposGetBranchProtection";
      variables: ReposGetBranchProtectionVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins";
      operationId: "reposGetAdminBranchProtection";
      variables: ReposGetAdminBranchProtectionVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews";
      operationId: "reposGetPullRequestReviewProtection";
      variables: ReposGetPullRequestReviewProtectionVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures";
      operationId: "reposGetCommitSignatureProtection";
      variables: ReposGetCommitSignatureProtectionVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks";
      operationId: "reposGetStatusChecksProtection";
      variables: ReposGetStatusChecksProtectionVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts";
      operationId: "reposGetAllStatusCheckContexts";
      variables: ReposGetAllStatusCheckContextsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions";
      operationId: "reposGetAccessRestrictions";
      variables: ReposGetAccessRestrictionsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps";
      operationId: "reposGetAppsWithAccessToProtectedBranch";
      variables: ReposGetAppsWithAccessToProtectedBranchVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams";
      operationId: "reposGetTeamsWithAccessToProtectedBranch";
      variables: ReposGetTeamsWithAccessToProtectedBranchVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users";
      operationId: "reposGetUsersWithAccessToProtectedBranch";
      variables: ReposGetUsersWithAccessToProtectedBranchVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/check-runs/{check_run_id}";
      operationId: "checksGet";
      variables: ChecksGetVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations";
      operationId: "checksListAnnotations";
      variables: ChecksListAnnotationsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/check-suites/{check_suite_id}";
      operationId: "checksGetSuite";
      variables: ChecksGetSuiteVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs";
      operationId: "checksListForSuite";
      variables: ChecksListForSuiteVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/code-scanning/alerts";
      operationId: "codeScanningListAlertsForRepo";
      variables: CodeScanningListAlertsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}";
      operationId: "codeScanningGetAlert";
      variables: CodeScanningGetAlertVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances";
      operationId: "codeScanningListAlertsInstances";
      variables: CodeScanningListAlertsInstancesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/code-scanning/analyses";
      operationId: "codeScanningListRecentAnalyses";
      variables: CodeScanningListRecentAnalysesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}";
      operationId: "codeScanningGetAnalysis";
      variables: CodeScanningGetAnalysisVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}";
      operationId: "codeScanningGetSarif";
      variables: CodeScanningGetSarifVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/collaborators";
      operationId: "reposListCollaborators";
      variables: ReposListCollaboratorsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/collaborators/{username}";
      operationId: "reposCheckCollaborator";
      variables: ReposCheckCollaboratorVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/collaborators/{username}/permission";
      operationId: "reposGetCollaboratorPermissionLevel";
      variables: ReposGetCollaboratorPermissionLevelVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/comments";
      operationId: "reposListCommitCommentsForRepo";
      variables: ReposListCommitCommentsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/comments/{comment_id}";
      operationId: "reposGetCommitComment";
      variables: ReposGetCommitCommentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/comments/{comment_id}/reactions";
      operationId: "reactionsListForCommitComment";
      variables: ReactionsListForCommitCommentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits";
      operationId: "reposListCommits";
      variables: ReposListCommitsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head";
      operationId: "reposListBranchesForHeadCommit";
      variables: ReposListBranchesForHeadCommitVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits/{commit_sha}/comments";
      operationId: "reposListCommentsForCommit";
      variables: ReposListCommentsForCommitVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits/{commit_sha}/pulls";
      operationId: "reposListPullRequestsAssociatedWithCommit";
      variables: ReposListPullRequestsAssociatedWithCommitVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits/{ref}";
      operationId: "reposGetCommit";
      variables: ReposGetCommitVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits/{ref}/check-runs";
      operationId: "checksListForRef";
      variables: ChecksListForRefVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits/{ref}/check-suites";
      operationId: "checksListSuitesForRef";
      variables: ChecksListSuitesForRefVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits/{ref}/status";
      operationId: "reposGetCombinedStatusForRef";
      variables: ReposGetCombinedStatusForRefVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/commits/{ref}/statuses";
      operationId: "reposListCommitStatusesForRef";
      variables: ReposListCommitStatusesForRefVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/community/code_of_conduct";
      operationId: "codesOfConductGetForRepo";
      variables: CodesOfConductGetForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/community/profile";
      operationId: "reposGetCommunityProfileMetrics";
      variables: ReposGetCommunityProfileMetricsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/compare/{base}...{head}";
      operationId: "reposCompareCommits";
      variables: ReposCompareCommitsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/contents/{path}";
      operationId: "reposGetContent";
      variables: ReposGetContentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/contributors";
      operationId: "reposListContributors";
      variables: ReposListContributorsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/deployments";
      operationId: "reposListDeployments";
      variables: ReposListDeploymentsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/deployments/{deployment_id}";
      operationId: "reposGetDeployment";
      variables: ReposGetDeploymentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses";
      operationId: "reposListDeploymentStatuses";
      variables: ReposListDeploymentStatusesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}";
      operationId: "reposGetDeploymentStatus";
      variables: ReposGetDeploymentStatusVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/environments";
      operationId: "reposGetAllEnvironments";
      variables: ReposGetAllEnvironmentsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/environments/{environment_name}";
      operationId: "reposGetEnvironment";
      variables: ReposGetEnvironmentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/events";
      operationId: "activityListRepoEvents";
      variables: ActivityListRepoEventsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/forks";
      operationId: "reposListForks";
      variables: ReposListForksVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/git/blobs/{file_sha}";
      operationId: "gitGetBlob";
      variables: GitGetBlobVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/git/commits/{commit_sha}";
      operationId: "gitGetCommit";
      variables: GitGetCommitVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/git/matching-refs/{ref}";
      operationId: "gitListMatchingRefs";
      variables: GitListMatchingRefsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/git/ref/{ref}";
      operationId: "gitGetRef";
      variables: GitGetRefVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/git/tags/{tag_sha}";
      operationId: "gitGetTag";
      variables: GitGetTagVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/git/trees/{tree_sha}";
      operationId: "gitGetTree";
      variables: GitGetTreeVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/hooks";
      operationId: "reposListWebhooks";
      variables: ReposListWebhooksVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/hooks/{hook_id}";
      operationId: "reposGetWebhook";
      variables: ReposGetWebhookVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/hooks/{hook_id}/config";
      operationId: "reposGetWebhookConfigForRepo";
      variables: ReposGetWebhookConfigForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/import";
      operationId: "migrationsGetImportStatus";
      variables: MigrationsGetImportStatusVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/import/authors";
      operationId: "migrationsGetCommitAuthors";
      variables: MigrationsGetCommitAuthorsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/import/large_files";
      operationId: "migrationsGetLargeFiles";
      variables: MigrationsGetLargeFilesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/installation";
      operationId: "appsGetRepoInstallation";
      variables: AppsGetRepoInstallationVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/interaction-limits";
      operationId: "interactionsGetRestrictionsForRepo";
      variables: InteractionsGetRestrictionsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/invitations";
      operationId: "reposListInvitations";
      variables: ReposListInvitationsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues";
      operationId: "issuesListForRepo";
      variables: IssuesListForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/comments";
      operationId: "issuesListCommentsForRepo";
      variables: IssuesListCommentsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/comments/{comment_id}";
      operationId: "issuesGetComment";
      variables: IssuesGetCommentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions";
      operationId: "reactionsListForIssueComment";
      variables: ReactionsListForIssueCommentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/events";
      operationId: "issuesListEventsForRepo";
      variables: IssuesListEventsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/events/{event_id}";
      operationId: "issuesGetEvent";
      variables: IssuesGetEventVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/{issue_number}";
      operationId: "issuesGet";
      variables: IssuesGetVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/{issue_number}/comments";
      operationId: "issuesListComments";
      variables: IssuesListCommentsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/{issue_number}/events";
      operationId: "issuesListEvents";
      variables: IssuesListEventsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/{issue_number}/labels";
      operationId: "issuesListLabelsOnIssue";
      variables: IssuesListLabelsOnIssueVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/{issue_number}/reactions";
      operationId: "reactionsListForIssue";
      variables: ReactionsListForIssueVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/issues/{issue_number}/timeline";
      operationId: "issuesListEventsForTimeline";
      variables: IssuesListEventsForTimelineVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/keys";
      operationId: "reposListDeployKeys";
      variables: ReposListDeployKeysVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/keys/{key_id}";
      operationId: "reposGetDeployKey";
      variables: ReposGetDeployKeyVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/labels";
      operationId: "issuesListLabelsForRepo";
      variables: IssuesListLabelsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/labels/{name}";
      operationId: "issuesGetLabel";
      variables: IssuesGetLabelVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/languages";
      operationId: "reposListLanguages";
      variables: ReposListLanguagesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/license";
      operationId: "licensesGetForRepo";
      variables: LicensesGetForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/milestones";
      operationId: "issuesListMilestones";
      variables: IssuesListMilestonesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/milestones/{milestone_number}";
      operationId: "issuesGetMilestone";
      variables: IssuesGetMilestoneVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/milestones/{milestone_number}/labels";
      operationId: "issuesListLabelsForMilestone";
      variables: IssuesListLabelsForMilestoneVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/notifications";
      operationId: "activityListRepoNotificationsForAuthenticatedUser";
      variables: ActivityListRepoNotificationsForAuthenticatedUserVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pages";
      operationId: "reposGetPages";
      variables: ReposGetPagesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pages/builds";
      operationId: "reposListPagesBuilds";
      variables: ReposListPagesBuildsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pages/builds/latest";
      operationId: "reposGetLatestPagesBuild";
      variables: ReposGetLatestPagesBuildVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pages/builds/{build_id}";
      operationId: "reposGetPagesBuild";
      variables: ReposGetPagesBuildVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/projects";
      operationId: "projectsListForRepo";
      variables: ProjectsListForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls";
      operationId: "pullsList";
      variables: PullsListVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/comments";
      operationId: "pullsListReviewCommentsForRepo";
      variables: PullsListReviewCommentsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/comments/{comment_id}";
      operationId: "pullsGetReviewComment";
      variables: PullsGetReviewCommentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions";
      operationId: "reactionsListForPullRequestReviewComment";
      variables: ReactionsListForPullRequestReviewCommentVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pull_number}";
      operationId: "pullsGet";
      variables: PullsGetVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/comments";
      operationId: "pullsListReviewComments";
      variables: PullsListReviewCommentsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/commits";
      operationId: "pullsListCommits";
      variables: PullsListCommitsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/files";
      operationId: "pullsListFiles";
      variables: PullsListFilesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/merge";
      operationId: "pullsCheckIfMerged";
      variables: PullsCheckIfMergedVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers";
      operationId: "pullsListRequestedReviewers";
      variables: PullsListRequestedReviewersVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews";
      operationId: "pullsListReviews";
      variables: PullsListReviewsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}";
      operationId: "pullsGetReview";
      variables: PullsGetReviewVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments";
      operationId: "pullsListCommentsForReview";
      variables: PullsListCommentsForReviewVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/readme";
      operationId: "reposGetReadme";
      variables: ReposGetReadmeVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/readme/{dir}";
      operationId: "reposGetReadmeFromAltPath";
      variables: ReposGetReadmeFromAltPathVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/releases";
      operationId: "reposListReleases";
      variables: ReposListReleasesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/releases/assets/{asset_id}";
      operationId: "reposGetReleaseAsset";
      variables: ReposGetReleaseAssetVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/releases/latest";
      operationId: "reposGetLatestRelease";
      variables: ReposGetLatestReleaseVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/releases/tags/{tag}";
      operationId: "reposGetReleaseByTag";
      variables: ReposGetReleaseByTagVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/releases/{release_id}";
      operationId: "reposGetRelease";
      variables: ReposGetReleaseVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/releases/{release_id}/assets";
      operationId: "reposListReleaseAssets";
      variables: ReposListReleaseAssetsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/secret-scanning/alerts";
      operationId: "secretScanningListAlertsForRepo";
      variables: SecretScanningListAlertsForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}";
      operationId: "secretScanningGetAlert";
      variables: SecretScanningGetAlertVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/stargazers";
      operationId: "activityListStargazersForRepo";
      variables: ActivityListStargazersForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/stats/code_frequency";
      operationId: "reposGetCodeFrequencyStats";
      variables: ReposGetCodeFrequencyStatsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/stats/commit_activity";
      operationId: "reposGetCommitActivityStats";
      variables: ReposGetCommitActivityStatsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/stats/contributors";
      operationId: "reposGetContributorsStats";
      variables: ReposGetContributorsStatsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/stats/participation";
      operationId: "reposGetParticipationStats";
      variables: ReposGetParticipationStatsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/stats/punch_card";
      operationId: "reposGetPunchCardStats";
      variables: ReposGetPunchCardStatsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/subscribers";
      operationId: "activityListWatchersForRepo";
      variables: ActivityListWatchersForRepoVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/subscription";
      operationId: "activityGetRepoSubscription";
      variables: ActivityGetRepoSubscriptionVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/tags";
      operationId: "reposListTags";
      variables: ReposListTagsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/tarball/{ref}";
      operationId: "reposDownloadTarballArchive";
      variables: ReposDownloadTarballArchiveVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/teams";
      operationId: "reposListTeams";
      variables: ReposListTeamsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/topics";
      operationId: "reposGetAllTopics";
      variables: ReposGetAllTopicsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/traffic/clones";
      operationId: "reposGetClones";
      variables: ReposGetClonesVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/traffic/popular/paths";
      operationId: "reposGetTopPaths";
      variables: ReposGetTopPathsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/traffic/popular/referrers";
      operationId: "reposGetTopReferrers";
      variables: ReposGetTopReferrersVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/traffic/views";
      operationId: "reposGetViews";
      variables: ReposGetViewsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/vulnerability-alerts";
      operationId: "reposCheckVulnerabilityAlerts";
      variables: ReposCheckVulnerabilityAlertsVariables;
    }
  | {
      path: "/repos/{owner}/{repo}/zipball/{ref}";
      operationId: "reposDownloadZipballArchive";
      variables: ReposDownloadZipballArchiveVariables;
    }
  | {
      path: "/repositories";
      operationId: "reposListPublic";
      variables: ReposListPublicVariables;
    }
  | {
      path: "/repositories/{repository_id}/environments/{environment_name}/secrets";
      operationId: "actionsListEnvironmentSecrets";
      variables: ActionsListEnvironmentSecretsVariables;
    }
  | {
      path: "/repositories/{repository_id}/environments/{environment_name}/secrets/public-key";
      operationId: "actionsGetEnvironmentPublicKey";
      variables: ActionsGetEnvironmentPublicKeyVariables;
    }
  | {
      path: "/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}";
      operationId: "actionsGetEnvironmentSecret";
      variables: ActionsGetEnvironmentSecretVariables;
    }
  | {
      path: "/scim/v2/enterprises/{enterprise}/Groups";
      operationId: "enterpriseAdminListProvisionedGroupsEnterprise";
      variables: EnterpriseAdminListProvisionedGroupsEnterpriseVariables;
    }
  | {
      path: "/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}";
      operationId: "enterpriseAdminGetProvisioningInformationForEnterpriseGroup";
      variables: EnterpriseAdminGetProvisioningInformationForEnterpriseGroupVariables;
    }
  | {
      path: "/scim/v2/enterprises/{enterprise}/Users";
      operationId: "enterpriseAdminListProvisionedIdentitiesEnterprise";
      variables: EnterpriseAdminListProvisionedIdentitiesEnterpriseVariables;
    }
  | {
      path: "/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}";
      operationId: "enterpriseAdminGetProvisioningInformationForEnterpriseUser";
      variables: EnterpriseAdminGetProvisioningInformationForEnterpriseUserVariables;
    }
  | {
      path: "/scim/v2/organizations/{org}/Users";
      operationId: "scimListProvisionedIdentities";
      variables: ScimListProvisionedIdentitiesVariables;
    }
  | {
      path: "/scim/v2/organizations/{org}/Users/{scim_user_id}";
      operationId: "scimGetProvisioningInformationForUser";
      variables: ScimGetProvisioningInformationForUserVariables;
    }
  | {
      path: "/search/code";
      operationId: "searchCode";
      variables: SearchCodeVariables;
    }
  | {
      path: "/search/commits";
      operationId: "searchCommits";
      variables: SearchCommitsVariables;
    }
  | {
      path: "/search/issues";
      operationId: "searchIssuesAndPullRequests";
      variables: SearchIssuesAndPullRequestsVariables;
    }
  | {
      path: "/search/labels";
      operationId: "searchLabels";
      variables: SearchLabelsVariables;
    }
  | {
      path: "/search/repositories";
      operationId: "searchRepos";
      variables: SearchReposVariables;
    }
  | {
      path: "/search/topics";
      operationId: "searchTopics";
      variables: SearchTopicsVariables;
    }
  | {
      path: "/search/users";
      operationId: "searchUsers";
      variables: SearchUsersVariables;
    }
  | {
      path: "/teams/{team_id}";
      operationId: "teamsGetLegacy";
      variables: TeamsGetLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/discussions";
      operationId: "teamsListDiscussionsLegacy";
      variables: TeamsListDiscussionsLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/discussions/{discussion_number}";
      operationId: "teamsGetDiscussionLegacy";
      variables: TeamsGetDiscussionLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/discussions/{discussion_number}/comments";
      operationId: "teamsListDiscussionCommentsLegacy";
      variables: TeamsListDiscussionCommentsLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}";
      operationId: "teamsGetDiscussionCommentLegacy";
      variables: TeamsGetDiscussionCommentLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions";
      operationId: "reactionsListForTeamDiscussionCommentLegacy";
      variables: ReactionsListForTeamDiscussionCommentLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/discussions/{discussion_number}/reactions";
      operationId: "reactionsListForTeamDiscussionLegacy";
      variables: ReactionsListForTeamDiscussionLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/invitations";
      operationId: "teamsListPendingInvitationsLegacy";
      variables: TeamsListPendingInvitationsLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/members";
      operationId: "teamsListMembersLegacy";
      variables: TeamsListMembersLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/members/{username}";
      operationId: "teamsGetMemberLegacy";
      variables: TeamsGetMemberLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/memberships/{username}";
      operationId: "teamsGetMembershipForUserLegacy";
      variables: TeamsGetMembershipForUserLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/projects";
      operationId: "teamsListProjectsLegacy";
      variables: TeamsListProjectsLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/projects/{project_id}";
      operationId: "teamsCheckPermissionsForProjectLegacy";
      variables: TeamsCheckPermissionsForProjectLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/repos";
      operationId: "teamsListReposLegacy";
      variables: TeamsListReposLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/repos/{owner}/{repo}";
      operationId: "teamsCheckPermissionsForRepoLegacy";
      variables: TeamsCheckPermissionsForRepoLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/team-sync/group-mappings";
      operationId: "teamsListIdpGroupsForLegacy";
      variables: TeamsListIdpGroupsForLegacyVariables;
    }
  | {
      path: "/teams/{team_id}/teams";
      operationId: "teamsListChildLegacy";
      variables: TeamsListChildLegacyVariables;
    }
  | {
      path: "/user";
      operationId: "usersGetAuthenticated";
      variables: UsersGetAuthenticatedVariables;
    }
  | {
      path: "/user/blocks";
      operationId: "usersListBlockedByAuthenticated";
      variables: UsersListBlockedByAuthenticatedVariables;
    }
  | {
      path: "/user/blocks/{username}";
      operationId: "usersCheckBlocked";
      variables: UsersCheckBlockedVariables;
    }
  | {
      path: "/user/emails";
      operationId: "usersListEmailsForAuthenticated";
      variables: UsersListEmailsForAuthenticatedVariables;
    }
  | {
      path: "/user/followers";
      operationId: "usersListFollowersForAuthenticatedUser";
      variables: UsersListFollowersForAuthenticatedUserVariables;
    }
  | {
      path: "/user/following";
      operationId: "usersListFollowedByAuthenticated";
      variables: UsersListFollowedByAuthenticatedVariables;
    }
  | {
      path: "/user/following/{username}";
      operationId: "usersCheckPersonIsFollowedByAuthenticated";
      variables: UsersCheckPersonIsFollowedByAuthenticatedVariables;
    }
  | {
      path: "/user/gpg_keys";
      operationId: "usersListGpgKeysForAuthenticated";
      variables: UsersListGpgKeysForAuthenticatedVariables;
    }
  | {
      path: "/user/gpg_keys/{gpg_key_id}";
      operationId: "usersGetGpgKeyForAuthenticated";
      variables: UsersGetGpgKeyForAuthenticatedVariables;
    }
  | {
      path: "/user/installations";
      operationId: "appsListInstallationsForAuthenticatedUser";
      variables: AppsListInstallationsForAuthenticatedUserVariables;
    }
  | {
      path: "/user/installations/{installation_id}/repositories";
      operationId: "appsListInstallationReposForAuthenticatedUser";
      variables: AppsListInstallationReposForAuthenticatedUserVariables;
    }
  | {
      path: "/user/interaction-limits";
      operationId: "interactionsGetRestrictionsForAuthenticatedUser";
      variables: InteractionsGetRestrictionsForAuthenticatedUserVariables;
    }
  | {
      path: "/user/issues";
      operationId: "issuesListForAuthenticatedUser";
      variables: IssuesListForAuthenticatedUserVariables;
    }
  | {
      path: "/user/keys";
      operationId: "usersListPublicSshKeysForAuthenticated";
      variables: UsersListPublicSshKeysForAuthenticatedVariables;
    }
  | {
      path: "/user/keys/{key_id}";
      operationId: "usersGetPublicSshKeyForAuthenticated";
      variables: UsersGetPublicSshKeyForAuthenticatedVariables;
    }
  | {
      path: "/user/marketplace_purchases";
      operationId: "appsListSubscriptionsForAuthenticatedUser";
      variables: AppsListSubscriptionsForAuthenticatedUserVariables;
    }
  | {
      path: "/user/marketplace_purchases/stubbed";
      operationId: "appsListSubscriptionsForAuthenticatedUserStubbed";
      variables: AppsListSubscriptionsForAuthenticatedUserStubbedVariables;
    }
  | {
      path: "/user/memberships/orgs";
      operationId: "orgsListMembershipsForAuthenticatedUser";
      variables: OrgsListMembershipsForAuthenticatedUserVariables;
    }
  | {
      path: "/user/memberships/orgs/{org}";
      operationId: "orgsGetMembershipForAuthenticatedUser";
      variables: OrgsGetMembershipForAuthenticatedUserVariables;
    }
  | {
      path: "/user/migrations";
      operationId: "migrationsListForAuthenticatedUser";
      variables: MigrationsListForAuthenticatedUserVariables;
    }
  | {
      path: "/user/migrations/{migration_id}";
      operationId: "migrationsGetStatusForAuthenticatedUser";
      variables: MigrationsGetStatusForAuthenticatedUserVariables;
    }
  | {
      path: "/user/migrations/{migration_id}/archive";
      operationId: "migrationsGetArchiveForAuthenticatedUser";
      variables: MigrationsGetArchiveForAuthenticatedUserVariables;
    }
  | {
      path: "/user/migrations/{migration_id}/repositories";
      operationId: "migrationsListReposForUser";
      variables: MigrationsListReposForUserVariables;
    }
  | {
      path: "/user/orgs";
      operationId: "orgsListForAuthenticatedUser";
      variables: OrgsListForAuthenticatedUserVariables;
    }
  | {
      path: "/user/packages/{package_type}/{package_name}";
      operationId: "packagesGetPackageForAuthenticatedUser";
      variables: PackagesGetPackageForAuthenticatedUserVariables;
    }
  | {
      path: "/user/packages/{package_type}/{package_name}/versions";
      operationId: "packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser";
      variables: PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserVariables;
    }
  | {
      path: "/user/packages/{package_type}/{package_name}/versions/{package_version_id}";
      operationId: "packagesGetPackageVersionForAuthenticatedUser";
      variables: PackagesGetPackageVersionForAuthenticatedUserVariables;
    }
  | {
      path: "/user/public_emails";
      operationId: "usersListPublicEmailsForAuthenticated";
      variables: UsersListPublicEmailsForAuthenticatedVariables;
    }
  | {
      path: "/user/repos";
      operationId: "reposListForAuthenticatedUser";
      variables: ReposListForAuthenticatedUserVariables;
    }
  | {
      path: "/user/repository_invitations";
      operationId: "reposListInvitationsForAuthenticatedUser";
      variables: ReposListInvitationsForAuthenticatedUserVariables;
    }
  | {
      path: "/user/starred";
      operationId: "activityListReposStarredByAuthenticatedUser";
      variables: ActivityListReposStarredByAuthenticatedUserVariables;
    }
  | {
      path: "/user/starred/{owner}/{repo}";
      operationId: "activityCheckRepoIsStarredByAuthenticatedUser";
      variables: ActivityCheckRepoIsStarredByAuthenticatedUserVariables;
    }
  | {
      path: "/user/subscriptions";
      operationId: "activityListWatchedReposForAuthenticatedUser";
      variables: ActivityListWatchedReposForAuthenticatedUserVariables;
    }
  | {
      path: "/user/teams";
      operationId: "teamsListForAuthenticatedUser";
      variables: TeamsListForAuthenticatedUserVariables;
    }
  | {
      path: "/users";
      operationId: "usersList";
      variables: UsersListVariables;
    }
  | {
      path: "/users/{username}";
      operationId: "usersGetByUsername";
      variables: UsersGetByUsernameVariables;
    }
  | {
      path: "/users/{username}/events";
      operationId: "activityListEventsForAuthenticatedUser";
      variables: ActivityListEventsForAuthenticatedUserVariables;
    }
  | {
      path: "/users/{username}/events/orgs/{org}";
      operationId: "activityListOrgEventsForAuthenticatedUser";
      variables: ActivityListOrgEventsForAuthenticatedUserVariables;
    }
  | {
      path: "/users/{username}/events/public";
      operationId: "activityListPublicEventsForUser";
      variables: ActivityListPublicEventsForUserVariables;
    }
  | {
      path: "/users/{username}/followers";
      operationId: "usersListFollowersForUser";
      variables: UsersListFollowersForUserVariables;
    }
  | {
      path: "/users/{username}/following";
      operationId: "usersListFollowingForUser";
      variables: UsersListFollowingForUserVariables;
    }
  | {
      path: "/users/{username}/following/{target_user}";
      operationId: "usersCheckFollowingForUser";
      variables: UsersCheckFollowingForUserVariables;
    }
  | {
      path: "/users/{username}/gists";
      operationId: "gistsListForUser";
      variables: GistsListForUserVariables;
    }
  | {
      path: "/users/{username}/gpg_keys";
      operationId: "usersListGpgKeysForUser";
      variables: UsersListGpgKeysForUserVariables;
    }
  | {
      path: "/users/{username}/hovercard";
      operationId: "usersGetContextForUser";
      variables: UsersGetContextForUserVariables;
    }
  | {
      path: "/users/{username}/installation";
      operationId: "appsGetUserInstallation";
      variables: AppsGetUserInstallationVariables;
    }
  | {
      path: "/users/{username}/keys";
      operationId: "usersListPublicKeysForUser";
      variables: UsersListPublicKeysForUserVariables;
    }
  | {
      path: "/users/{username}/orgs";
      operationId: "orgsListForUser";
      variables: OrgsListForUserVariables;
    }
  | {
      path: "/users/{username}/packages/{package_type}/{package_name}";
      operationId: "packagesGetPackageForUser";
      variables: PackagesGetPackageForUserVariables;
    }
  | {
      path: "/users/{username}/packages/{package_type}/{package_name}/versions";
      operationId: "packagesGetAllPackageVersionsForPackageOwnedByUser";
      variables: PackagesGetAllPackageVersionsForPackageOwnedByUserVariables;
    }
  | {
      path: "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}";
      operationId: "packagesGetPackageVersionForUser";
      variables: PackagesGetPackageVersionForUserVariables;
    }
  | {
      path: "/users/{username}/projects";
      operationId: "projectsListForUser";
      variables: ProjectsListForUserVariables;
    }
  | {
      path: "/users/{username}/received_events";
      operationId: "activityListReceivedEventsForUser";
      variables: ActivityListReceivedEventsForUserVariables;
    }
  | {
      path: "/users/{username}/received_events/public";
      operationId: "activityListReceivedPublicEventsForUser";
      variables: ActivityListReceivedPublicEventsForUserVariables;
    }
  | {
      path: "/users/{username}/repos";
      operationId: "reposListForUser";
      variables: ReposListForUserVariables;
    }
  | {
      path: "/users/{username}/settings/billing/actions";
      operationId: "billingGetGithubActionsBillingUser";
      variables: BillingGetGithubActionsBillingUserVariables;
    }
  | {
      path: "/users/{username}/settings/billing/packages";
      operationId: "billingGetGithubPackagesBillingUser";
      variables: BillingGetGithubPackagesBillingUserVariables;
    }
  | {
      path: "/users/{username}/settings/billing/shared-storage";
      operationId: "billingGetSharedStorageBillingUser";
      variables: BillingGetSharedStorageBillingUserVariables;
    }
  | {
      path: "/users/{username}/starred";
      operationId: "activityListReposStarredByUser";
      variables: ActivityListReposStarredByUserVariables;
    }
  | {
      path: "/users/{username}/subscriptions";
      operationId: "activityListReposWatchedByUser";
      variables: ActivityListReposWatchedByUserVariables;
    }
  | {
      path: "/zen";
      operationId: "metaGetZen";
      variables: MetaGetZenVariables;
    };
